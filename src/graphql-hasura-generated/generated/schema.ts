// @ts-nocheck
import * as extensions from "../extensions";
import { lazyGetters } from "@gqless/utils";
import {
  ObjectNode,
  FieldNode,
  ArrayNode,
  ScalarNode,
  InputNode,
  InputNodeField,
  EnumNode,
  Arguments,
  ArgumentsField
} from "gqless";

export const schema = {
  get Activos() {
    return new ObjectNode(
      {
        get Id_sp() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get puesto() {
          return new FieldNode(new ArrayNode(schema.SP, true), undefined, true);
        }
      },
      { name: "Activos", extension: ((extensions as any) || {}).Activos }
    );
  },
  get Boolean() {
    return new ScalarNode({
      name: "Boolean",
      extension: ((extensions as any) || {}).Boolean
    });
  },
  get Boolean_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _gt() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _gte() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.Boolean, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lte() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _neq() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.Boolean, true), true);
        }
      },
      { name: "Boolean_comparison_exp" }
    );
  },
  get Empleado() {
    return new ObjectNode(
      {
        get curp() {
          return new FieldNode(schema.String, undefined, false);
        },
        get edificio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get email() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fecha_baja() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fecha_ingreso() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funcion_id() {
          return new FieldNode(schema.ID, undefined, true);
        },
        get id() {
          return new FieldNode(schema.ID, undefined, false);
        },
        get imagen_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get jefe() {
          return new FieldNode(schema.Empleado, undefined, true);
        },
        get nombre() {
          return new FieldNode(schema.String, undefined, false);
        },
        get numero_credencial() {
          return new FieldNode(schema.ID, undefined, true);
        },
        get numero_plaza() {
          return new FieldNode(schema.String, undefined, true);
        },
        get piso() {
          return new FieldNode(schema.String, undefined, true);
        },
        get primer_apellido() {
          return new FieldNode(schema.String, undefined, true);
        },
        get puesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get rfc() {
          return new FieldNode(schema.String, undefined, true);
        },
        get rhnet_id() {
          return new FieldNode(schema.ID, undefined, true);
        },
        get rusp_id() {
          return new FieldNode(schema.ID, undefined, true);
        },
        get segundo_apellido() {
          return new FieldNode(schema.String, undefined, true);
        },
        get telefono_extension() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tipo_servidor_publico() {
          return new FieldNode(schema.String, undefined, true);
        },
        get unidad_administrativa() {
          return new FieldNode(schema.UnidadAdministrativa, undefined, true);
        }
      },
      { name: "Empleado", extension: ((extensions as any) || {}).Empleado }
    );
  },
  get Float() {
    return new ScalarNode({
      name: "Float",
      extension: ((extensions as any) || {}).Float
    });
  },
  get ID() {
    return new ScalarNode({
      name: "ID",
      extension: ((extensions as any) || {}).ID
    });
  },
  get Int() {
    return new ScalarNode({
      name: "Int",
      extension: ((extensions as any) || {}).Int
    });
  },
  get Int_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.Int, true);
        },
        get _gt() {
          return new InputNodeField(schema.Int, true);
        },
        get _gte() {
          return new InputNodeField(schema.Int, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.Int, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.Int, true);
        },
        get _lte() {
          return new InputNodeField(schema.Int, true);
        },
        get _neq() {
          return new InputNodeField(schema.Int, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.Int, true), true);
        }
      },
      { name: "Int_comparison_exp" }
    );
  },
  get Mes() {
    return new EnumNode({ name: "Mes" });
  },
  get Omex() {
    return new EnumNode({ name: "Omex" });
  },
  get PARTICIPANTES() {
    return new ObjectNode(
      {
        get CARRERA() {
          return new FieldNode(schema.String, undefined, false);
        },
        get CORREO() {
          return new FieldNode(schema.String, undefined, false);
        },
        get FECHA_DE_REGISTRO() {
          return new FieldNode(schema.date, undefined, false);
        },
        get ID() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get INSTITUCION() {
          return new FieldNode(schema.String, undefined, false);
        },
        get NOMBRE() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "PARTICIPANTES",
        extension: ((extensions as any) || {}).PARTICIPANTES
      }
    );
  },
  get PARTICIPANTES_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.PARTICIPANTES_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.PARTICIPANTES, false),
            undefined,
            false
          );
        }
      },
      {
        name: "PARTICIPANTES_aggregate",
        extension: ((extensions as any) || {}).PARTICIPANTES_aggregate
      }
    );
  },
  get PARTICIPANTES_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.PARTICIPANTES_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.PARTICIPANTES_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.PARTICIPANTES_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.PARTICIPANTES_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.PARTICIPANTES_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.PARTICIPANTES_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.PARTICIPANTES_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.PARTICIPANTES_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.PARTICIPANTES_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.PARTICIPANTES_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.PARTICIPANTES_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "PARTICIPANTES_aggregate_fields",
        extension: ((extensions as any) || {}).PARTICIPANTES_aggregate_fields
      }
    );
  },
  get PARTICIPANTES_avg_fields() {
    return new ObjectNode(
      {
        get ID() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "PARTICIPANTES_avg_fields",
        extension: ((extensions as any) || {}).PARTICIPANTES_avg_fields
      }
    );
  },
  get PARTICIPANTES_bool_exp() {
    return new InputNode(
      {
        get CARRERA() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get CORREO() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get FECHA_DE_REGISTRO() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get ID() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get INSTITUCION() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get NOMBRE() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.PARTICIPANTES_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.PARTICIPANTES_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.PARTICIPANTES_bool_exp, true),
            true
          );
        }
      },
      { name: "PARTICIPANTES_bool_exp" }
    );
  },
  get PARTICIPANTES_constraint() {
    return new EnumNode({ name: "PARTICIPANTES_constraint" });
  },
  get PARTICIPANTES_inc_input() {
    return new InputNode(
      {
        get ID() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "PARTICIPANTES_inc_input" }
    );
  },
  get PARTICIPANTES_insert_input() {
    return new InputNode(
      {
        get CARRERA() {
          return new InputNodeField(schema.String, true);
        },
        get CORREO() {
          return new InputNodeField(schema.String, true);
        },
        get FECHA_DE_REGISTRO() {
          return new InputNodeField(schema.date, true);
        },
        get ID() {
          return new InputNodeField(schema.Int, true);
        },
        get INSTITUCION() {
          return new InputNodeField(schema.String, true);
        },
        get NOMBRE() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "PARTICIPANTES_insert_input" }
    );
  },
  get PARTICIPANTES_max_fields() {
    return new ObjectNode(
      {
        get CARRERA() {
          return new FieldNode(schema.String, undefined, true);
        },
        get CORREO() {
          return new FieldNode(schema.String, undefined, true);
        },
        get FECHA_DE_REGISTRO() {
          return new FieldNode(schema.date, undefined, true);
        },
        get ID() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get INSTITUCION() {
          return new FieldNode(schema.String, undefined, true);
        },
        get NOMBRE() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "PARTICIPANTES_max_fields",
        extension: ((extensions as any) || {}).PARTICIPANTES_max_fields
      }
    );
  },
  get PARTICIPANTES_min_fields() {
    return new ObjectNode(
      {
        get CARRERA() {
          return new FieldNode(schema.String, undefined, true);
        },
        get CORREO() {
          return new FieldNode(schema.String, undefined, true);
        },
        get FECHA_DE_REGISTRO() {
          return new FieldNode(schema.date, undefined, true);
        },
        get ID() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get INSTITUCION() {
          return new FieldNode(schema.String, undefined, true);
        },
        get NOMBRE() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "PARTICIPANTES_min_fields",
        extension: ((extensions as any) || {}).PARTICIPANTES_min_fields
      }
    );
  },
  get PARTICIPANTES_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.PARTICIPANTES, false),
            undefined,
            false
          );
        }
      },
      {
        name: "PARTICIPANTES_mutation_response",
        extension: ((extensions as any) || {}).PARTICIPANTES_mutation_response
      }
    );
  },
  get PARTICIPANTES_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.PARTICIPANTES_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.PARTICIPANTES_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.PARTICIPANTES_bool_exp, true);
        }
      },
      { name: "PARTICIPANTES_on_conflict" }
    );
  },
  get PARTICIPANTES_order_by() {
    return new InputNode(
      {
        get CARRERA() {
          return new InputNodeField(schema.order_by, true);
        },
        get CORREO() {
          return new InputNodeField(schema.order_by, true);
        },
        get FECHA_DE_REGISTRO() {
          return new InputNodeField(schema.order_by, true);
        },
        get ID() {
          return new InputNodeField(schema.order_by, true);
        },
        get INSTITUCION() {
          return new InputNodeField(schema.order_by, true);
        },
        get NOMBRE() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "PARTICIPANTES_order_by" }
    );
  },
  get PARTICIPANTES_pk_columns_input() {
    return new InputNode(
      {
        get ID() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "PARTICIPANTES_pk_columns_input" }
    );
  },
  get PARTICIPANTES_select_column() {
    return new EnumNode({ name: "PARTICIPANTES_select_column" });
  },
  get PARTICIPANTES_set_input() {
    return new InputNode(
      {
        get CARRERA() {
          return new InputNodeField(schema.String, true);
        },
        get CORREO() {
          return new InputNodeField(schema.String, true);
        },
        get FECHA_DE_REGISTRO() {
          return new InputNodeField(schema.date, true);
        },
        get ID() {
          return new InputNodeField(schema.Int, true);
        },
        get INSTITUCION() {
          return new InputNodeField(schema.String, true);
        },
        get NOMBRE() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "PARTICIPANTES_set_input" }
    );
  },
  get PARTICIPANTES_stddev_fields() {
    return new ObjectNode(
      {
        get ID() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "PARTICIPANTES_stddev_fields",
        extension: ((extensions as any) || {}).PARTICIPANTES_stddev_fields
      }
    );
  },
  get PARTICIPANTES_stddev_pop_fields() {
    return new ObjectNode(
      {
        get ID() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "PARTICIPANTES_stddev_pop_fields",
        extension: ((extensions as any) || {}).PARTICIPANTES_stddev_pop_fields
      }
    );
  },
  get PARTICIPANTES_stddev_samp_fields() {
    return new ObjectNode(
      {
        get ID() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "PARTICIPANTES_stddev_samp_fields",
        extension: ((extensions as any) || {}).PARTICIPANTES_stddev_samp_fields
      }
    );
  },
  get PARTICIPANTES_sum_fields() {
    return new ObjectNode(
      {
        get ID() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "PARTICIPANTES_sum_fields",
        extension: ((extensions as any) || {}).PARTICIPANTES_sum_fields
      }
    );
  },
  get PARTICIPANTES_update_column() {
    return new EnumNode({ name: "PARTICIPANTES_update_column" });
  },
  get PARTICIPANTES_var_pop_fields() {
    return new ObjectNode(
      {
        get ID() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "PARTICIPANTES_var_pop_fields",
        extension: ((extensions as any) || {}).PARTICIPANTES_var_pop_fields
      }
    );
  },
  get PARTICIPANTES_var_samp_fields() {
    return new ObjectNode(
      {
        get ID() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "PARTICIPANTES_var_samp_fields",
        extension: ((extensions as any) || {}).PARTICIPANTES_var_samp_fields
      }
    );
  },
  get PARTICIPANTES_variance_fields() {
    return new ObjectNode(
      {
        get ID() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "PARTICIPANTES_variance_fields",
        extension: ((extensions as any) || {}).PARTICIPANTES_variance_fields
      }
    );
  },
  get Periodo() {
    return new EnumNode({ name: "Periodo" });
  },
  get SP() {
    return new ObjectNode(
      {
        get area_adscripcion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cod_presupuestal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cod_rhnet() {
          return new FieldNode(schema.String, undefined, true);
        },
        get compensacion_garantizada() {
          return new FieldNode(schema.String, undefined, true);
        },
        get contratado_por_honorarios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get correo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cp() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cve_presupuestal_sep() {
          return new FieldNode(schema.String, undefined, true);
        },
        get declaracion_patrimonial() {
          return new FieldNode(schema.String, undefined, true);
        },
        get descendencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get discapacidad() {
          return new FieldNode(schema.String, undefined, true);
        },
        get entidad_federativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estado_conyugal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estatus_ocupacional() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fecha_baja() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fecha_entrada_apf() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fecha_ingreso_institucion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fecha_ingreso_spc() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fecha_nac() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fecha_obligacion_declara() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fecha_toma_posesion_puesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funcion_puesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_alta() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_area() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_avaluos() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_concesiones() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_contrataciones() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_discapacidad() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_edo_civil() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_enajenaciones() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_ente() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_entidad_federativa() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_estado_mpio() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_estatus_ocup() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_motivo_baja() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_motivo_declaracion() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_nivel_equivalencia() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_nvl_escolar() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_pais() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_pais_nac() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_puesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_puesto_estrategico() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rfi_riuf() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_sexo() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_sp() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_tipo_contratacion() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_tipo_personal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_tipo_plaza() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_tipo_sp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_ua() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_zona_economica() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idiomas() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inst_seg_social() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get institucion_ss() {
          return new FieldNode(schema.String, undefined, true);
        },
        get motivo_baja() {
          return new FieldNode(schema.String, undefined, true);
        },
        get motivo_declaracion_patrimonial() {
          return new FieldNode(schema.String, undefined, true);
        },
        get municipio_delegacion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivel_empleo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivel_equivalencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivel_escolaridad() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombre_empleo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombre_ente() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombres() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nss() {
          return new FieldNode(schema.String, undefined, true);
        },
        get num_consecutivo_puesto() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get num_consecutivo_puestoj() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get nvl_tabular() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pais() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pais_nacimiento() {
          return new FieldNode(schema.String, undefined, true);
        },
        get politicamente_expuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get primer_apellido() {
          return new FieldNode(schema.String, undefined, true);
        },
        get puesto_estrategico() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ramo() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rfc() {
          return new FieldNode(schema.String, undefined, true);
        },
        get rfi_riuf() {
          return new FieldNode(schema.String, undefined, true);
        },
        get segundo_apellido() {
          return new FieldNode(schema.String, undefined, true);
        },
        get serc() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sexo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sueldo_base() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sueldo_pagado() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tipo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tipo_funcion_puesto() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get tipo_personal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tipo_plaza() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tipo_puesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tipo_servidor_publico() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        },
        get zona_economica() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      { name: "SP", extension: ((extensions as any) || {}).SP }
    );
  },
  get String() {
    return new ScalarNode({
      name: "String",
      extension: ((extensions as any) || {}).String
    });
  },
  get String_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.String, true);
        },
        get _gt() {
          return new InputNodeField(schema.String, true);
        },
        get _gte() {
          return new InputNodeField(schema.String, true);
        },
        get _ilike() {
          return new InputNodeField(schema.String, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
        get _iregex() {
          return new InputNodeField(schema.String, true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _like() {
          return new InputNodeField(schema.String, true);
        },
        get _lt() {
          return new InputNodeField(schema.String, true);
        },
        get _lte() {
          return new InputNodeField(schema.String, true);
        },
        get _neq() {
          return new InputNodeField(schema.String, true);
        },
        get _nilike() {
          return new InputNodeField(schema.String, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
        get _niregex() {
          return new InputNodeField(schema.String, true);
        },
        get _nlike() {
          return new InputNodeField(schema.String, true);
        },
        get _nregex() {
          return new InputNodeField(schema.String, true);
        },
        get _nsimilar() {
          return new InputNodeField(schema.String, true);
        },
        get _regex() {
          return new InputNodeField(schema.String, true);
        },
        get _similar() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "String_comparison_exp" }
    );
  },
  get Total() {
    return new ObjectNode(
      {
        get total() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      { name: "Total", extension: ((extensions as any) || {}).Total }
    );
  },
  get Type() {
    return new EnumNode({ name: "Type" });
  },
  get Types() {
    return new EnumNode({ name: "Types" });
  },
  get UnidadAdministrativa() {
    return new ObjectNode(
      {
        get empleados() {
          return new FieldNode(
            new ArrayNode(schema.Empleado, false),
            new Arguments({
              get first() {
                return new ArgumentsField(schema.Int, true);
              },
              get skip() {
                return new ArgumentsField(schema.Int, true);
              }
            }),
            false
          );
        },
        get id() {
          return new FieldNode(schema.ID, undefined, false);
        },
        get nombre() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "UnidadAdministrativa",
        extension: ((extensions as any) || {}).UnidadAdministrativa
      }
    );
  },
  get __Directive() {
    return new ObjectNode(
      {
        get args() {
          return new FieldNode(schema.__InputValue, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, false);
        },
        get isRepeatable() {
          return new FieldNode(schema.String, undefined, false);
        },
        get locations() {
          return new FieldNode(schema.String, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "__Directive",
        extension: ((extensions as any) || {}).__Directive
      }
    );
  },
  get __EnumValue() {
    return new ObjectNode(
      {
        get deprecationReason() {
          return new FieldNode(schema.String, undefined, false);
        },
        get description() {
          return new FieldNode(schema.String, undefined, false);
        },
        get isDeprecated() {
          return new FieldNode(schema.String, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "__EnumValue",
        extension: ((extensions as any) || {}).__EnumValue
      }
    );
  },
  get __Field() {
    return new ObjectNode(
      {
        get args() {
          return new FieldNode(schema.__InputValue, undefined, true);
        },
        get deprecationReason() {
          return new FieldNode(schema.String, undefined, false);
        },
        get description() {
          return new FieldNode(schema.String, undefined, false);
        },
        get isDeprecated() {
          return new FieldNode(schema.String, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, false);
        },
        get type() {
          return new FieldNode(schema.__Type, undefined, true);
        }
      },
      { name: "__Field", extension: ((extensions as any) || {}).__Field }
    );
  },
  get __InputValue() {
    return new ObjectNode(
      {
        get defaultValue() {
          return new FieldNode(schema.String, undefined, false);
        },
        get description() {
          return new FieldNode(schema.String, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, false);
        },
        get type() {
          return new FieldNode(schema.__Type, undefined, true);
        }
      },
      {
        name: "__InputValue",
        extension: ((extensions as any) || {}).__InputValue
      }
    );
  },
  get __Schema() {
    return new ObjectNode(
      {
        get description() {
          return new FieldNode(schema.String, undefined, false);
        },
        get directives() {
          return new FieldNode(schema.__Directive, undefined, true);
        },
        get mutationType() {
          return new FieldNode(schema.__Type, undefined, true);
        },
        get queryType() {
          return new FieldNode(schema.__Type, undefined, true);
        },
        get subscriptionType() {
          return new FieldNode(schema.__Type, undefined, true);
        },
        get types() {
          return new FieldNode(schema.__Type, undefined, true);
        }
      },
      { name: "__Schema", extension: ((extensions as any) || {}).__Schema }
    );
  },
  get __Type() {
    return new ObjectNode(
      {
        get description() {
          return new FieldNode(schema.String, undefined, false);
        },
        get enumValues() {
          return new FieldNode(
            schema.__EnumValue,
            new Arguments({
              get includeDeprecated() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            true
          );
        },
        get fields() {
          return new FieldNode(
            schema.__Field,
            new Arguments({
              get includeDeprecated() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            true
          );
        },
        get inputFields() {
          return new FieldNode(schema.__InputValue, undefined, true);
        },
        get interfaces() {
          return new FieldNode(schema.__Type, undefined, true);
        },
        get kind() {
          return new FieldNode(schema.__TypeKind, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, false);
        },
        get ofType() {
          return new FieldNode(schema.__Type, undefined, true);
        },
        get possibleTypes() {
          return new FieldNode(schema.__Type, undefined, true);
        }
      },
      { name: "__Type", extension: ((extensions as any) || {}).__Type }
    );
  },
  get __TypeKind() {
    return new EnumNode({ name: "__TypeKind" });
  },
  get areaGeneralEstudios() {
    return new ObjectNode(
      {
        get areaGeneralEstudios() {
          return new FieldNode(schema.String, undefined, false);
        },
        get carreraGenericas() {
          return new FieldNode(
            new ArrayNode(schema.carreraGenerica, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.carreraGenerica_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get carreraGenericas_aggregate() {
          return new FieldNode(
            schema.carreraGenerica_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.carreraGenerica_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospcs() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriageneronospc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospcs_aggregate() {
          return new FieldNode(
            schema.convocatoriageneronospc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriagenero, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros_aggregate() {
          return new FieldNode(
            schema.convocatoriagenero_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get idAreaGeneralEstudios() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "areaGeneralEstudios",
        extension: ((extensions as any) || {}).areaGeneralEstudios
      }
    );
  },
  get areaGeneralEstudios_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.areaGeneralEstudios_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.areaGeneralEstudios, false),
            undefined,
            false
          );
        }
      },
      {
        name: "areaGeneralEstudios_aggregate",
        extension: ((extensions as any) || {}).areaGeneralEstudios_aggregate
      }
    );
  },
  get areaGeneralEstudios_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralEstudios_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.areaGeneralEstudios_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.areaGeneralEstudios_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "areaGeneralEstudios_aggregate_fields",
        extension: ((extensions as any) || {})
          .areaGeneralEstudios_aggregate_fields
      }
    );
  },
  get areaGeneralEstudios_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.areaGeneralEstudios_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.areaGeneralEstudios_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.areaGeneralEstudios_bool_exp, true),
            true
          );
        },
        get areaGeneralEstudios() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get carreraGenericas() {
          return new InputNodeField(schema.carreraGenerica_bool_exp, true);
        },
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_bool_exp,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(schema.convocatoriagenero_bool_exp, true);
        },
        get idAreaGeneralEstudios() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "areaGeneralEstudios_bool_exp" }
    );
  },
  get areaGeneralEstudios_constraint() {
    return new EnumNode({ name: "areaGeneralEstudios_constraint" });
  },
  get areaGeneralEstudios_insert_input() {
    return new InputNode(
      {
        get areaGeneralEstudios() {
          return new InputNodeField(schema.String, true);
        },
        get carreraGenericas() {
          return new InputNodeField(
            schema.carreraGenerica_arr_rel_insert_input,
            true
          );
        },
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_arr_rel_insert_input,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(
            schema.convocatoriagenero_arr_rel_insert_input,
            true
          );
        },
        get idAreaGeneralEstudios() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "areaGeneralEstudios_insert_input" }
    );
  },
  get areaGeneralEstudios_max_fields() {
    return new ObjectNode(
      {
        get areaGeneralEstudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idAreaGeneralEstudios() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "areaGeneralEstudios_max_fields",
        extension: ((extensions as any) || {}).areaGeneralEstudios_max_fields
      }
    );
  },
  get areaGeneralEstudios_min_fields() {
    return new ObjectNode(
      {
        get areaGeneralEstudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idAreaGeneralEstudios() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "areaGeneralEstudios_min_fields",
        extension: ((extensions as any) || {}).areaGeneralEstudios_min_fields
      }
    );
  },
  get areaGeneralEstudios_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.areaGeneralEstudios, false),
            undefined,
            false
          );
        }
      },
      {
        name: "areaGeneralEstudios_mutation_response",
        extension: ((extensions as any) || {})
          .areaGeneralEstudios_mutation_response
      }
    );
  },
  get areaGeneralEstudios_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.areaGeneralEstudios_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.areaGeneralEstudios_on_conflict,
            true
          );
        }
      },
      { name: "areaGeneralEstudios_obj_rel_insert_input" }
    );
  },
  get areaGeneralEstudios_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.areaGeneralEstudios_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.areaGeneralEstudios_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.areaGeneralEstudios_bool_exp, true);
        }
      },
      { name: "areaGeneralEstudios_on_conflict" }
    );
  },
  get areaGeneralEstudios_order_by() {
    return new InputNode(
      {
        get areaGeneralEstudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get carreraGenericas_aggregate() {
          return new InputNodeField(
            schema.carreraGenerica_aggregate_order_by,
            true
          );
        },
        get convocatoriageneronospcs_aggregate() {
          return new InputNodeField(
            schema.convocatoriageneronospc_aggregate_order_by,
            true
          );
        },
        get convocatoriageneros_aggregate() {
          return new InputNodeField(
            schema.convocatoriagenero_aggregate_order_by,
            true
          );
        },
        get idAreaGeneralEstudios() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "areaGeneralEstudios_order_by" }
    );
  },
  get areaGeneralEstudios_pk_columns_input() {
    return new InputNode(
      {
        get idAreaGeneralEstudios() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "areaGeneralEstudios_pk_columns_input" }
    );
  },
  get areaGeneralEstudios_select_column() {
    return new EnumNode({ name: "areaGeneralEstudios_select_column" });
  },
  get areaGeneralEstudios_set_input() {
    return new InputNode(
      {
        get areaGeneralEstudios() {
          return new InputNodeField(schema.String, true);
        },
        get idAreaGeneralEstudios() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "areaGeneralEstudios_set_input" }
    );
  },
  get areaGeneralEstudios_update_column() {
    return new EnumNode({ name: "areaGeneralEstudios_update_column" });
  },
  get areaGeneralExperiencia() {
    return new ObjectNode(
      {
        get areaGeneralExperiencia() {
          return new FieldNode(schema.String, undefined, false);
        },
        get convocatoriageneronospcs() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriageneronospc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospcs_aggregate() {
          return new FieldNode(
            schema.convocatoriageneronospc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriagenero, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros_aggregate() {
          return new FieldNode(
            schema.convocatoriagenero_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get grupoExperiencium() {
          return new FieldNode(schema.grupoExperiencia, undefined, false);
        },
        get idAreaGeneralExperiencia() {
          return new FieldNode(schema.String, undefined, false);
        },
        get idGrupoExperiencia() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "areaGeneralExperiencia",
        extension: ((extensions as any) || {}).areaGeneralExperiencia
      }
    );
  },
  get areaGeneralExperiencia_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.areaGeneralExperiencia_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.areaGeneralExperiencia, false),
            undefined,
            false
          );
        }
      },
      {
        name: "areaGeneralExperiencia_aggregate",
        extension: ((extensions as any) || {}).areaGeneralExperiencia_aggregate
      }
    );
  },
  get areaGeneralExperiencia_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.areaGeneralExperiencia_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.areaGeneralExperiencia_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.areaGeneralExperiencia_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "areaGeneralExperiencia_aggregate_fields",
        extension: ((extensions as any) || {})
          .areaGeneralExperiencia_aggregate_fields
      }
    );
  },
  get areaGeneralExperiencia_aggregate_order_by() {
    return new InputNode(
      {
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_min_order_by,
            true
          );
        }
      },
      { name: "areaGeneralExperiencia_aggregate_order_by" }
    );
  },
  get areaGeneralExperiencia_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.areaGeneralExperiencia_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_on_conflict,
            true
          );
        }
      },
      { name: "areaGeneralExperiencia_arr_rel_insert_input" }
    );
  },
  get areaGeneralExperiencia_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.areaGeneralExperiencia_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.areaGeneralExperiencia_bool_exp, true),
            true
          );
        },
        get areaGeneralExperiencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_bool_exp,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(schema.convocatoriagenero_bool_exp, true);
        },
        get grupoExperiencium() {
          return new InputNodeField(schema.grupoExperiencia_bool_exp, true);
        },
        get idAreaGeneralExperiencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idGrupoExperiencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "areaGeneralExperiencia_bool_exp" }
    );
  },
  get areaGeneralExperiencia_constraint() {
    return new EnumNode({ name: "areaGeneralExperiencia_constraint" });
  },
  get areaGeneralExperiencia_insert_input() {
    return new InputNode(
      {
        get areaGeneralExperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_arr_rel_insert_input,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(
            schema.convocatoriagenero_arr_rel_insert_input,
            true
          );
        },
        get grupoExperiencium() {
          return new InputNodeField(
            schema.grupoExperiencia_obj_rel_insert_input,
            true
          );
        },
        get idAreaGeneralExperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get idGrupoExperiencia() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "areaGeneralExperiencia_insert_input" }
    );
  },
  get areaGeneralExperiencia_max_fields() {
    return new ObjectNode(
      {
        get areaGeneralExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idAreaGeneralExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idGrupoExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "areaGeneralExperiencia_max_fields",
        extension: ((extensions as any) || {}).areaGeneralExperiencia_max_fields
      }
    );
  },
  get areaGeneralExperiencia_max_order_by() {
    return new InputNode(
      {
        get areaGeneralExperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idAreaGeneralExperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idGrupoExperiencia() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "areaGeneralExperiencia_max_order_by" }
    );
  },
  get areaGeneralExperiencia_min_fields() {
    return new ObjectNode(
      {
        get areaGeneralExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idAreaGeneralExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idGrupoExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "areaGeneralExperiencia_min_fields",
        extension: ((extensions as any) || {}).areaGeneralExperiencia_min_fields
      }
    );
  },
  get areaGeneralExperiencia_min_order_by() {
    return new InputNode(
      {
        get areaGeneralExperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idAreaGeneralExperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idGrupoExperiencia() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "areaGeneralExperiencia_min_order_by" }
    );
  },
  get areaGeneralExperiencia_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.areaGeneralExperiencia, false),
            undefined,
            false
          );
        }
      },
      {
        name: "areaGeneralExperiencia_mutation_response",
        extension: ((extensions as any) || {})
          .areaGeneralExperiencia_mutation_response
      }
    );
  },
  get areaGeneralExperiencia_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_on_conflict,
            true
          );
        }
      },
      { name: "areaGeneralExperiencia_obj_rel_insert_input" }
    );
  },
  get areaGeneralExperiencia_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.areaGeneralExperiencia_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_bool_exp,
            true
          );
        }
      },
      { name: "areaGeneralExperiencia_on_conflict" }
    );
  },
  get areaGeneralExperiencia_order_by() {
    return new InputNode(
      {
        get areaGeneralExperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get convocatoriageneronospcs_aggregate() {
          return new InputNodeField(
            schema.convocatoriageneronospc_aggregate_order_by,
            true
          );
        },
        get convocatoriageneros_aggregate() {
          return new InputNodeField(
            schema.convocatoriagenero_aggregate_order_by,
            true
          );
        },
        get grupoExperiencium() {
          return new InputNodeField(schema.grupoExperiencia_order_by, true);
        },
        get idAreaGeneralExperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idGrupoExperiencia() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "areaGeneralExperiencia_order_by" }
    );
  },
  get areaGeneralExperiencia_pk_columns_input() {
    return new InputNode(
      {
        get idAreaGeneralExperiencia() {
          return new InputNodeField(schema.String, false);
        },
        get idGrupoExperiencia() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "areaGeneralExperiencia_pk_columns_input" }
    );
  },
  get areaGeneralExperiencia_select_column() {
    return new EnumNode({ name: "areaGeneralExperiencia_select_column" });
  },
  get areaGeneralExperiencia_set_input() {
    return new InputNode(
      {
        get areaGeneralExperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get idAreaGeneralExperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get idGrupoExperiencia() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "areaGeneralExperiencia_set_input" }
    );
  },
  get areaGeneralExperiencia_update_column() {
    return new EnumNode({ name: "areaGeneralExperiencia_update_column" });
  },
  get bpchar() {
    return new ScalarNode({
      name: "bpchar",
      extension: ((extensions as any) || {}).bpchar
    });
  },
  get bpchar_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _gt() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _gte() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _ilike() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.bpchar, true), true);
        },
        get _iregex() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _like() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _lt() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _lte() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _neq() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _nilike() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.bpchar, true), true);
        },
        get _niregex() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _nlike() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _nregex() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _nsimilar() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _regex() {
          return new InputNodeField(schema.bpchar, true);
        },
        get _similar() {
          return new InputNodeField(schema.bpchar, true);
        }
      },
      { name: "bpchar_comparison_exp" }
    );
  },
  get bytea() {
    return new ScalarNode({
      name: "bytea",
      extension: ((extensions as any) || {}).bytea
    });
  },
  get bytea_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.bytea, true);
        },
        get _gt() {
          return new InputNodeField(schema.bytea, true);
        },
        get _gte() {
          return new InputNodeField(schema.bytea, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.bytea, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.bytea, true);
        },
        get _lte() {
          return new InputNodeField(schema.bytea, true);
        },
        get _neq() {
          return new InputNodeField(schema.bytea, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.bytea, true), true);
        }
      },
      { name: "bytea_comparison_exp" }
    );
  },
  get calificaciones() {
    return new ObjectNode(
      {
        get grade() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quiz() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get shortname() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Int, undefined, false);
        }
      },
      {
        name: "calificaciones",
        extension: ((extensions as any) || {}).calificaciones
      }
    );
  },
  get calificaciones_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.calificaciones_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.calificaciones, false),
            undefined,
            false
          );
        }
      },
      {
        name: "calificaciones_aggregate",
        extension: ((extensions as any) || {}).calificaciones_aggregate
      }
    );
  },
  get calificaciones_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.calificaciones_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.calificaciones_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.calificaciones_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.calificaciones_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.calificaciones_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.calificaciones_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.calificaciones_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.calificaciones_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.calificaciones_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.calificaciones_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.calificaciones_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "calificaciones_aggregate_fields",
        extension: ((extensions as any) || {}).calificaciones_aggregate_fields
      }
    );
  },
  get calificaciones_avg_fields() {
    return new ObjectNode(
      {
        get grade() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quiz() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "calificaciones_avg_fields",
        extension: ((extensions as any) || {}).calificaciones_avg_fields
      }
    );
  },
  get calificaciones_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.calificaciones_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.calificaciones_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.calificaciones_bool_exp, true),
            true
          );
        },
        get grade() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get quiz() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get shortname() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get uid() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        }
      },
      { name: "calificaciones_bool_exp" }
    );
  },
  get calificaciones_constraint() {
    return new EnumNode({ name: "calificaciones_constraint" });
  },
  get calificaciones_inc_input() {
    return new InputNode(
      {
        get grade() {
          return new InputNodeField(schema.float8, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get quiz() {
          return new InputNodeField(schema.Int, true);
        },
        get uid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "calificaciones_inc_input" }
    );
  },
  get calificaciones_insert_input() {
    return new InputNode(
      {
        get grade() {
          return new InputNodeField(schema.float8, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get quiz() {
          return new InputNodeField(schema.Int, true);
        },
        get shortname() {
          return new InputNodeField(schema.String, true);
        },
        get uid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "calificaciones_insert_input" }
    );
  },
  get calificaciones_max_fields() {
    return new ObjectNode(
      {
        get grade() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quiz() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get shortname() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "calificaciones_max_fields",
        extension: ((extensions as any) || {}).calificaciones_max_fields
      }
    );
  },
  get calificaciones_min_fields() {
    return new ObjectNode(
      {
        get grade() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quiz() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get shortname() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "calificaciones_min_fields",
        extension: ((extensions as any) || {}).calificaciones_min_fields
      }
    );
  },
  get calificaciones_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.calificaciones, false),
            undefined,
            false
          );
        }
      },
      {
        name: "calificaciones_mutation_response",
        extension: ((extensions as any) || {}).calificaciones_mutation_response
      }
    );
  },
  get calificaciones_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.calificaciones_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.calificaciones_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.calificaciones_bool_exp, true);
        }
      },
      { name: "calificaciones_on_conflict" }
    );
  },
  get calificaciones_order_by() {
    return new InputNode(
      {
        get grade() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get quiz() {
          return new InputNodeField(schema.order_by, true);
        },
        get shortname() {
          return new InputNodeField(schema.order_by, true);
        },
        get uid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "calificaciones_order_by" }
    );
  },
  get calificaciones_pk_columns_input() {
    return new InputNode(
      {
        get uid() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "calificaciones_pk_columns_input" }
    );
  },
  get calificaciones_select_column() {
    return new EnumNode({ name: "calificaciones_select_column" });
  },
  get calificaciones_set_input() {
    return new InputNode(
      {
        get grade() {
          return new InputNodeField(schema.float8, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get quiz() {
          return new InputNodeField(schema.Int, true);
        },
        get shortname() {
          return new InputNodeField(schema.String, true);
        },
        get uid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "calificaciones_set_input" }
    );
  },
  get calificaciones_stddev_fields() {
    return new ObjectNode(
      {
        get grade() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quiz() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "calificaciones_stddev_fields",
        extension: ((extensions as any) || {}).calificaciones_stddev_fields
      }
    );
  },
  get calificaciones_stddev_pop_fields() {
    return new ObjectNode(
      {
        get grade() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quiz() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "calificaciones_stddev_pop_fields",
        extension: ((extensions as any) || {}).calificaciones_stddev_pop_fields
      }
    );
  },
  get calificaciones_stddev_samp_fields() {
    return new ObjectNode(
      {
        get grade() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quiz() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "calificaciones_stddev_samp_fields",
        extension: ((extensions as any) || {}).calificaciones_stddev_samp_fields
      }
    );
  },
  get calificaciones_sum_fields() {
    return new ObjectNode(
      {
        get grade() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get quiz() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "calificaciones_sum_fields",
        extension: ((extensions as any) || {}).calificaciones_sum_fields
      }
    );
  },
  get calificaciones_update_column() {
    return new EnumNode({ name: "calificaciones_update_column" });
  },
  get calificaciones_var_pop_fields() {
    return new ObjectNode(
      {
        get grade() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quiz() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "calificaciones_var_pop_fields",
        extension: ((extensions as any) || {}).calificaciones_var_pop_fields
      }
    );
  },
  get calificaciones_var_samp_fields() {
    return new ObjectNode(
      {
        get grade() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quiz() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "calificaciones_var_samp_fields",
        extension: ((extensions as any) || {}).calificaciones_var_samp_fields
      }
    );
  },
  get calificaciones_variance_fields() {
    return new ObjectNode(
      {
        get grade() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quiz() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "calificaciones_variance_fields",
        extension: ((extensions as any) || {}).calificaciones_variance_fields
      }
    );
  },
  get carreraGenerica() {
    return new ObjectNode(
      {
        get areaGeneralEstudio() {
          return new FieldNode(schema.areaGeneralEstudios, undefined, false);
        },
        get carreraGenerica() {
          return new FieldNode(schema.String, undefined, false);
        },
        get convocatoriageneronospcs() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriageneronospc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospcs_aggregate() {
          return new FieldNode(
            schema.convocatoriageneronospc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriagenero, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros_aggregate() {
          return new FieldNode(
            schema.convocatoriagenero_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get idAreaGeneralEstudios() {
          return new FieldNode(schema.String, undefined, false);
        },
        get idCarreraGenerica() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "carreraGenerica",
        extension: ((extensions as any) || {}).carreraGenerica
      }
    );
  },
  get carreraGenerica_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.carreraGenerica_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.carreraGenerica, false),
            undefined,
            false
          );
        }
      },
      {
        name: "carreraGenerica_aggregate",
        extension: ((extensions as any) || {}).carreraGenerica_aggregate
      }
    );
  },
  get carreraGenerica_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.carreraGenerica_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.carreraGenerica_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "carreraGenerica_aggregate_fields",
        extension: ((extensions as any) || {}).carreraGenerica_aggregate_fields
      }
    );
  },
  get carreraGenerica_aggregate_order_by() {
    return new InputNode(
      {
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.carreraGenerica_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.carreraGenerica_min_order_by, true);
        }
      },
      { name: "carreraGenerica_aggregate_order_by" }
    );
  },
  get carreraGenerica_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.carreraGenerica_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.carreraGenerica_on_conflict, true);
        }
      },
      { name: "carreraGenerica_arr_rel_insert_input" }
    );
  },
  get carreraGenerica_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.carreraGenerica_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.carreraGenerica_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.carreraGenerica_bool_exp, true),
            true
          );
        },
        get areaGeneralEstudio() {
          return new InputNodeField(schema.areaGeneralEstudios_bool_exp, true);
        },
        get carreraGenerica() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_bool_exp,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(schema.convocatoriagenero_bool_exp, true);
        },
        get idAreaGeneralEstudios() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idCarreraGenerica() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "carreraGenerica_bool_exp" }
    );
  },
  get carreraGenerica_constraint() {
    return new EnumNode({ name: "carreraGenerica_constraint" });
  },
  get carreraGenerica_insert_input() {
    return new InputNode(
      {
        get areaGeneralEstudio() {
          return new InputNodeField(
            schema.areaGeneralEstudios_obj_rel_insert_input,
            true
          );
        },
        get carreraGenerica() {
          return new InputNodeField(schema.String, true);
        },
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_arr_rel_insert_input,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(
            schema.convocatoriagenero_arr_rel_insert_input,
            true
          );
        },
        get idAreaGeneralEstudios() {
          return new InputNodeField(schema.String, true);
        },
        get idCarreraGenerica() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "carreraGenerica_insert_input" }
    );
  },
  get carreraGenerica_max_fields() {
    return new ObjectNode(
      {
        get carreraGenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idAreaGeneralEstudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idCarreraGenerica() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "carreraGenerica_max_fields",
        extension: ((extensions as any) || {}).carreraGenerica_max_fields
      }
    );
  },
  get carreraGenerica_max_order_by() {
    return new InputNode(
      {
        get carreraGenerica() {
          return new InputNodeField(schema.order_by, true);
        },
        get idAreaGeneralEstudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idCarreraGenerica() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "carreraGenerica_max_order_by" }
    );
  },
  get carreraGenerica_min_fields() {
    return new ObjectNode(
      {
        get carreraGenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idAreaGeneralEstudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idCarreraGenerica() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "carreraGenerica_min_fields",
        extension: ((extensions as any) || {}).carreraGenerica_min_fields
      }
    );
  },
  get carreraGenerica_min_order_by() {
    return new InputNode(
      {
        get carreraGenerica() {
          return new InputNodeField(schema.order_by, true);
        },
        get idAreaGeneralEstudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idCarreraGenerica() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "carreraGenerica_min_order_by" }
    );
  },
  get carreraGenerica_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.carreraGenerica, false),
            undefined,
            false
          );
        }
      },
      {
        name: "carreraGenerica_mutation_response",
        extension: ((extensions as any) || {}).carreraGenerica_mutation_response
      }
    );
  },
  get carreraGenerica_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.carreraGenerica_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.carreraGenerica_on_conflict, true);
        }
      },
      { name: "carreraGenerica_obj_rel_insert_input" }
    );
  },
  get carreraGenerica_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.carreraGenerica_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.carreraGenerica_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.carreraGenerica_bool_exp, true);
        }
      },
      { name: "carreraGenerica_on_conflict" }
    );
  },
  get carreraGenerica_order_by() {
    return new InputNode(
      {
        get areaGeneralEstudio() {
          return new InputNodeField(schema.areaGeneralEstudios_order_by, true);
        },
        get carreraGenerica() {
          return new InputNodeField(schema.order_by, true);
        },
        get convocatoriageneronospcs_aggregate() {
          return new InputNodeField(
            schema.convocatoriageneronospc_aggregate_order_by,
            true
          );
        },
        get convocatoriageneros_aggregate() {
          return new InputNodeField(
            schema.convocatoriagenero_aggregate_order_by,
            true
          );
        },
        get idAreaGeneralEstudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idCarreraGenerica() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "carreraGenerica_order_by" }
    );
  },
  get carreraGenerica_pk_columns_input() {
    return new InputNode(
      {
        get idAreaGeneralEstudios() {
          return new InputNodeField(schema.String, false);
        },
        get idCarreraGenerica() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "carreraGenerica_pk_columns_input" }
    );
  },
  get carreraGenerica_select_column() {
    return new EnumNode({ name: "carreraGenerica_select_column" });
  },
  get carreraGenerica_set_input() {
    return new InputNode(
      {
        get carreraGenerica() {
          return new InputNodeField(schema.String, true);
        },
        get idAreaGeneralEstudios() {
          return new InputNodeField(schema.String, true);
        },
        get idCarreraGenerica() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "carreraGenerica_set_input" }
    );
  },
  get carreraGenerica_update_column() {
    return new EnumNode({ name: "carreraGenerica_update_column" });
  },
  get catalogo_idiomas() {
    return new ObjectNode(
      {
        get descripcion() {
          return new FieldNode(schema.String, undefined, false);
        },
        get id_idioma() {
          return new FieldNode(schema.Int, undefined, false);
        }
      },
      {
        name: "catalogo_idiomas",
        extension: ((extensions as any) || {}).catalogo_idiomas
      }
    );
  },
  get catalogo_idiomas_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.catalogo_idiomas_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.catalogo_idiomas, false),
            undefined,
            false
          );
        }
      },
      {
        name: "catalogo_idiomas_aggregate",
        extension: ((extensions as any) || {}).catalogo_idiomas_aggregate
      }
    );
  },
  get catalogo_idiomas_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.catalogo_idiomas_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.catalogo_idiomas_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.catalogo_idiomas_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.catalogo_idiomas_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.catalogo_idiomas_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.catalogo_idiomas_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.catalogo_idiomas_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.catalogo_idiomas_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.catalogo_idiomas_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.catalogo_idiomas_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.catalogo_idiomas_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "catalogo_idiomas_aggregate_fields",
        extension: ((extensions as any) || {}).catalogo_idiomas_aggregate_fields
      }
    );
  },
  get catalogo_idiomas_avg_fields() {
    return new ObjectNode(
      {
        get id_idioma() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "catalogo_idiomas_avg_fields",
        extension: ((extensions as any) || {}).catalogo_idiomas_avg_fields
      }
    );
  },
  get catalogo_idiomas_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.catalogo_idiomas_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.catalogo_idiomas_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.catalogo_idiomas_bool_exp, true),
            true
          );
        },
        get descripcion() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id_idioma() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        }
      },
      { name: "catalogo_idiomas_bool_exp" }
    );
  },
  get catalogo_idiomas_constraint() {
    return new EnumNode({ name: "catalogo_idiomas_constraint" });
  },
  get catalogo_idiomas_inc_input() {
    return new InputNode(
      {
        get id_idioma() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "catalogo_idiomas_inc_input" }
    );
  },
  get catalogo_idiomas_insert_input() {
    return new InputNode(
      {
        get descripcion() {
          return new InputNodeField(schema.String, true);
        },
        get id_idioma() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "catalogo_idiomas_insert_input" }
    );
  },
  get catalogo_idiomas_max_fields() {
    return new ObjectNode(
      {
        get descripcion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_idioma() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "catalogo_idiomas_max_fields",
        extension: ((extensions as any) || {}).catalogo_idiomas_max_fields
      }
    );
  },
  get catalogo_idiomas_min_fields() {
    return new ObjectNode(
      {
        get descripcion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_idioma() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "catalogo_idiomas_min_fields",
        extension: ((extensions as any) || {}).catalogo_idiomas_min_fields
      }
    );
  },
  get catalogo_idiomas_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.catalogo_idiomas, false),
            undefined,
            false
          );
        }
      },
      {
        name: "catalogo_idiomas_mutation_response",
        extension: ((extensions as any) || {})
          .catalogo_idiomas_mutation_response
      }
    );
  },
  get catalogo_idiomas_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.catalogo_idiomas_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.catalogo_idiomas_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.catalogo_idiomas_bool_exp, true);
        }
      },
      { name: "catalogo_idiomas_on_conflict" }
    );
  },
  get catalogo_idiomas_order_by() {
    return new InputNode(
      {
        get descripcion() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_idioma() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "catalogo_idiomas_order_by" }
    );
  },
  get catalogo_idiomas_pk_columns_input() {
    return new InputNode(
      {
        get id_idioma() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "catalogo_idiomas_pk_columns_input" }
    );
  },
  get catalogo_idiomas_select_column() {
    return new EnumNode({ name: "catalogo_idiomas_select_column" });
  },
  get catalogo_idiomas_set_input() {
    return new InputNode(
      {
        get descripcion() {
          return new InputNodeField(schema.String, true);
        },
        get id_idioma() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "catalogo_idiomas_set_input" }
    );
  },
  get catalogo_idiomas_stddev_fields() {
    return new ObjectNode(
      {
        get id_idioma() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "catalogo_idiomas_stddev_fields",
        extension: ((extensions as any) || {}).catalogo_idiomas_stddev_fields
      }
    );
  },
  get catalogo_idiomas_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id_idioma() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "catalogo_idiomas_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .catalogo_idiomas_stddev_pop_fields
      }
    );
  },
  get catalogo_idiomas_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id_idioma() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "catalogo_idiomas_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .catalogo_idiomas_stddev_samp_fields
      }
    );
  },
  get catalogo_idiomas_sum_fields() {
    return new ObjectNode(
      {
        get id_idioma() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "catalogo_idiomas_sum_fields",
        extension: ((extensions as any) || {}).catalogo_idiomas_sum_fields
      }
    );
  },
  get catalogo_idiomas_update_column() {
    return new EnumNode({ name: "catalogo_idiomas_update_column" });
  },
  get catalogo_idiomas_var_pop_fields() {
    return new ObjectNode(
      {
        get id_idioma() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "catalogo_idiomas_var_pop_fields",
        extension: ((extensions as any) || {}).catalogo_idiomas_var_pop_fields
      }
    );
  },
  get catalogo_idiomas_var_samp_fields() {
    return new ObjectNode(
      {
        get id_idioma() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "catalogo_idiomas_var_samp_fields",
        extension: ((extensions as any) || {}).catalogo_idiomas_var_samp_fields
      }
    );
  },
  get catalogo_idiomas_variance_fields() {
    return new ObjectNode(
      {
        get id_idioma() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "catalogo_idiomas_variance_fields",
        extension: ((extensions as any) || {}).catalogo_idiomas_variance_fields
      }
    );
  },
  get cliks() {
    return new ObjectNode(
      {
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fecha_registro() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id_clik() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get id_curso() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      { name: "cliks", extension: ((extensions as any) || {}).cliks }
    );
  },
  get cliks_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(schema.cliks_aggregate_fields, undefined, true);
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.cliks, false),
            undefined,
            false
          );
        }
      },
      {
        name: "cliks_aggregate",
        extension: ((extensions as any) || {}).cliks_aggregate
      }
    );
  },
  get cliks_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.cliks_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.cliks_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.cliks_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.cliks_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.cliks_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(schema.cliks_stddev_pop_fields, undefined, true);
        },
        get stddev_samp() {
          return new FieldNode(
            schema.cliks_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.cliks_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.cliks_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.cliks_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.cliks_variance_fields, undefined, true);
        }
      },
      {
        name: "cliks_aggregate_fields",
        extension: ((extensions as any) || {}).cliks_aggregate_fields
      }
    );
  },
  get cliks_avg_fields() {
    return new ObjectNode(
      {
        get id_clik() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "cliks_avg_fields",
        extension: ((extensions as any) || {}).cliks_avg_fields
      }
    );
  },
  get cliks_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.cliks_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.cliks_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.cliks_bool_exp, true),
            true
          );
        },
        get curp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get fecha_registro() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get id_clik() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id_curso() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        }
      },
      { name: "cliks_bool_exp" }
    );
  },
  get cliks_constraint() {
    return new EnumNode({ name: "cliks_constraint" });
  },
  get cliks_inc_input() {
    return new InputNode(
      {
        get id_clik() {
          return new InputNodeField(schema.Int, true);
        },
        get id_curso() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "cliks_inc_input" }
    );
  },
  get cliks_insert_input() {
    return new InputNode(
      {
        get curp() {
          return new InputNodeField(schema.String, true);
        },
        get fecha_registro() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id_clik() {
          return new InputNodeField(schema.Int, true);
        },
        get id_curso() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "cliks_insert_input" }
    );
  },
  get cliks_max_fields() {
    return new ObjectNode(
      {
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fecha_registro() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id_clik() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_curso() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "cliks_max_fields",
        extension: ((extensions as any) || {}).cliks_max_fields
      }
    );
  },
  get cliks_min_fields() {
    return new ObjectNode(
      {
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fecha_registro() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id_clik() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_curso() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "cliks_min_fields",
        extension: ((extensions as any) || {}).cliks_min_fields
      }
    );
  },
  get cliks_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.cliks, false),
            undefined,
            false
          );
        }
      },
      {
        name: "cliks_mutation_response",
        extension: ((extensions as any) || {}).cliks_mutation_response
      }
    );
  },
  get cliks_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.cliks_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.cliks_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.cliks_bool_exp, true);
        }
      },
      { name: "cliks_on_conflict" }
    );
  },
  get cliks_order_by() {
    return new InputNode(
      {
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get fecha_registro() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_clik() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_curso() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "cliks_order_by" }
    );
  },
  get cliks_pk_columns_input() {
    return new InputNode(
      {
        get id_clik() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "cliks_pk_columns_input" }
    );
  },
  get cliks_select_column() {
    return new EnumNode({ name: "cliks_select_column" });
  },
  get cliks_set_input() {
    return new InputNode(
      {
        get curp() {
          return new InputNodeField(schema.String, true);
        },
        get fecha_registro() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id_clik() {
          return new InputNodeField(schema.Int, true);
        },
        get id_curso() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "cliks_set_input" }
    );
  },
  get cliks_stddev_fields() {
    return new ObjectNode(
      {
        get id_clik() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "cliks_stddev_fields",
        extension: ((extensions as any) || {}).cliks_stddev_fields
      }
    );
  },
  get cliks_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id_clik() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "cliks_stddev_pop_fields",
        extension: ((extensions as any) || {}).cliks_stddev_pop_fields
      }
    );
  },
  get cliks_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id_clik() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "cliks_stddev_samp_fields",
        extension: ((extensions as any) || {}).cliks_stddev_samp_fields
      }
    );
  },
  get cliks_sum_fields() {
    return new ObjectNode(
      {
        get id_clik() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_curso() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "cliks_sum_fields",
        extension: ((extensions as any) || {}).cliks_sum_fields
      }
    );
  },
  get cliks_update_column() {
    return new EnumNode({ name: "cliks_update_column" });
  },
  get cliks_var_pop_fields() {
    return new ObjectNode(
      {
        get id_clik() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "cliks_var_pop_fields",
        extension: ((extensions as any) || {}).cliks_var_pop_fields
      }
    );
  },
  get cliks_var_samp_fields() {
    return new ObjectNode(
      {
        get id_clik() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "cliks_var_samp_fields",
        extension: ((extensions as any) || {}).cliks_var_samp_fields
      }
    );
  },
  get cliks_variance_fields() {
    return new ObjectNode(
      {
        get id_clik() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "cliks_variance_fields",
        extension: ((extensions as any) || {}).cliks_variance_fields
      }
    );
  },
  get convocatoriagenero() {
    return new ObjectNode(
      {
        get areaGeneralEstudio() {
          return new FieldNode(schema.areaGeneralEstudios, undefined, false);
        },
        get areaGeneralExperiencium() {
          return new FieldNode(schema.areaGeneralExperiencia, undefined, true);
        },
        get carreraGenerica() {
          return new FieldNode(schema.carreraGenerica, undefined, true);
        },
        get codigopostal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get codigopuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get colonia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get dependencium() {
          return new FieldNode(schema.dependencia, undefined, false);
        },
        get direccion1() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion2() {
          return new FieldNode(schema.String, undefined, true);
        },
        get entidadFederativa() {
          return new FieldNode(schema.entidadFederativa, undefined, true);
        },
        get fechafinconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechafinpublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainicioconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainiciopublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fin() {
          return new FieldNode(schema.date, undefined, true);
        },
        get genero() {
          return new FieldNode(schema.String, undefined, true);
        },
        get grupoExperiencium() {
          return new FieldNode(schema.grupoExperiencia, undefined, false);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get idareageneralestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idareageneralexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idcarreragenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get iddependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get identidadfederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idgrupoexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelsalarial() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idpais() {
          return new FieldNode(schema.String, undefined, true);
        },
        get iduapadre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inicio() {
          return new FieldNode(schema.date, undefined, true);
        },
        get moneda() {
          return new FieldNode(schema.String, undefined, true);
        },
        get municipio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelEscolaridad() {
          return new FieldNode(schema.nivelEscolaridad, undefined, false);
        },
        get nivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreconvocatoria() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombrepuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreunidadadministrativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get pai() {
          return new FieldNode(schema.pais, undefined, false);
        },
        get sueldo() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get wicon() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "convocatoriagenero",
        extension: ((extensions as any) || {}).convocatoriagenero
      }
    );
  },
  get convocatoriagenero_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.convocatoriagenero_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriagenero, false),
            undefined,
            false
          );
        }
      },
      {
        name: "convocatoriagenero_aggregate",
        extension: ((extensions as any) || {}).convocatoriagenero_aggregate
      }
    );
  },
  get convocatoriagenero_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.convocatoriagenero_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.convocatoriagenero_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.convocatoriagenero_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.convocatoriagenero_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.convocatoriagenero_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.convocatoriagenero_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.convocatoriagenero_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.convocatoriagenero_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.convocatoriagenero_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.convocatoriagenero_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "convocatoriagenero_aggregate_fields",
        extension: ((extensions as any) || {})
          .convocatoriagenero_aggregate_fields
      }
    );
  },
  get convocatoriagenero_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.convocatoriagenero_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.convocatoriagenero_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.convocatoriagenero_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.convocatoriagenero_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.convocatoriagenero_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.convocatoriagenero_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.convocatoriagenero_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.convocatoriagenero_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.convocatoriagenero_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.convocatoriagenero_variance_order_by,
            true
          );
        }
      },
      { name: "convocatoriagenero_aggregate_order_by" }
    );
  },
  get convocatoriagenero_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.convocatoriagenero_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.convocatoriagenero_on_conflict,
            true
          );
        }
      },
      { name: "convocatoriagenero_arr_rel_insert_input" }
    );
  },
  get convocatoriagenero_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriagenero_avg_fields",
        extension: ((extensions as any) || {}).convocatoriagenero_avg_fields
      }
    );
  },
  get convocatoriagenero_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriagenero_avg_order_by" }
    );
  },
  get convocatoriagenero_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.convocatoriagenero_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.convocatoriagenero_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.convocatoriagenero_bool_exp, true),
            true
          );
        },
        get areaGeneralEstudio() {
          return new InputNodeField(schema.areaGeneralEstudios_bool_exp, true);
        },
        get areaGeneralExperiencium() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_bool_exp,
            true
          );
        },
        get carreraGenerica() {
          return new InputNodeField(schema.carreraGenerica_bool_exp, true);
        },
        get codigopostal() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get colonia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get dependencium() {
          return new InputNodeField(schema.dependencia_bool_exp, true);
        },
        get direccion1() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get direccion2() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get entidadFederativa() {
          return new InputNodeField(schema.entidadFederativa_bool_exp, true);
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get fin() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get genero() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get grupoExperiencium() {
          return new InputNodeField(schema.grupoExperiencia_bool_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idpais() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get inicio() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get moneda() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get municipio() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nivelEscolaridad() {
          return new InputNodeField(schema.nivelEscolaridad_bool_exp, true);
        },
        get nivelpuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get pai() {
          return new InputNodeField(schema.pais_bool_exp, true);
        },
        get sueldo() {
          return new InputNodeField(schema.numeric_comparison_exp, true);
        },
        get ur() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get wicon() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "convocatoriagenero_bool_exp" }
    );
  },
  get convocatoriagenero_constraint() {
    return new EnumNode({ name: "convocatoriagenero_constraint" });
  },
  get convocatoriagenero_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.Int, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.Int, true);
        },
        get sueldo() {
          return new InputNodeField(schema.numeric, true);
        }
      },
      { name: "convocatoriagenero_inc_input" }
    );
  },
  get convocatoriagenero_insert_input() {
    return new InputNode(
      {
        get areaGeneralEstudio() {
          return new InputNodeField(
            schema.areaGeneralEstudios_obj_rel_insert_input,
            true
          );
        },
        get areaGeneralExperiencium() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_obj_rel_insert_input,
            true
          );
        },
        get carreraGenerica() {
          return new InputNodeField(
            schema.carreraGenerica_obj_rel_insert_input,
            true
          );
        },
        get codigopostal() {
          return new InputNodeField(schema.String, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.String, true);
        },
        get colonia() {
          return new InputNodeField(schema.String, true);
        },
        get dependencium() {
          return new InputNodeField(
            schema.dependencia_obj_rel_insert_input,
            true
          );
        },
        get direccion1() {
          return new InputNodeField(schema.String, true);
        },
        get direccion2() {
          return new InputNodeField(schema.String, true);
        },
        get entidadFederativa() {
          return new InputNodeField(
            schema.entidadFederativa_obj_rel_insert_input,
            true
          );
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.date, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.date, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.date, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.date, true);
        },
        get fin() {
          return new InputNodeField(schema.date, true);
        },
        get genero() {
          return new InputNodeField(schema.String, true);
        },
        get grupoExperiencium() {
          return new InputNodeField(
            schema.grupoExperiencia_obj_rel_insert_input,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.String, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.String, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.Int, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.String, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.String, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.String, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.String, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.String, true);
        },
        get idpais() {
          return new InputNodeField(schema.String, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.String, true);
        },
        get inicio() {
          return new InputNodeField(schema.date, true);
        },
        get moneda() {
          return new InputNodeField(schema.String, true);
        },
        get municipio() {
          return new InputNodeField(schema.String, true);
        },
        get nivelEscolaridad() {
          return new InputNodeField(
            schema.nivelEscolaridad_obj_rel_insert_input,
            true
          );
        },
        get nivelpuesto() {
          return new InputNodeField(schema.String, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.String, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.String, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.String, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.Int, true);
        },
        get pai() {
          return new InputNodeField(schema.pais_obj_rel_insert_input, true);
        },
        get sueldo() {
          return new InputNodeField(schema.numeric, true);
        },
        get ur() {
          return new InputNodeField(schema.String, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        },
        get wicon() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "convocatoriagenero_insert_input" }
    );
  },
  get convocatoriagenero_max_fields() {
    return new ObjectNode(
      {
        get codigopostal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get codigopuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get colonia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion1() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion2() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fechafinconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechafinpublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainicioconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainiciopublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fin() {
          return new FieldNode(schema.date, undefined, true);
        },
        get genero() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idareageneralestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idareageneralexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idcarreragenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get iddependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get identidadfederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idgrupoexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelsalarial() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idpais() {
          return new FieldNode(schema.String, undefined, true);
        },
        get iduapadre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inicio() {
          return new FieldNode(schema.date, undefined, true);
        },
        get moneda() {
          return new FieldNode(schema.String, undefined, true);
        },
        get municipio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreconvocatoria() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombrepuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreunidadadministrativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get wicon() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "convocatoriagenero_max_fields",
        extension: ((extensions as any) || {}).convocatoriagenero_max_fields
      }
    );
  },
  get convocatoriagenero_max_order_by() {
    return new InputNode(
      {
        get codigopostal() {
          return new InputNodeField(schema.order_by, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get colonia() {
          return new InputNodeField(schema.order_by, true);
        },
        get direccion1() {
          return new InputNodeField(schema.order_by, true);
        },
        get direccion2() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fin() {
          return new InputNodeField(schema.order_by, true);
        },
        get genero() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.order_by, true);
        },
        get idpais() {
          return new InputNodeField(schema.order_by, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.order_by, true);
        },
        get inicio() {
          return new InputNodeField(schema.order_by, true);
        },
        get moneda() {
          return new InputNodeField(schema.order_by, true);
        },
        get municipio() {
          return new InputNodeField(schema.order_by, true);
        },
        get nivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        },
        get ur() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get wicon() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriagenero_max_order_by" }
    );
  },
  get convocatoriagenero_min_fields() {
    return new ObjectNode(
      {
        get codigopostal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get codigopuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get colonia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion1() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion2() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fechafinconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechafinpublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainicioconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainiciopublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fin() {
          return new FieldNode(schema.date, undefined, true);
        },
        get genero() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idareageneralestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idareageneralexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idcarreragenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get iddependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get identidadfederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idgrupoexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelsalarial() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idpais() {
          return new FieldNode(schema.String, undefined, true);
        },
        get iduapadre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inicio() {
          return new FieldNode(schema.date, undefined, true);
        },
        get moneda() {
          return new FieldNode(schema.String, undefined, true);
        },
        get municipio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreconvocatoria() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombrepuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreunidadadministrativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get wicon() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "convocatoriagenero_min_fields",
        extension: ((extensions as any) || {}).convocatoriagenero_min_fields
      }
    );
  },
  get convocatoriagenero_min_order_by() {
    return new InputNode(
      {
        get codigopostal() {
          return new InputNodeField(schema.order_by, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get colonia() {
          return new InputNodeField(schema.order_by, true);
        },
        get direccion1() {
          return new InputNodeField(schema.order_by, true);
        },
        get direccion2() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fin() {
          return new InputNodeField(schema.order_by, true);
        },
        get genero() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.order_by, true);
        },
        get idpais() {
          return new InputNodeField(schema.order_by, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.order_by, true);
        },
        get inicio() {
          return new InputNodeField(schema.order_by, true);
        },
        get moneda() {
          return new InputNodeField(schema.order_by, true);
        },
        get municipio() {
          return new InputNodeField(schema.order_by, true);
        },
        get nivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        },
        get ur() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get wicon() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriagenero_min_order_by" }
    );
  },
  get convocatoriagenero_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriagenero, false),
            undefined,
            false
          );
        }
      },
      {
        name: "convocatoriagenero_mutation_response",
        extension: ((extensions as any) || {})
          .convocatoriagenero_mutation_response
      }
    );
  },
  get convocatoriagenero_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.convocatoriagenero_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.convocatoriagenero_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.convocatoriagenero_bool_exp, true);
        }
      },
      { name: "convocatoriagenero_on_conflict" }
    );
  },
  get convocatoriagenero_order_by() {
    return new InputNode(
      {
        get areaGeneralEstudio() {
          return new InputNodeField(schema.areaGeneralEstudios_order_by, true);
        },
        get areaGeneralExperiencium() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_order_by,
            true
          );
        },
        get carreraGenerica() {
          return new InputNodeField(schema.carreraGenerica_order_by, true);
        },
        get codigopostal() {
          return new InputNodeField(schema.order_by, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get colonia() {
          return new InputNodeField(schema.order_by, true);
        },
        get dependencium() {
          return new InputNodeField(schema.dependencia_order_by, true);
        },
        get direccion1() {
          return new InputNodeField(schema.order_by, true);
        },
        get direccion2() {
          return new InputNodeField(schema.order_by, true);
        },
        get entidadFederativa() {
          return new InputNodeField(schema.entidadFederativa_order_by, true);
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fin() {
          return new InputNodeField(schema.order_by, true);
        },
        get genero() {
          return new InputNodeField(schema.order_by, true);
        },
        get grupoExperiencium() {
          return new InputNodeField(schema.grupoExperiencia_order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.order_by, true);
        },
        get idpais() {
          return new InputNodeField(schema.order_by, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.order_by, true);
        },
        get inicio() {
          return new InputNodeField(schema.order_by, true);
        },
        get moneda() {
          return new InputNodeField(schema.order_by, true);
        },
        get municipio() {
          return new InputNodeField(schema.order_by, true);
        },
        get nivelEscolaridad() {
          return new InputNodeField(schema.nivelEscolaridad_order_by, true);
        },
        get nivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get pai() {
          return new InputNodeField(schema.pais_order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        },
        get ur() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get wicon() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriagenero_order_by" }
    );
  },
  get convocatoriagenero_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "convocatoriagenero_pk_columns_input" }
    );
  },
  get convocatoriagenero_select_column() {
    return new EnumNode({ name: "convocatoriagenero_select_column" });
  },
  get convocatoriagenero_set_input() {
    return new InputNode(
      {
        get codigopostal() {
          return new InputNodeField(schema.String, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.String, true);
        },
        get colonia() {
          return new InputNodeField(schema.String, true);
        },
        get direccion1() {
          return new InputNodeField(schema.String, true);
        },
        get direccion2() {
          return new InputNodeField(schema.String, true);
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.date, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.date, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.date, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.date, true);
        },
        get fin() {
          return new InputNodeField(schema.date, true);
        },
        get genero() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.String, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.String, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.Int, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.String, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.String, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.String, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.String, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.String, true);
        },
        get idpais() {
          return new InputNodeField(schema.String, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.String, true);
        },
        get inicio() {
          return new InputNodeField(schema.date, true);
        },
        get moneda() {
          return new InputNodeField(schema.String, true);
        },
        get municipio() {
          return new InputNodeField(schema.String, true);
        },
        get nivelpuesto() {
          return new InputNodeField(schema.String, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.String, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.String, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.String, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.Int, true);
        },
        get sueldo() {
          return new InputNodeField(schema.numeric, true);
        },
        get ur() {
          return new InputNodeField(schema.String, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        },
        get wicon() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "convocatoriagenero_set_input" }
    );
  },
  get convocatoriagenero_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriagenero_stddev_fields",
        extension: ((extensions as any) || {}).convocatoriagenero_stddev_fields
      }
    );
  },
  get convocatoriagenero_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriagenero_stddev_order_by" }
    );
  },
  get convocatoriagenero_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriagenero_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .convocatoriagenero_stddev_pop_fields
      }
    );
  },
  get convocatoriagenero_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriagenero_stddev_pop_order_by" }
    );
  },
  get convocatoriagenero_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriagenero_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .convocatoriagenero_stddev_samp_fields
      }
    );
  },
  get convocatoriagenero_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriagenero_stddev_samp_order_by" }
    );
  },
  get convocatoriagenero_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.numeric, undefined, true);
        }
      },
      {
        name: "convocatoriagenero_sum_fields",
        extension: ((extensions as any) || {}).convocatoriagenero_sum_fields
      }
    );
  },
  get convocatoriagenero_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriagenero_sum_order_by" }
    );
  },
  get convocatoriagenero_update_column() {
    return new EnumNode({ name: "convocatoriagenero_update_column" });
  },
  get convocatoriagenero_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriagenero_var_pop_fields",
        extension: ((extensions as any) || {}).convocatoriagenero_var_pop_fields
      }
    );
  },
  get convocatoriagenero_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriagenero_var_pop_order_by" }
    );
  },
  get convocatoriagenero_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriagenero_var_samp_fields",
        extension: ((extensions as any) || {})
          .convocatoriagenero_var_samp_fields
      }
    );
  },
  get convocatoriagenero_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriagenero_var_samp_order_by" }
    );
  },
  get convocatoriagenero_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriagenero_variance_fields",
        extension: ((extensions as any) || {})
          .convocatoriagenero_variance_fields
      }
    );
  },
  get convocatoriagenero_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriagenero_variance_order_by" }
    );
  },
  get convocatoriageneronospc() {
    return new ObjectNode(
      {
        get areaGeneralEstudio() {
          return new FieldNode(schema.areaGeneralEstudios, undefined, false);
        },
        get areaGeneralExperiencium() {
          return new FieldNode(schema.areaGeneralExperiencia, undefined, true);
        },
        get carreraGenerica() {
          return new FieldNode(schema.carreraGenerica, undefined, true);
        },
        get codigopostal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get codigopuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get colonia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get dependencium() {
          return new FieldNode(schema.dependencia, undefined, false);
        },
        get direccion1() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion2() {
          return new FieldNode(schema.String, undefined, true);
        },
        get entidadFederativa() {
          return new FieldNode(schema.entidadFederativa, undefined, true);
        },
        get fechafinconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechafinpublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainicioconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainiciopublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fin() {
          return new FieldNode(schema.date, undefined, true);
        },
        get genero() {
          return new FieldNode(schema.String, undefined, true);
        },
        get grupoExperiencium() {
          return new FieldNode(schema.grupoExperiencia, undefined, false);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get idareageneralestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idareageneralexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idcarreragenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get iddependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get identidadfederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idgrupoexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelsalarial() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idpais() {
          return new FieldNode(schema.String, undefined, true);
        },
        get iduapadre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inicio() {
          return new FieldNode(schema.date, undefined, true);
        },
        get moneda() {
          return new FieldNode(schema.String, undefined, true);
        },
        get municipio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelEscolaridad() {
          return new FieldNode(schema.nivelEscolaridad, undefined, false);
        },
        get nivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreconvocatoria() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombrepuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreunidadadministrativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get pai() {
          return new FieldNode(schema.pais, undefined, false);
        },
        get sueldo() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get wicon() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "convocatoriageneronospc",
        extension: ((extensions as any) || {}).convocatoriageneronospc
      }
    );
  },
  get convocatoriageneronospc_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.convocatoriageneronospc_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriageneronospc, false),
            undefined,
            false
          );
        }
      },
      {
        name: "convocatoriageneronospc_aggregate",
        extension: ((extensions as any) || {}).convocatoriageneronospc_aggregate
      }
    );
  },
  get convocatoriageneronospc_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.convocatoriageneronospc_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.convocatoriageneronospc_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.convocatoriageneronospc_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.convocatoriageneronospc_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.convocatoriageneronospc_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.convocatoriageneronospc_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.convocatoriageneronospc_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.convocatoriageneronospc_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.convocatoriageneronospc_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.convocatoriageneronospc_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "convocatoriageneronospc_aggregate_fields",
        extension: ((extensions as any) || {})
          .convocatoriageneronospc_aggregate_fields
      }
    );
  },
  get convocatoriageneronospc_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.convocatoriageneronospc_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.convocatoriageneronospc_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.convocatoriageneronospc_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.convocatoriageneronospc_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.convocatoriageneronospc_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.convocatoriageneronospc_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.convocatoriageneronospc_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.convocatoriageneronospc_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.convocatoriageneronospc_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.convocatoriageneronospc_variance_order_by,
            true
          );
        }
      },
      { name: "convocatoriageneronospc_aggregate_order_by" }
    );
  },
  get convocatoriageneronospc_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.convocatoriageneronospc_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.convocatoriageneronospc_on_conflict,
            true
          );
        }
      },
      { name: "convocatoriageneronospc_arr_rel_insert_input" }
    );
  },
  get convocatoriageneronospc_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriageneronospc_avg_fields",
        extension: ((extensions as any) || {})
          .convocatoriageneronospc_avg_fields
      }
    );
  },
  get convocatoriageneronospc_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriageneronospc_avg_order_by" }
    );
  },
  get convocatoriageneronospc_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.convocatoriageneronospc_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.convocatoriageneronospc_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.convocatoriageneronospc_bool_exp, true),
            true
          );
        },
        get areaGeneralEstudio() {
          return new InputNodeField(schema.areaGeneralEstudios_bool_exp, true);
        },
        get areaGeneralExperiencium() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_bool_exp,
            true
          );
        },
        get carreraGenerica() {
          return new InputNodeField(schema.carreraGenerica_bool_exp, true);
        },
        get codigopostal() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get colonia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get dependencium() {
          return new InputNodeField(schema.dependencia_bool_exp, true);
        },
        get direccion1() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get direccion2() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get entidadFederativa() {
          return new InputNodeField(schema.entidadFederativa_bool_exp, true);
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get fin() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get genero() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get grupoExperiencium() {
          return new InputNodeField(schema.grupoExperiencia_bool_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idpais() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get inicio() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get moneda() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get municipio() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nivelEscolaridad() {
          return new InputNodeField(schema.nivelEscolaridad_bool_exp, true);
        },
        get nivelpuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get pai() {
          return new InputNodeField(schema.pais_bool_exp, true);
        },
        get sueldo() {
          return new InputNodeField(schema.numeric_comparison_exp, true);
        },
        get ur() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get wicon() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "convocatoriageneronospc_bool_exp" }
    );
  },
  get convocatoriageneronospc_constraint() {
    return new EnumNode({ name: "convocatoriageneronospc_constraint" });
  },
  get convocatoriageneronospc_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.Int, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.Int, true);
        },
        get sueldo() {
          return new InputNodeField(schema.numeric, true);
        }
      },
      { name: "convocatoriageneronospc_inc_input" }
    );
  },
  get convocatoriageneronospc_insert_input() {
    return new InputNode(
      {
        get areaGeneralEstudio() {
          return new InputNodeField(
            schema.areaGeneralEstudios_obj_rel_insert_input,
            true
          );
        },
        get areaGeneralExperiencium() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_obj_rel_insert_input,
            true
          );
        },
        get carreraGenerica() {
          return new InputNodeField(
            schema.carreraGenerica_obj_rel_insert_input,
            true
          );
        },
        get codigopostal() {
          return new InputNodeField(schema.String, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.String, true);
        },
        get colonia() {
          return new InputNodeField(schema.String, true);
        },
        get dependencium() {
          return new InputNodeField(
            schema.dependencia_obj_rel_insert_input,
            true
          );
        },
        get direccion1() {
          return new InputNodeField(schema.String, true);
        },
        get direccion2() {
          return new InputNodeField(schema.String, true);
        },
        get entidadFederativa() {
          return new InputNodeField(
            schema.entidadFederativa_obj_rel_insert_input,
            true
          );
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.date, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.date, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.date, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.date, true);
        },
        get fin() {
          return new InputNodeField(schema.date, true);
        },
        get genero() {
          return new InputNodeField(schema.String, true);
        },
        get grupoExperiencium() {
          return new InputNodeField(
            schema.grupoExperiencia_obj_rel_insert_input,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.String, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.String, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.Int, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.String, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.String, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.String, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.String, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.String, true);
        },
        get idpais() {
          return new InputNodeField(schema.String, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.String, true);
        },
        get inicio() {
          return new InputNodeField(schema.date, true);
        },
        get moneda() {
          return new InputNodeField(schema.String, true);
        },
        get municipio() {
          return new InputNodeField(schema.String, true);
        },
        get nivelEscolaridad() {
          return new InputNodeField(
            schema.nivelEscolaridad_obj_rel_insert_input,
            true
          );
        },
        get nivelpuesto() {
          return new InputNodeField(schema.String, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.String, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.String, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.String, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.Int, true);
        },
        get pai() {
          return new InputNodeField(schema.pais_obj_rel_insert_input, true);
        },
        get sueldo() {
          return new InputNodeField(schema.numeric, true);
        },
        get ur() {
          return new InputNodeField(schema.String, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        },
        get wicon() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "convocatoriageneronospc_insert_input" }
    );
  },
  get convocatoriageneronospc_max_fields() {
    return new ObjectNode(
      {
        get codigopostal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get codigopuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get colonia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion1() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion2() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fechafinconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechafinpublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainicioconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainiciopublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fin() {
          return new FieldNode(schema.date, undefined, true);
        },
        get genero() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idareageneralestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idareageneralexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idcarreragenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get iddependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get identidadfederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idgrupoexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelsalarial() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idpais() {
          return new FieldNode(schema.String, undefined, true);
        },
        get iduapadre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inicio() {
          return new FieldNode(schema.date, undefined, true);
        },
        get moneda() {
          return new FieldNode(schema.String, undefined, true);
        },
        get municipio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreconvocatoria() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombrepuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreunidadadministrativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get wicon() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "convocatoriageneronospc_max_fields",
        extension: ((extensions as any) || {})
          .convocatoriageneronospc_max_fields
      }
    );
  },
  get convocatoriageneronospc_max_order_by() {
    return new InputNode(
      {
        get codigopostal() {
          return new InputNodeField(schema.order_by, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get colonia() {
          return new InputNodeField(schema.order_by, true);
        },
        get direccion1() {
          return new InputNodeField(schema.order_by, true);
        },
        get direccion2() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fin() {
          return new InputNodeField(schema.order_by, true);
        },
        get genero() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.order_by, true);
        },
        get idpais() {
          return new InputNodeField(schema.order_by, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.order_by, true);
        },
        get inicio() {
          return new InputNodeField(schema.order_by, true);
        },
        get moneda() {
          return new InputNodeField(schema.order_by, true);
        },
        get municipio() {
          return new InputNodeField(schema.order_by, true);
        },
        get nivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        },
        get ur() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get wicon() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriageneronospc_max_order_by" }
    );
  },
  get convocatoriageneronospc_min_fields() {
    return new ObjectNode(
      {
        get codigopostal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get codigopuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get colonia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion1() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion2() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fechafinconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechafinpublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainicioconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainiciopublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fin() {
          return new FieldNode(schema.date, undefined, true);
        },
        get genero() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idareageneralestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idareageneralexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idcarreragenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get iddependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get identidadfederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idgrupoexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelsalarial() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idpais() {
          return new FieldNode(schema.String, undefined, true);
        },
        get iduapadre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inicio() {
          return new FieldNode(schema.date, undefined, true);
        },
        get moneda() {
          return new FieldNode(schema.String, undefined, true);
        },
        get municipio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreconvocatoria() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombrepuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreunidadadministrativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get wicon() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "convocatoriageneronospc_min_fields",
        extension: ((extensions as any) || {})
          .convocatoriageneronospc_min_fields
      }
    );
  },
  get convocatoriageneronospc_min_order_by() {
    return new InputNode(
      {
        get codigopostal() {
          return new InputNodeField(schema.order_by, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get colonia() {
          return new InputNodeField(schema.order_by, true);
        },
        get direccion1() {
          return new InputNodeField(schema.order_by, true);
        },
        get direccion2() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fin() {
          return new InputNodeField(schema.order_by, true);
        },
        get genero() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.order_by, true);
        },
        get idpais() {
          return new InputNodeField(schema.order_by, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.order_by, true);
        },
        get inicio() {
          return new InputNodeField(schema.order_by, true);
        },
        get moneda() {
          return new InputNodeField(schema.order_by, true);
        },
        get municipio() {
          return new InputNodeField(schema.order_by, true);
        },
        get nivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        },
        get ur() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get wicon() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriageneronospc_min_order_by" }
    );
  },
  get convocatoriageneronospc_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriageneronospc, false),
            undefined,
            false
          );
        }
      },
      {
        name: "convocatoriageneronospc_mutation_response",
        extension: ((extensions as any) || {})
          .convocatoriageneronospc_mutation_response
      }
    );
  },
  get convocatoriageneronospc_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.convocatoriageneronospc_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.convocatoriageneronospc_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.convocatoriageneronospc_bool_exp,
            true
          );
        }
      },
      { name: "convocatoriageneronospc_on_conflict" }
    );
  },
  get convocatoriageneronospc_order_by() {
    return new InputNode(
      {
        get areaGeneralEstudio() {
          return new InputNodeField(schema.areaGeneralEstudios_order_by, true);
        },
        get areaGeneralExperiencium() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_order_by,
            true
          );
        },
        get carreraGenerica() {
          return new InputNodeField(schema.carreraGenerica_order_by, true);
        },
        get codigopostal() {
          return new InputNodeField(schema.order_by, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get colonia() {
          return new InputNodeField(schema.order_by, true);
        },
        get dependencium() {
          return new InputNodeField(schema.dependencia_order_by, true);
        },
        get direccion1() {
          return new InputNodeField(schema.order_by, true);
        },
        get direccion2() {
          return new InputNodeField(schema.order_by, true);
        },
        get entidadFederativa() {
          return new InputNodeField(schema.entidadFederativa_order_by, true);
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fin() {
          return new InputNodeField(schema.order_by, true);
        },
        get genero() {
          return new InputNodeField(schema.order_by, true);
        },
        get grupoExperiencium() {
          return new InputNodeField(schema.grupoExperiencia_order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.order_by, true);
        },
        get idpais() {
          return new InputNodeField(schema.order_by, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.order_by, true);
        },
        get inicio() {
          return new InputNodeField(schema.order_by, true);
        },
        get moneda() {
          return new InputNodeField(schema.order_by, true);
        },
        get municipio() {
          return new InputNodeField(schema.order_by, true);
        },
        get nivelEscolaridad() {
          return new InputNodeField(schema.nivelEscolaridad_order_by, true);
        },
        get nivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get pai() {
          return new InputNodeField(schema.pais_order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        },
        get ur() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get wicon() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriageneronospc_order_by" }
    );
  },
  get convocatoriageneronospc_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "convocatoriageneronospc_pk_columns_input" }
    );
  },
  get convocatoriageneronospc_select_column() {
    return new EnumNode({ name: "convocatoriageneronospc_select_column" });
  },
  get convocatoriageneronospc_set_input() {
    return new InputNode(
      {
        get codigopostal() {
          return new InputNodeField(schema.String, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.String, true);
        },
        get colonia() {
          return new InputNodeField(schema.String, true);
        },
        get direccion1() {
          return new InputNodeField(schema.String, true);
        },
        get direccion2() {
          return new InputNodeField(schema.String, true);
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.date, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.date, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.date, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.date, true);
        },
        get fin() {
          return new InputNodeField(schema.date, true);
        },
        get genero() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.String, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.String, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.Int, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.String, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.String, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.String, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.String, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.String, true);
        },
        get idpais() {
          return new InputNodeField(schema.String, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.String, true);
        },
        get inicio() {
          return new InputNodeField(schema.date, true);
        },
        get moneda() {
          return new InputNodeField(schema.String, true);
        },
        get municipio() {
          return new InputNodeField(schema.String, true);
        },
        get nivelpuesto() {
          return new InputNodeField(schema.String, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.String, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.String, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.String, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.Int, true);
        },
        get sueldo() {
          return new InputNodeField(schema.numeric, true);
        },
        get ur() {
          return new InputNodeField(schema.String, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        },
        get wicon() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "convocatoriageneronospc_set_input" }
    );
  },
  get convocatoriageneronospc_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriageneronospc_stddev_fields",
        extension: ((extensions as any) || {})
          .convocatoriageneronospc_stddev_fields
      }
    );
  },
  get convocatoriageneronospc_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriageneronospc_stddev_order_by" }
    );
  },
  get convocatoriageneronospc_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriageneronospc_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .convocatoriageneronospc_stddev_pop_fields
      }
    );
  },
  get convocatoriageneronospc_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriageneronospc_stddev_pop_order_by" }
    );
  },
  get convocatoriageneronospc_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriageneronospc_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .convocatoriageneronospc_stddev_samp_fields
      }
    );
  },
  get convocatoriageneronospc_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriageneronospc_stddev_samp_order_by" }
    );
  },
  get convocatoriageneronospc_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.numeric, undefined, true);
        }
      },
      {
        name: "convocatoriageneronospc_sum_fields",
        extension: ((extensions as any) || {})
          .convocatoriageneronospc_sum_fields
      }
    );
  },
  get convocatoriageneronospc_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriageneronospc_sum_order_by" }
    );
  },
  get convocatoriageneronospc_update_column() {
    return new EnumNode({ name: "convocatoriageneronospc_update_column" });
  },
  get convocatoriageneronospc_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriageneronospc_var_pop_fields",
        extension: ((extensions as any) || {})
          .convocatoriageneronospc_var_pop_fields
      }
    );
  },
  get convocatoriageneronospc_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriageneronospc_var_pop_order_by" }
    );
  },
  get convocatoriageneronospc_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriageneronospc_var_samp_fields",
        extension: ((extensions as any) || {})
          .convocatoriageneronospc_var_samp_fields
      }
    );
  },
  get convocatoriageneronospc_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriageneronospc_var_samp_order_by" }
    );
  },
  get convocatoriageneronospc_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "convocatoriageneronospc_variance_fields",
        extension: ((extensions as any) || {})
          .convocatoriageneronospc_variance_fields
      }
    );
  },
  get convocatoriageneronospc_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "convocatoriageneronospc_variance_order_by" }
    );
  },
  get core_store() {
    return new ObjectNode(
      {
        get environment() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get key() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tag() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get value() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      { name: "core_store", extension: ((extensions as any) || {}).core_store }
    );
  },
  get core_store_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.core_store_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.core_store, false),
            undefined,
            false
          );
        }
      },
      {
        name: "core_store_aggregate",
        extension: ((extensions as any) || {}).core_store_aggregate
      }
    );
  },
  get core_store_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.core_store_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.core_store_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.core_store_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.core_store_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.core_store_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.core_store_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.core_store_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.core_store_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.core_store_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.core_store_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.core_store_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "core_store_aggregate_fields",
        extension: ((extensions as any) || {}).core_store_aggregate_fields
      }
    );
  },
  get core_store_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "core_store_avg_fields",
        extension: ((extensions as any) || {}).core_store_avg_fields
      }
    );
  },
  get core_store_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.core_store_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.core_store_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.core_store_bool_exp, true),
            true
          );
        },
        get environment() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get key() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get tag() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get value() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "core_store_bool_exp" }
    );
  },
  get core_store_constraint() {
    return new EnumNode({ name: "core_store_constraint" });
  },
  get core_store_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "core_store_inc_input" }
    );
  },
  get core_store_insert_input() {
    return new InputNode(
      {
        get environment() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get key() {
          return new InputNodeField(schema.String, true);
        },
        get tag() {
          return new InputNodeField(schema.String, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get value() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "core_store_insert_input" }
    );
  },
  get core_store_max_fields() {
    return new ObjectNode(
      {
        get environment() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get key() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tag() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get value() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "core_store_max_fields",
        extension: ((extensions as any) || {}).core_store_max_fields
      }
    );
  },
  get core_store_min_fields() {
    return new ObjectNode(
      {
        get environment() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get key() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tag() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get value() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "core_store_min_fields",
        extension: ((extensions as any) || {}).core_store_min_fields
      }
    );
  },
  get core_store_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.core_store, false),
            undefined,
            false
          );
        }
      },
      {
        name: "core_store_mutation_response",
        extension: ((extensions as any) || {}).core_store_mutation_response
      }
    );
  },
  get core_store_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.core_store_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.core_store_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.core_store_bool_exp, true);
        }
      },
      { name: "core_store_on_conflict" }
    );
  },
  get core_store_order_by() {
    return new InputNode(
      {
        get environment() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get key() {
          return new InputNodeField(schema.order_by, true);
        },
        get tag() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get value() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "core_store_order_by" }
    );
  },
  get core_store_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "core_store_pk_columns_input" }
    );
  },
  get core_store_select_column() {
    return new EnumNode({ name: "core_store_select_column" });
  },
  get core_store_set_input() {
    return new InputNode(
      {
        get environment() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get key() {
          return new InputNodeField(schema.String, true);
        },
        get tag() {
          return new InputNodeField(schema.String, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get value() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "core_store_set_input" }
    );
  },
  get core_store_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "core_store_stddev_fields",
        extension: ((extensions as any) || {}).core_store_stddev_fields
      }
    );
  },
  get core_store_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "core_store_stddev_pop_fields",
        extension: ((extensions as any) || {}).core_store_stddev_pop_fields
      }
    );
  },
  get core_store_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "core_store_stddev_samp_fields",
        extension: ((extensions as any) || {}).core_store_stddev_samp_fields
      }
    );
  },
  get core_store_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "core_store_sum_fields",
        extension: ((extensions as any) || {}).core_store_sum_fields
      }
    );
  },
  get core_store_update_column() {
    return new EnumNode({ name: "core_store_update_column" });
  },
  get core_store_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "core_store_var_pop_fields",
        extension: ((extensions as any) || {}).core_store_var_pop_fields
      }
    );
  },
  get core_store_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "core_store_var_samp_fields",
        extension: ((extensions as any) || {}).core_store_var_samp_fields
      }
    );
  },
  get core_store_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "core_store_variance_fields",
        extension: ((extensions as any) || {}).core_store_variance_fields
      }
    );
  },
  get curriculum() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get link() {
          return new FieldNode(schema.String, undefined, false);
        },
        get perfil() {
          return new FieldNode(schema.perfil, undefined, false);
        },
        get perfilid() {
          return new FieldNode(schema.Int, undefined, false);
        }
      },
      { name: "curriculum", extension: ((extensions as any) || {}).curriculum }
    );
  },
  get curriculum_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.curriculum_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.curriculum, false),
            undefined,
            false
          );
        }
      },
      {
        name: "curriculum_aggregate",
        extension: ((extensions as any) || {}).curriculum_aggregate
      }
    );
  },
  get curriculum_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.curriculum_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.curriculum_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.curriculum_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.curriculum_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.curriculum_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.curriculum_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.curriculum_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.curriculum_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.curriculum_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.curriculum_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "curriculum_aggregate_fields",
        extension: ((extensions as any) || {}).curriculum_aggregate_fields
      }
    );
  },
  get curriculum_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.curriculum_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.curriculum_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.curriculum_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.curriculum_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.curriculum_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.curriculum_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.curriculum_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.curriculum_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.curriculum_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.curriculum_variance_order_by, true);
        }
      },
      { name: "curriculum_aggregate_order_by" }
    );
  },
  get curriculum_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.curriculum_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.curriculum_on_conflict, true);
        }
      },
      { name: "curriculum_arr_rel_insert_input" }
    );
  },
  get curriculum_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get perfilid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curriculum_avg_fields",
        extension: ((extensions as any) || {}).curriculum_avg_fields
      }
    );
  },
  get curriculum_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get perfilid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "curriculum_avg_order_by" }
    );
  },
  get curriculum_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.curriculum_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.curriculum_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.curriculum_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get link() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get perfil() {
          return new InputNodeField(schema.perfil_bool_exp, true);
        },
        get perfilid() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        }
      },
      { name: "curriculum_bool_exp" }
    );
  },
  get curriculum_constraint() {
    return new EnumNode({ name: "curriculum_constraint" });
  },
  get curriculum_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get perfilid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "curriculum_inc_input" }
    );
  },
  get curriculum_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get link() {
          return new InputNodeField(schema.String, true);
        },
        get perfil() {
          return new InputNodeField(schema.perfil_obj_rel_insert_input, true);
        },
        get perfilid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "curriculum_insert_input" }
    );
  },
  get curriculum_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get link() {
          return new FieldNode(schema.String, undefined, true);
        },
        get perfilid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "curriculum_max_fields",
        extension: ((extensions as any) || {}).curriculum_max_fields
      }
    );
  },
  get curriculum_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get link() {
          return new InputNodeField(schema.order_by, true);
        },
        get perfilid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "curriculum_max_order_by" }
    );
  },
  get curriculum_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get link() {
          return new FieldNode(schema.String, undefined, true);
        },
        get perfilid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "curriculum_min_fields",
        extension: ((extensions as any) || {}).curriculum_min_fields
      }
    );
  },
  get curriculum_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get link() {
          return new InputNodeField(schema.order_by, true);
        },
        get perfilid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "curriculum_min_order_by" }
    );
  },
  get curriculum_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.curriculum, false),
            undefined,
            false
          );
        }
      },
      {
        name: "curriculum_mutation_response",
        extension: ((extensions as any) || {}).curriculum_mutation_response
      }
    );
  },
  get curriculum_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.curriculum_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.curriculum_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.curriculum_bool_exp, true);
        }
      },
      { name: "curriculum_on_conflict" }
    );
  },
  get curriculum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get link() {
          return new InputNodeField(schema.order_by, true);
        },
        get perfil() {
          return new InputNodeField(schema.perfil_order_by, true);
        },
        get perfilid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "curriculum_order_by" }
    );
  },
  get curriculum_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "curriculum_pk_columns_input" }
    );
  },
  get curriculum_select_column() {
    return new EnumNode({ name: "curriculum_select_column" });
  },
  get curriculum_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get link() {
          return new InputNodeField(schema.String, true);
        },
        get perfilid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "curriculum_set_input" }
    );
  },
  get curriculum_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get perfilid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curriculum_stddev_fields",
        extension: ((extensions as any) || {}).curriculum_stddev_fields
      }
    );
  },
  get curriculum_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get perfilid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "curriculum_stddev_order_by" }
    );
  },
  get curriculum_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get perfilid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curriculum_stddev_pop_fields",
        extension: ((extensions as any) || {}).curriculum_stddev_pop_fields
      }
    );
  },
  get curriculum_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get perfilid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "curriculum_stddev_pop_order_by" }
    );
  },
  get curriculum_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get perfilid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curriculum_stddev_samp_fields",
        extension: ((extensions as any) || {}).curriculum_stddev_samp_fields
      }
    );
  },
  get curriculum_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get perfilid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "curriculum_stddev_samp_order_by" }
    );
  },
  get curriculum_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get perfilid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "curriculum_sum_fields",
        extension: ((extensions as any) || {}).curriculum_sum_fields
      }
    );
  },
  get curriculum_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get perfilid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "curriculum_sum_order_by" }
    );
  },
  get curriculum_update_column() {
    return new EnumNode({ name: "curriculum_update_column" });
  },
  get curriculum_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get perfilid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curriculum_var_pop_fields",
        extension: ((extensions as any) || {}).curriculum_var_pop_fields
      }
    );
  },
  get curriculum_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get perfilid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "curriculum_var_pop_order_by" }
    );
  },
  get curriculum_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get perfilid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curriculum_var_samp_fields",
        extension: ((extensions as any) || {}).curriculum_var_samp_fields
      }
    );
  },
  get curriculum_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get perfilid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "curriculum_var_samp_order_by" }
    );
  },
  get curriculum_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get perfilid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curriculum_variance_fields",
        extension: ((extensions as any) || {}).curriculum_variance_fields
      }
    );
  },
  get curriculum_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get perfilid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "curriculum_variance_order_by" }
    );
  },
  get curso() {
    return new ObjectNode(
      {
        get descripcion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_curso() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get liga() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Int, undefined, false);
        }
      },
      { name: "curso", extension: ((extensions as any) || {}).curso }
    );
  },
  get curso_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(schema.curso_aggregate_fields, undefined, true);
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.curso, false),
            undefined,
            false
          );
        }
      },
      {
        name: "curso_aggregate",
        extension: ((extensions as any) || {}).curso_aggregate
      }
    );
  },
  get curso_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.curso_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.curso_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.curso_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.curso_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.curso_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(schema.curso_stddev_pop_fields, undefined, true);
        },
        get stddev_samp() {
          return new FieldNode(
            schema.curso_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.curso_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.curso_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.curso_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.curso_variance_fields, undefined, true);
        }
      },
      {
        name: "curso_aggregate_fields",
        extension: ((extensions as any) || {}).curso_aggregate_fields
      }
    );
  },
  get curso_avg_fields() {
    return new ObjectNode(
      {
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curso_avg_fields",
        extension: ((extensions as any) || {}).curso_avg_fields
      }
    );
  },
  get curso_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.curso_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.curso_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.curso_bool_exp, true),
            true
          );
        },
        get descripcion() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id_curso() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get liga() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get uid() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        }
      },
      { name: "curso_bool_exp" }
    );
  },
  get curso_constraint() {
    return new EnumNode({ name: "curso_constraint" });
  },
  get curso_inc_input() {
    return new InputNode(
      {
        get id_curso() {
          return new InputNodeField(schema.Int, true);
        },
        get uid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "curso_inc_input" }
    );
  },
  get curso_insert_input() {
    return new InputNode(
      {
        get descripcion() {
          return new InputNodeField(schema.String, true);
        },
        get id_curso() {
          return new InputNodeField(schema.Int, true);
        },
        get liga() {
          return new InputNodeField(schema.String, true);
        },
        get uid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "curso_insert_input" }
    );
  },
  get curso_max_fields() {
    return new ObjectNode(
      {
        get descripcion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_curso() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get liga() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "curso_max_fields",
        extension: ((extensions as any) || {}).curso_max_fields
      }
    );
  },
  get curso_min_fields() {
    return new ObjectNode(
      {
        get descripcion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_curso() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get liga() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "curso_min_fields",
        extension: ((extensions as any) || {}).curso_min_fields
      }
    );
  },
  get curso_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.curso, false),
            undefined,
            false
          );
        }
      },
      {
        name: "curso_mutation_response",
        extension: ((extensions as any) || {}).curso_mutation_response
      }
    );
  },
  get curso_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.curso_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.curso_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.curso_bool_exp, true);
        }
      },
      { name: "curso_on_conflict" }
    );
  },
  get curso_order_by() {
    return new InputNode(
      {
        get descripcion() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_curso() {
          return new InputNodeField(schema.order_by, true);
        },
        get liga() {
          return new InputNodeField(schema.order_by, true);
        },
        get uid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "curso_order_by" }
    );
  },
  get curso_pk_columns_input() {
    return new InputNode(
      {
        get uid() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "curso_pk_columns_input" }
    );
  },
  get curso_select_column() {
    return new EnumNode({ name: "curso_select_column" });
  },
  get curso_set_input() {
    return new InputNode(
      {
        get descripcion() {
          return new InputNodeField(schema.String, true);
        },
        get id_curso() {
          return new InputNodeField(schema.Int, true);
        },
        get liga() {
          return new InputNodeField(schema.String, true);
        },
        get uid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "curso_set_input" }
    );
  },
  get curso_stddev_fields() {
    return new ObjectNode(
      {
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curso_stddev_fields",
        extension: ((extensions as any) || {}).curso_stddev_fields
      }
    );
  },
  get curso_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curso_stddev_pop_fields",
        extension: ((extensions as any) || {}).curso_stddev_pop_fields
      }
    );
  },
  get curso_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curso_stddev_samp_fields",
        extension: ((extensions as any) || {}).curso_stddev_samp_fields
      }
    );
  },
  get curso_sum_fields() {
    return new ObjectNode(
      {
        get id_curso() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "curso_sum_fields",
        extension: ((extensions as any) || {}).curso_sum_fields
      }
    );
  },
  get curso_update_column() {
    return new EnumNode({ name: "curso_update_column" });
  },
  get curso_var_pop_fields() {
    return new ObjectNode(
      {
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curso_var_pop_fields",
        extension: ((extensions as any) || {}).curso_var_pop_fields
      }
    );
  },
  get curso_var_samp_fields() {
    return new ObjectNode(
      {
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curso_var_samp_fields",
        extension: ((extensions as any) || {}).curso_var_samp_fields
      }
    );
  },
  get curso_variance_fields() {
    return new ObjectNode(
      {
        get id_curso() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get uid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "curso_variance_fields",
        extension: ((extensions as any) || {}).curso_variance_fields
      }
    );
  },
  get date() {
    return new ScalarNode({
      name: "date",
      extension: ((extensions as any) || {}).date
    });
  },
  get date_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.date, true);
        },
        get _gt() {
          return new InputNodeField(schema.date, true);
        },
        get _gte() {
          return new InputNodeField(schema.date, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.date, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.date, true);
        },
        get _lte() {
          return new InputNodeField(schema.date, true);
        },
        get _neq() {
          return new InputNodeField(schema.date, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.date, true), true);
        }
      },
      { name: "date_comparison_exp" }
    );
  },
  get dependencia() {
    return new ObjectNode(
      {
        get convocatoriageneronospcs() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriageneronospc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospcs_aggregate() {
          return new FieldNode(
            schema.convocatoriageneronospc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriagenero, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros_aggregate() {
          return new FieldNode(
            schema.convocatoriagenero_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get dependencia() {
          return new FieldNode(schema.String, undefined, false);
        },
        get idDependencia() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "dependencia",
        extension: ((extensions as any) || {}).dependencia
      }
    );
  },
  get dependencia_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.dependencia_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.dependencia, false),
            undefined,
            false
          );
        }
      },
      {
        name: "dependencia_aggregate",
        extension: ((extensions as any) || {}).dependencia_aggregate
      }
    );
  },
  get dependencia_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencia_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.dependencia_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.dependencia_min_fields, undefined, true);
        }
      },
      {
        name: "dependencia_aggregate_fields",
        extension: ((extensions as any) || {}).dependencia_aggregate_fields
      }
    );
  },
  get dependencia_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.dependencia_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.dependencia_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.dependencia_bool_exp, true),
            true
          );
        },
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_bool_exp,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(schema.convocatoriagenero_bool_exp, true);
        },
        get dependencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idDependencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "dependencia_bool_exp" }
    );
  },
  get dependencia_constraint() {
    return new EnumNode({ name: "dependencia_constraint" });
  },
  get dependencia_insert_input() {
    return new InputNode(
      {
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_arr_rel_insert_input,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(
            schema.convocatoriagenero_arr_rel_insert_input,
            true
          );
        },
        get dependencia() {
          return new InputNodeField(schema.String, true);
        },
        get idDependencia() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "dependencia_insert_input" }
    );
  },
  get dependencia_max_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idDependencia() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "dependencia_max_fields",
        extension: ((extensions as any) || {}).dependencia_max_fields
      }
    );
  },
  get dependencia_min_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idDependencia() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "dependencia_min_fields",
        extension: ((extensions as any) || {}).dependencia_min_fields
      }
    );
  },
  get dependencia_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.dependencia, false),
            undefined,
            false
          );
        }
      },
      {
        name: "dependencia_mutation_response",
        extension: ((extensions as any) || {}).dependencia_mutation_response
      }
    );
  },
  get dependencia_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.dependencia_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.dependencia_on_conflict, true);
        }
      },
      { name: "dependencia_obj_rel_insert_input" }
    );
  },
  get dependencia_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.dependencia_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.dependencia_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.dependencia_bool_exp, true);
        }
      },
      { name: "dependencia_on_conflict" }
    );
  },
  get dependencia_order_by() {
    return new InputNode(
      {
        get convocatoriageneronospcs_aggregate() {
          return new InputNodeField(
            schema.convocatoriageneronospc_aggregate_order_by,
            true
          );
        },
        get convocatoriageneros_aggregate() {
          return new InputNodeField(
            schema.convocatoriagenero_aggregate_order_by,
            true
          );
        },
        get dependencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idDependencia() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "dependencia_order_by" }
    );
  },
  get dependencia_pk_columns_input() {
    return new InputNode(
      {
        get idDependencia() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "dependencia_pk_columns_input" }
    );
  },
  get dependencia_select_column() {
    return new EnumNode({ name: "dependencia_select_column" });
  },
  get dependencia_set_input() {
    return new InputNode(
      {
        get dependencia() {
          return new InputNodeField(schema.String, true);
        },
        get idDependencia() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "dependencia_set_input" }
    );
  },
  get dependencia_update_column() {
    return new EnumNode({ name: "dependencia_update_column" });
  },
  get dependencias() {
    return new ObjectNode(
      {
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get idDependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        }
      },
      {
        name: "dependencias",
        extension: ((extensions as any) || {}).dependencias
      }
    );
  },
  get dependencias_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.dependencias_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.dependencias, false),
            undefined,
            false
          );
        }
      },
      {
        name: "dependencias_aggregate",
        extension: ((extensions as any) || {}).dependencias_aggregate
      }
    );
  },
  get dependencias_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.dependencias_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencias_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.dependencias_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.dependencias_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.dependencias_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.dependencias_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.dependencias_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.dependencias_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.dependencias_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.dependencias_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.dependencias_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "dependencias_aggregate_fields",
        extension: ((extensions as any) || {}).dependencias_aggregate_fields
      }
    );
  },
  get dependencias_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "dependencias_avg_fields",
        extension: ((extensions as any) || {}).dependencias_avg_fields
      }
    );
  },
  get dependencias_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.dependencias_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.dependencias_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.dependencias_bool_exp, true),
            true
          );
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get idDependencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nombre() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        }
      },
      { name: "dependencias_bool_exp" }
    );
  },
  get dependencias_constraint() {
    return new EnumNode({ name: "dependencias_constraint" });
  },
  get dependencias_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "dependencias_inc_input" }
    );
  },
  get dependencias_insert_input() {
    return new InputNode(
      {
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get idDependencia() {
          return new InputNodeField(schema.String, true);
        },
        get nombre() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz, true);
        }
      },
      { name: "dependencias_insert_input" }
    );
  },
  get dependencias_max_fields() {
    return new ObjectNode(
      {
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idDependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        }
      },
      {
        name: "dependencias_max_fields",
        extension: ((extensions as any) || {}).dependencias_max_fields
      }
    );
  },
  get dependencias_min_fields() {
    return new ObjectNode(
      {
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idDependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        }
      },
      {
        name: "dependencias_min_fields",
        extension: ((extensions as any) || {}).dependencias_min_fields
      }
    );
  },
  get dependencias_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.dependencias, false),
            undefined,
            false
          );
        }
      },
      {
        name: "dependencias_mutation_response",
        extension: ((extensions as any) || {}).dependencias_mutation_response
      }
    );
  },
  get dependencias_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.dependencias_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.dependencias_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.dependencias_bool_exp, true);
        }
      },
      { name: "dependencias_on_conflict" }
    );
  },
  get dependencias_order_by() {
    return new InputNode(
      {
        get created_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idDependencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombre() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "dependencias_order_by" }
    );
  },
  get dependencias_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "dependencias_pk_columns_input" }
    );
  },
  get dependencias_select_column() {
    return new EnumNode({ name: "dependencias_select_column" });
  },
  get dependencias_set_input() {
    return new InputNode(
      {
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get idDependencia() {
          return new InputNodeField(schema.String, true);
        },
        get nombre() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz, true);
        }
      },
      { name: "dependencias_set_input" }
    );
  },
  get dependencias_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "dependencias_stddev_fields",
        extension: ((extensions as any) || {}).dependencias_stddev_fields
      }
    );
  },
  get dependencias_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "dependencias_stddev_pop_fields",
        extension: ((extensions as any) || {}).dependencias_stddev_pop_fields
      }
    );
  },
  get dependencias_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "dependencias_stddev_samp_fields",
        extension: ((extensions as any) || {}).dependencias_stddev_samp_fields
      }
    );
  },
  get dependencias_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "dependencias_sum_fields",
        extension: ((extensions as any) || {}).dependencias_sum_fields
      }
    );
  },
  get dependencias_update_column() {
    return new EnumNode({ name: "dependencias_update_column" });
  },
  get dependencias_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "dependencias_var_pop_fields",
        extension: ((extensions as any) || {}).dependencias_var_pop_fields
      }
    );
  },
  get dependencias_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "dependencias_var_samp_fields",
        extension: ((extensions as any) || {}).dependencias_var_samp_fields
      }
    );
  },
  get dependencias_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "dependencias_variance_fields",
        extension: ((extensions as any) || {}).dependencias_variance_fields
      }
    );
  },
  get encuesta() {
    return new ObjectNode(
      {
        get cme_id_area() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get data() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              }
            }),
            true
          );
        },
        get fecha_registro() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get id_organization() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_work_unit() {
          return new FieldNode(schema.String, undefined, true);
        },
        get timestamp() {
          return new FieldNode(schema.timestamp, undefined, true);
        }
      },
      { name: "encuesta", extension: ((extensions as any) || {}).encuesta }
    );
  },
  get encuesta_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.encuesta_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.encuesta, false),
            undefined,
            false
          );
        }
      },
      {
        name: "encuesta_aggregate",
        extension: ((extensions as any) || {}).encuesta_aggregate
      }
    );
  },
  get encuesta_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.encuesta_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.encuesta_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.encuesta_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.encuesta_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.encuesta_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(
            schema.encuesta_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.encuesta_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.encuesta_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.encuesta_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(
            schema.encuesta_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.encuesta_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "encuesta_aggregate_fields",
        extension: ((extensions as any) || {}).encuesta_aggregate_fields
      }
    );
  },
  get encuesta_append_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.jsonb, true);
        }
      },
      { name: "encuesta_append_input" }
    );
  },
  get encuesta_avg_fields() {
    return new ObjectNode(
      {
        get cme_id_area() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "encuesta_avg_fields",
        extension: ((extensions as any) || {}).encuesta_avg_fields
      }
    );
  },
  get encuesta_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.encuesta_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.encuesta_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.encuesta_bool_exp, true),
            true
          );
        },
        get cme_id_area() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get data() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get fecha_registro() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id_organization() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_id_work_unit() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get timestamp() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        }
      },
      { name: "encuesta_bool_exp" }
    );
  },
  get encuesta_constraint() {
    return new EnumNode({ name: "encuesta_constraint" });
  },
  get encuesta_delete_at_path_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        }
      },
      { name: "encuesta_delete_at_path_input" }
    );
  },
  get encuesta_delete_elem_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "encuesta_delete_elem_input" }
    );
  },
  get encuesta_delete_key_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "encuesta_delete_key_input" }
    );
  },
  get encuesta_inc_input() {
    return new InputNode(
      {
        get cme_id_area() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "encuesta_inc_input" }
    );
  },
  get encuesta_insert_input() {
    return new InputNode(
      {
        get cme_id_area() {
          return new InputNodeField(schema.Int, true);
        },
        get data() {
          return new InputNodeField(schema.jsonb, true);
        },
        get fecha_registro() {
          return new InputNodeField(schema.date, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_organization() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_work_unit() {
          return new InputNodeField(schema.String, true);
        },
        get timestamp() {
          return new InputNodeField(schema.timestamp, true);
        }
      },
      { name: "encuesta_insert_input" }
    );
  },
  get encuesta_max_fields() {
    return new ObjectNode(
      {
        get cme_id_area() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fecha_registro() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_organization() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_work_unit() {
          return new FieldNode(schema.String, undefined, true);
        },
        get timestamp() {
          return new FieldNode(schema.timestamp, undefined, true);
        }
      },
      {
        name: "encuesta_max_fields",
        extension: ((extensions as any) || {}).encuesta_max_fields
      }
    );
  },
  get encuesta_min_fields() {
    return new ObjectNode(
      {
        get cme_id_area() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fecha_registro() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_organization() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_work_unit() {
          return new FieldNode(schema.String, undefined, true);
        },
        get timestamp() {
          return new FieldNode(schema.timestamp, undefined, true);
        }
      },
      {
        name: "encuesta_min_fields",
        extension: ((extensions as any) || {}).encuesta_min_fields
      }
    );
  },
  get encuesta_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.encuesta, false),
            undefined,
            false
          );
        }
      },
      {
        name: "encuesta_mutation_response",
        extension: ((extensions as any) || {}).encuesta_mutation_response
      }
    );
  },
  get encuesta_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.encuesta_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.encuesta_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.encuesta_bool_exp, true);
        }
      },
      { name: "encuesta_on_conflict" }
    );
  },
  get encuesta_order_by() {
    return new InputNode(
      {
        get cme_id_area() {
          return new InputNodeField(schema.order_by, true);
        },
        get data() {
          return new InputNodeField(schema.order_by, true);
        },
        get fecha_registro() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_organization() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_work_unit() {
          return new InputNodeField(schema.order_by, true);
        },
        get timestamp() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "encuesta_order_by" }
    );
  },
  get encuesta_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "encuesta_pk_columns_input" }
    );
  },
  get encuesta_prepend_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.jsonb, true);
        }
      },
      { name: "encuesta_prepend_input" }
    );
  },
  get encuesta_select_column() {
    return new EnumNode({ name: "encuesta_select_column" });
  },
  get encuesta_set_input() {
    return new InputNode(
      {
        get cme_id_area() {
          return new InputNodeField(schema.Int, true);
        },
        get data() {
          return new InputNodeField(schema.jsonb, true);
        },
        get fecha_registro() {
          return new InputNodeField(schema.date, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_organization() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_work_unit() {
          return new InputNodeField(schema.String, true);
        },
        get timestamp() {
          return new InputNodeField(schema.timestamp, true);
        }
      },
      { name: "encuesta_set_input" }
    );
  },
  get encuesta_stddev_fields() {
    return new ObjectNode(
      {
        get cme_id_area() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "encuesta_stddev_fields",
        extension: ((extensions as any) || {}).encuesta_stddev_fields
      }
    );
  },
  get encuesta_stddev_pop_fields() {
    return new ObjectNode(
      {
        get cme_id_area() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "encuesta_stddev_pop_fields",
        extension: ((extensions as any) || {}).encuesta_stddev_pop_fields
      }
    );
  },
  get encuesta_stddev_samp_fields() {
    return new ObjectNode(
      {
        get cme_id_area() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "encuesta_stddev_samp_fields",
        extension: ((extensions as any) || {}).encuesta_stddev_samp_fields
      }
    );
  },
  get encuesta_sum_fields() {
    return new ObjectNode(
      {
        get cme_id_area() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "encuesta_sum_fields",
        extension: ((extensions as any) || {}).encuesta_sum_fields
      }
    );
  },
  get encuesta_update_column() {
    return new EnumNode({ name: "encuesta_update_column" });
  },
  get encuesta_var_pop_fields() {
    return new ObjectNode(
      {
        get cme_id_area() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "encuesta_var_pop_fields",
        extension: ((extensions as any) || {}).encuesta_var_pop_fields
      }
    );
  },
  get encuesta_var_samp_fields() {
    return new ObjectNode(
      {
        get cme_id_area() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "encuesta_var_samp_fields",
        extension: ((extensions as any) || {}).encuesta_var_samp_fields
      }
    );
  },
  get encuesta_variance_fields() {
    return new ObjectNode(
      {
        get cme_id_area() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "encuesta_variance_fields",
        extension: ((extensions as any) || {}).encuesta_variance_fields
      }
    );
  },
  get entidadFederativa() {
    return new ObjectNode(
      {
        get convocatoriageneronospcs() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriageneronospc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospcs_aggregate() {
          return new FieldNode(
            schema.convocatoriageneronospc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriagenero, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros_aggregate() {
          return new FieldNode(
            schema.convocatoriagenero_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get entidadFederativa() {
          return new FieldNode(schema.String, undefined, false);
        },
        get idEntidadFederativa() {
          return new FieldNode(schema.String, undefined, false);
        },
        get idPais() {
          return new FieldNode(schema.String, undefined, false);
        },
        get pai() {
          return new FieldNode(schema.pais, undefined, false);
        }
      },
      {
        name: "entidadFederativa",
        extension: ((extensions as any) || {}).entidadFederativa
      }
    );
  },
  get entidadFederativa_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.entidadFederativa_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.entidadFederativa, false),
            undefined,
            false
          );
        }
      },
      {
        name: "entidadFederativa_aggregate",
        extension: ((extensions as any) || {}).entidadFederativa_aggregate
      }
    );
  },
  get entidadFederativa_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.entidadFederativa_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.entidadFederativa_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "entidadFederativa_aggregate_fields",
        extension: ((extensions as any) || {})
          .entidadFederativa_aggregate_fields
      }
    );
  },
  get entidadFederativa_aggregate_order_by() {
    return new InputNode(
      {
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.entidadFederativa_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.entidadFederativa_min_order_by,
            true
          );
        }
      },
      { name: "entidadFederativa_aggregate_order_by" }
    );
  },
  get entidadFederativa_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.entidadFederativa_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.entidadFederativa_on_conflict, true);
        }
      },
      { name: "entidadFederativa_arr_rel_insert_input" }
    );
  },
  get entidadFederativa_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.entidadFederativa_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.entidadFederativa_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.entidadFederativa_bool_exp, true),
            true
          );
        },
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_bool_exp,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(schema.convocatoriagenero_bool_exp, true);
        },
        get entidadFederativa() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idEntidadFederativa() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idPais() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get pai() {
          return new InputNodeField(schema.pais_bool_exp, true);
        }
      },
      { name: "entidadFederativa_bool_exp" }
    );
  },
  get entidadFederativa_constraint() {
    return new EnumNode({ name: "entidadFederativa_constraint" });
  },
  get entidadFederativa_insert_input() {
    return new InputNode(
      {
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_arr_rel_insert_input,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(
            schema.convocatoriagenero_arr_rel_insert_input,
            true
          );
        },
        get entidadFederativa() {
          return new InputNodeField(schema.String, true);
        },
        get idEntidadFederativa() {
          return new InputNodeField(schema.String, true);
        },
        get idPais() {
          return new InputNodeField(schema.String, true);
        },
        get pai() {
          return new InputNodeField(schema.pais_obj_rel_insert_input, true);
        }
      },
      { name: "entidadFederativa_insert_input" }
    );
  },
  get entidadFederativa_max_fields() {
    return new ObjectNode(
      {
        get entidadFederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idEntidadFederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idPais() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "entidadFederativa_max_fields",
        extension: ((extensions as any) || {}).entidadFederativa_max_fields
      }
    );
  },
  get entidadFederativa_max_order_by() {
    return new InputNode(
      {
        get entidadFederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get idEntidadFederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get idPais() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "entidadFederativa_max_order_by" }
    );
  },
  get entidadFederativa_min_fields() {
    return new ObjectNode(
      {
        get entidadFederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idEntidadFederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idPais() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "entidadFederativa_min_fields",
        extension: ((extensions as any) || {}).entidadFederativa_min_fields
      }
    );
  },
  get entidadFederativa_min_order_by() {
    return new InputNode(
      {
        get entidadFederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get idEntidadFederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get idPais() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "entidadFederativa_min_order_by" }
    );
  },
  get entidadFederativa_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.entidadFederativa, false),
            undefined,
            false
          );
        }
      },
      {
        name: "entidadFederativa_mutation_response",
        extension: ((extensions as any) || {})
          .entidadFederativa_mutation_response
      }
    );
  },
  get entidadFederativa_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.entidadFederativa_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.entidadFederativa_on_conflict, true);
        }
      },
      { name: "entidadFederativa_obj_rel_insert_input" }
    );
  },
  get entidadFederativa_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.entidadFederativa_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.entidadFederativa_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.entidadFederativa_bool_exp, true);
        }
      },
      { name: "entidadFederativa_on_conflict" }
    );
  },
  get entidadFederativa_order_by() {
    return new InputNode(
      {
        get convocatoriageneronospcs_aggregate() {
          return new InputNodeField(
            schema.convocatoriageneronospc_aggregate_order_by,
            true
          );
        },
        get convocatoriageneros_aggregate() {
          return new InputNodeField(
            schema.convocatoriagenero_aggregate_order_by,
            true
          );
        },
        get entidadFederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get idEntidadFederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get idPais() {
          return new InputNodeField(schema.order_by, true);
        },
        get pai() {
          return new InputNodeField(schema.pais_order_by, true);
        }
      },
      { name: "entidadFederativa_order_by" }
    );
  },
  get entidadFederativa_pk_columns_input() {
    return new InputNode(
      {
        get idEntidadFederativa() {
          return new InputNodeField(schema.String, false);
        },
        get idPais() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "entidadFederativa_pk_columns_input" }
    );
  },
  get entidadFederativa_select_column() {
    return new EnumNode({ name: "entidadFederativa_select_column" });
  },
  get entidadFederativa_set_input() {
    return new InputNode(
      {
        get entidadFederativa() {
          return new InputNodeField(schema.String, true);
        },
        get idEntidadFederativa() {
          return new InputNodeField(schema.String, true);
        },
        get idPais() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "entidadFederativa_set_input" }
    );
  },
  get entidadFederativa_update_column() {
    return new EnumNode({ name: "entidadFederativa_update_column" });
  },
  get estadopuesto() {
    return new ObjectNode(
      {
        get estado() {
          return new FieldNode(schema.String, undefined, false);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        }
      },
      {
        name: "estadopuesto",
        extension: ((extensions as any) || {}).estadopuesto
      }
    );
  },
  get estadopuesto_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.estadopuesto_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.estadopuesto, false),
            undefined,
            false
          );
        }
      },
      {
        name: "estadopuesto_aggregate",
        extension: ((extensions as any) || {}).estadopuesto_aggregate
      }
    );
  },
  get estadopuesto_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.estadopuesto_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.estadopuesto_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.estadopuesto_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.estadopuesto_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.estadopuesto_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.estadopuesto_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.estadopuesto_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.estadopuesto_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.estadopuesto_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.estadopuesto_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.estadopuesto_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "estadopuesto_aggregate_fields",
        extension: ((extensions as any) || {}).estadopuesto_aggregate_fields
      }
    );
  },
  get estadopuesto_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "estadopuesto_avg_fields",
        extension: ((extensions as any) || {}).estadopuesto_avg_fields
      }
    );
  },
  get estadopuesto_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.estadopuesto_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.estadopuesto_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.estadopuesto_bool_exp, true),
            true
          );
        },
        get estado() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        }
      },
      { name: "estadopuesto_bool_exp" }
    );
  },
  get estadopuesto_constraint() {
    return new EnumNode({ name: "estadopuesto_constraint" });
  },
  get estadopuesto_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "estadopuesto_inc_input" }
    );
  },
  get estadopuesto_insert_input() {
    return new InputNode(
      {
        get estado() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "estadopuesto_insert_input" }
    );
  },
  get estadopuesto_max_fields() {
    return new ObjectNode(
      {
        get estado() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "estadopuesto_max_fields",
        extension: ((extensions as any) || {}).estadopuesto_max_fields
      }
    );
  },
  get estadopuesto_min_fields() {
    return new ObjectNode(
      {
        get estado() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "estadopuesto_min_fields",
        extension: ((extensions as any) || {}).estadopuesto_min_fields
      }
    );
  },
  get estadopuesto_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.estadopuesto, false),
            undefined,
            false
          );
        }
      },
      {
        name: "estadopuesto_mutation_response",
        extension: ((extensions as any) || {}).estadopuesto_mutation_response
      }
    );
  },
  get estadopuesto_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.estadopuesto_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.estadopuesto_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.estadopuesto_bool_exp, true);
        }
      },
      { name: "estadopuesto_on_conflict" }
    );
  },
  get estadopuesto_order_by() {
    return new InputNode(
      {
        get estado() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "estadopuesto_order_by" }
    );
  },
  get estadopuesto_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "estadopuesto_pk_columns_input" }
    );
  },
  get estadopuesto_select_column() {
    return new EnumNode({ name: "estadopuesto_select_column" });
  },
  get estadopuesto_set_input() {
    return new InputNode(
      {
        get estado() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "estadopuesto_set_input" }
    );
  },
  get estadopuesto_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "estadopuesto_stddev_fields",
        extension: ((extensions as any) || {}).estadopuesto_stddev_fields
      }
    );
  },
  get estadopuesto_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "estadopuesto_stddev_pop_fields",
        extension: ((extensions as any) || {}).estadopuesto_stddev_pop_fields
      }
    );
  },
  get estadopuesto_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "estadopuesto_stddev_samp_fields",
        extension: ((extensions as any) || {}).estadopuesto_stddev_samp_fields
      }
    );
  },
  get estadopuesto_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "estadopuesto_sum_fields",
        extension: ((extensions as any) || {}).estadopuesto_sum_fields
      }
    );
  },
  get estadopuesto_update_column() {
    return new EnumNode({ name: "estadopuesto_update_column" });
  },
  get estadopuesto_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "estadopuesto_var_pop_fields",
        extension: ((extensions as any) || {}).estadopuesto_var_pop_fields
      }
    );
  },
  get estadopuesto_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "estadopuesto_var_samp_fields",
        extension: ((extensions as any) || {}).estadopuesto_var_samp_fields
      }
    );
  },
  get estadopuesto_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "estadopuesto_variance_fields",
        extension: ((extensions as any) || {}).estadopuesto_variance_fields
      }
    );
  },
  get float8() {
    return new ScalarNode({
      name: "float8",
      extension: ((extensions as any) || {}).float8
    });
  },
  get float8_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.float8, true);
        },
        get _gt() {
          return new InputNodeField(schema.float8, true);
        },
        get _gte() {
          return new InputNodeField(schema.float8, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.float8, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.float8, true);
        },
        get _lte() {
          return new InputNodeField(schema.float8, true);
        },
        get _neq() {
          return new InputNodeField(schema.float8, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.float8, true), true);
        }
      },
      { name: "float8_comparison_exp" }
    );
  },
  get grupoExperiencia() {
    return new ObjectNode(
      {
        get areaGeneralExperiencia() {
          return new FieldNode(
            new ArrayNode(schema.areaGeneralExperiencia, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.areaGeneralExperiencia_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralExperiencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.areaGeneralExperiencia_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get areaGeneralExperiencia_aggregate() {
          return new FieldNode(
            schema.areaGeneralExperiencia_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.areaGeneralExperiencia_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralExperiencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.areaGeneralExperiencia_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospcs() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriageneronospc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospcs_aggregate() {
          return new FieldNode(
            schema.convocatoriageneronospc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriagenero, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros_aggregate() {
          return new FieldNode(
            schema.convocatoriagenero_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get grupoExperiencia() {
          return new FieldNode(schema.String, undefined, false);
        },
        get idGrupoExperiencia() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "grupoExperiencia",
        extension: ((extensions as any) || {}).grupoExperiencia
      }
    );
  },
  get grupoExperiencia_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.grupoExperiencia_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.grupoExperiencia, false),
            undefined,
            false
          );
        }
      },
      {
        name: "grupoExperiencia_aggregate",
        extension: ((extensions as any) || {}).grupoExperiencia_aggregate
      }
    );
  },
  get grupoExperiencia_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.grupoExperiencia_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.grupoExperiencia_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.grupoExperiencia_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "grupoExperiencia_aggregate_fields",
        extension: ((extensions as any) || {}).grupoExperiencia_aggregate_fields
      }
    );
  },
  get grupoExperiencia_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.grupoExperiencia_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.grupoExperiencia_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.grupoExperiencia_bool_exp, true),
            true
          );
        },
        get areaGeneralExperiencia() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_bool_exp,
            true
          );
        },
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_bool_exp,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(schema.convocatoriagenero_bool_exp, true);
        },
        get grupoExperiencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idGrupoExperiencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "grupoExperiencia_bool_exp" }
    );
  },
  get grupoExperiencia_constraint() {
    return new EnumNode({ name: "grupoExperiencia_constraint" });
  },
  get grupoExperiencia_insert_input() {
    return new InputNode(
      {
        get areaGeneralExperiencia() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_arr_rel_insert_input,
            true
          );
        },
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_arr_rel_insert_input,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(
            schema.convocatoriagenero_arr_rel_insert_input,
            true
          );
        },
        get grupoExperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get idGrupoExperiencia() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "grupoExperiencia_insert_input" }
    );
  },
  get grupoExperiencia_max_fields() {
    return new ObjectNode(
      {
        get grupoExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idGrupoExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "grupoExperiencia_max_fields",
        extension: ((extensions as any) || {}).grupoExperiencia_max_fields
      }
    );
  },
  get grupoExperiencia_min_fields() {
    return new ObjectNode(
      {
        get grupoExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idGrupoExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "grupoExperiencia_min_fields",
        extension: ((extensions as any) || {}).grupoExperiencia_min_fields
      }
    );
  },
  get grupoExperiencia_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.grupoExperiencia, false),
            undefined,
            false
          );
        }
      },
      {
        name: "grupoExperiencia_mutation_response",
        extension: ((extensions as any) || {})
          .grupoExperiencia_mutation_response
      }
    );
  },
  get grupoExperiencia_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.grupoExperiencia_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.grupoExperiencia_on_conflict, true);
        }
      },
      { name: "grupoExperiencia_obj_rel_insert_input" }
    );
  },
  get grupoExperiencia_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.grupoExperiencia_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.grupoExperiencia_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.grupoExperiencia_bool_exp, true);
        }
      },
      { name: "grupoExperiencia_on_conflict" }
    );
  },
  get grupoExperiencia_order_by() {
    return new InputNode(
      {
        get areaGeneralExperiencia_aggregate() {
          return new InputNodeField(
            schema.areaGeneralExperiencia_aggregate_order_by,
            true
          );
        },
        get convocatoriageneronospcs_aggregate() {
          return new InputNodeField(
            schema.convocatoriageneronospc_aggregate_order_by,
            true
          );
        },
        get convocatoriageneros_aggregate() {
          return new InputNodeField(
            schema.convocatoriagenero_aggregate_order_by,
            true
          );
        },
        get grupoExperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idGrupoExperiencia() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "grupoExperiencia_order_by" }
    );
  },
  get grupoExperiencia_pk_columns_input() {
    return new InputNode(
      {
        get idGrupoExperiencia() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "grupoExperiencia_pk_columns_input" }
    );
  },
  get grupoExperiencia_select_column() {
    return new EnumNode({ name: "grupoExperiencia_select_column" });
  },
  get grupoExperiencia_set_input() {
    return new InputNode(
      {
        get grupoExperiencia() {
          return new InputNodeField(schema.String, true);
        },
        get idGrupoExperiencia() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "grupoExperiencia_set_input" }
    );
  },
  get grupoExperiencia_update_column() {
    return new EnumNode({ name: "grupoExperiencia_update_column" });
  },
  get hydra_client() {
    return new ObjectNode(
      {
        get allowed_cors_origins() {
          return new FieldNode(schema.String, undefined, false);
        },
        get audience() {
          return new FieldNode(schema.String, undefined, false);
        },
        get backchannel_logout_session_required() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get backchannel_logout_uri() {
          return new FieldNode(schema.String, undefined, false);
        },
        get client_name() {
          return new FieldNode(schema.String, undefined, false);
        },
        get client_secret() {
          return new FieldNode(schema.String, undefined, false);
        },
        get client_secret_expires_at() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get client_uri() {
          return new FieldNode(schema.String, undefined, false);
        },
        get contacts() {
          return new FieldNode(schema.String, undefined, false);
        },
        get created_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get frontchannel_logout_session_required() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get frontchannel_logout_uri() {
          return new FieldNode(schema.String, undefined, false);
        },
        get grant_types() {
          return new FieldNode(schema.String, undefined, false);
        },
        get hydra_oauth2_accesses() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_access, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_accesses_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_access_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_requests() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_authentication_request, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_requests_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_codes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_code, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_codes_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_code_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_requests() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_consent_request, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_requests_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_logout_requests() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_logout_request, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_logout_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_logout_requests_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_logout_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_obfuscated_authentication_sessions() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_obfuscated_authentication_session,
              false
            ),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_obfuscated_authentication_session_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_obfuscated_authentication_sessions_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_obfuscated_authentication_session_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_oidcs() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_oidc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_oidcs_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_oidc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_pkces() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_pkce, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_pkces_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_pkce_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_refreshes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_refresh, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_refresh_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_refresh_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_refreshes_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_refresh_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_refresh_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_refresh_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get jwks() {
          return new FieldNode(schema.String, undefined, false);
        },
        get jwks_uri() {
          return new FieldNode(schema.String, undefined, false);
        },
        get logo_uri() {
          return new FieldNode(schema.String, undefined, false);
        },
        get owner() {
          return new FieldNode(schema.String, undefined, false);
        },
        get pk() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get policy_uri() {
          return new FieldNode(schema.String, undefined, false);
        },
        get post_logout_redirect_uris() {
          return new FieldNode(schema.String, undefined, false);
        },
        get redirect_uris() {
          return new FieldNode(schema.String, undefined, false);
        },
        get request_object_signing_alg() {
          return new FieldNode(schema.String, undefined, false);
        },
        get request_uris() {
          return new FieldNode(schema.String, undefined, false);
        },
        get response_types() {
          return new FieldNode(schema.String, undefined, false);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get sector_identifier_uri() {
          return new FieldNode(schema.String, undefined, false);
        },
        get subject_type() {
          return new FieldNode(schema.String, undefined, false);
        },
        get token_endpoint_auth_method() {
          return new FieldNode(schema.String, undefined, false);
        },
        get tos_uri() {
          return new FieldNode(schema.String, undefined, false);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get userinfo_signed_response_alg() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_client",
        extension: ((extensions as any) || {}).hydra_client
      }
    );
  },
  get hydra_client_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_client_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_client, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_client_aggregate",
        extension: ((extensions as any) || {}).hydra_client_aggregate
      }
    );
  },
  get hydra_client_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.hydra_client_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.hydra_client_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.hydra_client_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.hydra_client_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.hydra_client_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.hydra_client_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.hydra_client_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.hydra_client_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.hydra_client_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.hydra_client_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_client_aggregate_fields",
        extension: ((extensions as any) || {}).hydra_client_aggregate_fields
      }
    );
  },
  get hydra_client_avg_fields() {
    return new ObjectNode(
      {
        get client_secret_expires_at() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_client_avg_fields",
        extension: ((extensions as any) || {}).hydra_client_avg_fields
      }
    );
  },
  get hydra_client_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_client_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.hydra_client_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_client_bool_exp, true),
            true
          );
        },
        get allowed_cors_origins() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get backchannel_logout_session_required() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get backchannel_logout_uri() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get client_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get client_secret() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get client_secret_expires_at() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get client_uri() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get contacts() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get frontchannel_logout_session_required() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get frontchannel_logout_uri() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get grant_types() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hydra_oauth2_accesses() {
          return new InputNodeField(schema.hydra_oauth2_access_bool_exp, true);
        },
        get hydra_oauth2_authentication_requests() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_bool_exp,
            true
          );
        },
        get hydra_oauth2_codes() {
          return new InputNodeField(schema.hydra_oauth2_code_bool_exp, true);
        },
        get hydra_oauth2_consent_requests() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_bool_exp,
            true
          );
        },
        get hydra_oauth2_logout_requests() {
          return new InputNodeField(
            schema.hydra_oauth2_logout_request_bool_exp,
            true
          );
        },
        get hydra_oauth2_obfuscated_authentication_sessions() {
          return new InputNodeField(
            schema.hydra_oauth2_obfuscated_authentication_session_bool_exp,
            true
          );
        },
        get hydra_oauth2_oidcs() {
          return new InputNodeField(schema.hydra_oauth2_oidc_bool_exp, true);
        },
        get hydra_oauth2_pkces() {
          return new InputNodeField(schema.hydra_oauth2_pkce_bool_exp, true);
        },
        get hydra_oauth2_refreshes() {
          return new InputNodeField(schema.hydra_oauth2_refresh_bool_exp, true);
        },
        get id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get jwks() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get jwks_uri() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get logo_uri() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get owner() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get pk() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get policy_uri() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get post_logout_redirect_uris() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get redirect_uris() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get request_object_signing_alg() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get request_uris() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get response_types() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get sector_identifier_uri() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get subject_type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get token_endpoint_auth_method() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get tos_uri() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get userinfo_signed_response_alg() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_client_bool_exp" }
    );
  },
  get hydra_client_constraint() {
    return new EnumNode({ name: "hydra_client_constraint" });
  },
  get hydra_client_inc_input() {
    return new InputNode(
      {
        get client_secret_expires_at() {
          return new InputNodeField(schema.Int, true);
        },
        get pk() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "hydra_client_inc_input" }
    );
  },
  get hydra_client_insert_input() {
    return new InputNode(
      {
        get allowed_cors_origins() {
          return new InputNodeField(schema.String, true);
        },
        get audience() {
          return new InputNodeField(schema.String, true);
        },
        get backchannel_logout_session_required() {
          return new InputNodeField(schema.Boolean, true);
        },
        get backchannel_logout_uri() {
          return new InputNodeField(schema.String, true);
        },
        get client_name() {
          return new InputNodeField(schema.String, true);
        },
        get client_secret() {
          return new InputNodeField(schema.String, true);
        },
        get client_secret_expires_at() {
          return new InputNodeField(schema.Int, true);
        },
        get client_uri() {
          return new InputNodeField(schema.String, true);
        },
        get contacts() {
          return new InputNodeField(schema.String, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get frontchannel_logout_session_required() {
          return new InputNodeField(schema.Boolean, true);
        },
        get frontchannel_logout_uri() {
          return new InputNodeField(schema.String, true);
        },
        get grant_types() {
          return new InputNodeField(schema.String, true);
        },
        get hydra_oauth2_accesses() {
          return new InputNodeField(
            schema.hydra_oauth2_access_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_authentication_requests() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_codes() {
          return new InputNodeField(
            schema.hydra_oauth2_code_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_consent_requests() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_logout_requests() {
          return new InputNodeField(
            schema.hydra_oauth2_logout_request_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_obfuscated_authentication_sessions() {
          return new InputNodeField(
            schema.hydra_oauth2_obfuscated_authentication_session_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_oidcs() {
          return new InputNodeField(
            schema.hydra_oauth2_oidc_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_pkces() {
          return new InputNodeField(
            schema.hydra_oauth2_pkce_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_refreshes() {
          return new InputNodeField(
            schema.hydra_oauth2_refresh_arr_rel_insert_input,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.String, true);
        },
        get jwks() {
          return new InputNodeField(schema.String, true);
        },
        get jwks_uri() {
          return new InputNodeField(schema.String, true);
        },
        get logo_uri() {
          return new InputNodeField(schema.String, true);
        },
        get owner() {
          return new InputNodeField(schema.String, true);
        },
        get pk() {
          return new InputNodeField(schema.Int, true);
        },
        get policy_uri() {
          return new InputNodeField(schema.String, true);
        },
        get post_logout_redirect_uris() {
          return new InputNodeField(schema.String, true);
        },
        get redirect_uris() {
          return new InputNodeField(schema.String, true);
        },
        get request_object_signing_alg() {
          return new InputNodeField(schema.String, true);
        },
        get request_uris() {
          return new InputNodeField(schema.String, true);
        },
        get response_types() {
          return new InputNodeField(schema.String, true);
        },
        get scope() {
          return new InputNodeField(schema.String, true);
        },
        get sector_identifier_uri() {
          return new InputNodeField(schema.String, true);
        },
        get subject_type() {
          return new InputNodeField(schema.String, true);
        },
        get token_endpoint_auth_method() {
          return new InputNodeField(schema.String, true);
        },
        get tos_uri() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get userinfo_signed_response_alg() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_client_insert_input" }
    );
  },
  get hydra_client_max_fields() {
    return new ObjectNode(
      {
        get allowed_cors_origins() {
          return new FieldNode(schema.String, undefined, true);
        },
        get audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get backchannel_logout_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_secret() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_secret_expires_at() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get client_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get contacts() {
          return new FieldNode(schema.String, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get frontchannel_logout_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get grant_types() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get jwks() {
          return new FieldNode(schema.String, undefined, true);
        },
        get jwks_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get logo_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get owner() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pk() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get policy_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get post_logout_redirect_uris() {
          return new FieldNode(schema.String, undefined, true);
        },
        get redirect_uris() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_object_signing_alg() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_uris() {
          return new FieldNode(schema.String, undefined, true);
        },
        get response_types() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sector_identifier_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get token_endpoint_auth_method() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tos_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get userinfo_signed_response_alg() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_client_max_fields",
        extension: ((extensions as any) || {}).hydra_client_max_fields
      }
    );
  },
  get hydra_client_migration() {
    return new ObjectNode(
      {
        get applied_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_client_migration",
        extension: ((extensions as any) || {}).hydra_client_migration
      }
    );
  },
  get hydra_client_migration_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_client_migration_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_client_migration, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_client_migration_aggregate",
        extension: ((extensions as any) || {}).hydra_client_migration_aggregate
      }
    );
  },
  get hydra_client_migration_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_client_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_client_migration_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_client_migration_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_client_migration_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_client_migration_aggregate_fields
      }
    );
  },
  get hydra_client_migration_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_client_migration_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.hydra_client_migration_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_client_migration_bool_exp, true),
            true
          );
        },
        get applied_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_client_migration_bool_exp" }
    );
  },
  get hydra_client_migration_constraint() {
    return new EnumNode({ name: "hydra_client_migration_constraint" });
  },
  get hydra_client_migration_insert_input() {
    return new InputNode(
      {
        get applied_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get id() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_client_migration_insert_input" }
    );
  },
  get hydra_client_migration_max_fields() {
    return new ObjectNode(
      {
        get applied_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_client_migration_max_fields",
        extension: ((extensions as any) || {}).hydra_client_migration_max_fields
      }
    );
  },
  get hydra_client_migration_min_fields() {
    return new ObjectNode(
      {
        get applied_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_client_migration_min_fields",
        extension: ((extensions as any) || {}).hydra_client_migration_min_fields
      }
    );
  },
  get hydra_client_migration_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_client_migration, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_client_migration_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_client_migration_mutation_response
      }
    );
  },
  get hydra_client_migration_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.hydra_client_migration_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_client_migration_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.hydra_client_migration_bool_exp,
            true
          );
        }
      },
      { name: "hydra_client_migration_on_conflict" }
    );
  },
  get hydra_client_migration_order_by() {
    return new InputNode(
      {
        get applied_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_client_migration_order_by" }
    );
  },
  get hydra_client_migration_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_client_migration_pk_columns_input" }
    );
  },
  get hydra_client_migration_select_column() {
    return new EnumNode({ name: "hydra_client_migration_select_column" });
  },
  get hydra_client_migration_set_input() {
    return new InputNode(
      {
        get applied_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get id() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_client_migration_set_input" }
    );
  },
  get hydra_client_migration_update_column() {
    return new EnumNode({ name: "hydra_client_migration_update_column" });
  },
  get hydra_client_min_fields() {
    return new ObjectNode(
      {
        get allowed_cors_origins() {
          return new FieldNode(schema.String, undefined, true);
        },
        get audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get backchannel_logout_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_secret() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_secret_expires_at() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get client_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get contacts() {
          return new FieldNode(schema.String, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get frontchannel_logout_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get grant_types() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get jwks() {
          return new FieldNode(schema.String, undefined, true);
        },
        get jwks_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get logo_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get owner() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pk() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get policy_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get post_logout_redirect_uris() {
          return new FieldNode(schema.String, undefined, true);
        },
        get redirect_uris() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_object_signing_alg() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_uris() {
          return new FieldNode(schema.String, undefined, true);
        },
        get response_types() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sector_identifier_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get token_endpoint_auth_method() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tos_uri() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get userinfo_signed_response_alg() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_client_min_fields",
        extension: ((extensions as any) || {}).hydra_client_min_fields
      }
    );
  },
  get hydra_client_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_client, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_client_mutation_response",
        extension: ((extensions as any) || {}).hydra_client_mutation_response
      }
    );
  },
  get hydra_client_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.hydra_client_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.hydra_client_on_conflict, true);
        }
      },
      { name: "hydra_client_obj_rel_insert_input" }
    );
  },
  get hydra_client_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.hydra_client_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_client_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.hydra_client_bool_exp, true);
        }
      },
      { name: "hydra_client_on_conflict" }
    );
  },
  get hydra_client_order_by() {
    return new InputNode(
      {
        get allowed_cors_origins() {
          return new InputNodeField(schema.order_by, true);
        },
        get audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get backchannel_logout_session_required() {
          return new InputNodeField(schema.order_by, true);
        },
        get backchannel_logout_uri() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_secret() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_secret_expires_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_uri() {
          return new InputNodeField(schema.order_by, true);
        },
        get contacts() {
          return new InputNodeField(schema.order_by, true);
        },
        get created_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get frontchannel_logout_session_required() {
          return new InputNodeField(schema.order_by, true);
        },
        get frontchannel_logout_uri() {
          return new InputNodeField(schema.order_by, true);
        },
        get grant_types() {
          return new InputNodeField(schema.order_by, true);
        },
        get hydra_oauth2_accesses_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_access_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_authentication_requests_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_codes_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_code_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_consent_requests_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_logout_requests_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_logout_request_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_obfuscated_authentication_sessions_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_obfuscated_authentication_session_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_oidcs_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_oidc_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_pkces_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_pkce_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_refreshes_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_refresh_aggregate_order_by,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get jwks() {
          return new InputNodeField(schema.order_by, true);
        },
        get jwks_uri() {
          return new InputNodeField(schema.order_by, true);
        },
        get logo_uri() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner() {
          return new InputNodeField(schema.order_by, true);
        },
        get pk() {
          return new InputNodeField(schema.order_by, true);
        },
        get policy_uri() {
          return new InputNodeField(schema.order_by, true);
        },
        get post_logout_redirect_uris() {
          return new InputNodeField(schema.order_by, true);
        },
        get redirect_uris() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_object_signing_alg() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_uris() {
          return new InputNodeField(schema.order_by, true);
        },
        get response_types() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get sector_identifier_uri() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get token_endpoint_auth_method() {
          return new InputNodeField(schema.order_by, true);
        },
        get tos_uri() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get userinfo_signed_response_alg() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_client_order_by" }
    );
  },
  get hydra_client_pk_columns_input() {
    return new InputNode(
      {
        get pk() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "hydra_client_pk_columns_input" }
    );
  },
  get hydra_client_select_column() {
    return new EnumNode({ name: "hydra_client_select_column" });
  },
  get hydra_client_set_input() {
    return new InputNode(
      {
        get allowed_cors_origins() {
          return new InputNodeField(schema.String, true);
        },
        get audience() {
          return new InputNodeField(schema.String, true);
        },
        get backchannel_logout_session_required() {
          return new InputNodeField(schema.Boolean, true);
        },
        get backchannel_logout_uri() {
          return new InputNodeField(schema.String, true);
        },
        get client_name() {
          return new InputNodeField(schema.String, true);
        },
        get client_secret() {
          return new InputNodeField(schema.String, true);
        },
        get client_secret_expires_at() {
          return new InputNodeField(schema.Int, true);
        },
        get client_uri() {
          return new InputNodeField(schema.String, true);
        },
        get contacts() {
          return new InputNodeField(schema.String, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get frontchannel_logout_session_required() {
          return new InputNodeField(schema.Boolean, true);
        },
        get frontchannel_logout_uri() {
          return new InputNodeField(schema.String, true);
        },
        get grant_types() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.String, true);
        },
        get jwks() {
          return new InputNodeField(schema.String, true);
        },
        get jwks_uri() {
          return new InputNodeField(schema.String, true);
        },
        get logo_uri() {
          return new InputNodeField(schema.String, true);
        },
        get owner() {
          return new InputNodeField(schema.String, true);
        },
        get pk() {
          return new InputNodeField(schema.Int, true);
        },
        get policy_uri() {
          return new InputNodeField(schema.String, true);
        },
        get post_logout_redirect_uris() {
          return new InputNodeField(schema.String, true);
        },
        get redirect_uris() {
          return new InputNodeField(schema.String, true);
        },
        get request_object_signing_alg() {
          return new InputNodeField(schema.String, true);
        },
        get request_uris() {
          return new InputNodeField(schema.String, true);
        },
        get response_types() {
          return new InputNodeField(schema.String, true);
        },
        get scope() {
          return new InputNodeField(schema.String, true);
        },
        get sector_identifier_uri() {
          return new InputNodeField(schema.String, true);
        },
        get subject_type() {
          return new InputNodeField(schema.String, true);
        },
        get token_endpoint_auth_method() {
          return new InputNodeField(schema.String, true);
        },
        get tos_uri() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get userinfo_signed_response_alg() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_client_set_input" }
    );
  },
  get hydra_client_stddev_fields() {
    return new ObjectNode(
      {
        get client_secret_expires_at() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_client_stddev_fields",
        extension: ((extensions as any) || {}).hydra_client_stddev_fields
      }
    );
  },
  get hydra_client_stddev_pop_fields() {
    return new ObjectNode(
      {
        get client_secret_expires_at() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_client_stddev_pop_fields",
        extension: ((extensions as any) || {}).hydra_client_stddev_pop_fields
      }
    );
  },
  get hydra_client_stddev_samp_fields() {
    return new ObjectNode(
      {
        get client_secret_expires_at() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_client_stddev_samp_fields",
        extension: ((extensions as any) || {}).hydra_client_stddev_samp_fields
      }
    );
  },
  get hydra_client_sum_fields() {
    return new ObjectNode(
      {
        get client_secret_expires_at() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get pk() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "hydra_client_sum_fields",
        extension: ((extensions as any) || {}).hydra_client_sum_fields
      }
    );
  },
  get hydra_client_update_column() {
    return new EnumNode({ name: "hydra_client_update_column" });
  },
  get hydra_client_var_pop_fields() {
    return new ObjectNode(
      {
        get client_secret_expires_at() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_client_var_pop_fields",
        extension: ((extensions as any) || {}).hydra_client_var_pop_fields
      }
    );
  },
  get hydra_client_var_samp_fields() {
    return new ObjectNode(
      {
        get client_secret_expires_at() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_client_var_samp_fields",
        extension: ((extensions as any) || {}).hydra_client_var_samp_fields
      }
    );
  },
  get hydra_client_variance_fields() {
    return new ObjectNode(
      {
        get client_secret_expires_at() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_client_variance_fields",
        extension: ((extensions as any) || {}).hydra_client_variance_fields
      }
    );
  },
  get hydra_jwk() {
    return new ObjectNode(
      {
        get created_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get keydata() {
          return new FieldNode(schema.String, undefined, false);
        },
        get kid() {
          return new FieldNode(schema.String, undefined, false);
        },
        get pk() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get sid() {
          return new FieldNode(schema.String, undefined, false);
        },
        get version() {
          return new FieldNode(schema.Int, undefined, false);
        }
      },
      { name: "hydra_jwk", extension: ((extensions as any) || {}).hydra_jwk }
    );
  },
  get hydra_jwk_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_jwk_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_jwk, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_jwk_aggregate",
        extension: ((extensions as any) || {}).hydra_jwk_aggregate
      }
    );
  },
  get hydra_jwk_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.hydra_jwk_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.hydra_jwk_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.hydra_jwk_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.hydra_jwk_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(
            schema.hydra_jwk_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.hydra_jwk_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.hydra_jwk_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.hydra_jwk_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.hydra_jwk_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.hydra_jwk_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_jwk_aggregate_fields",
        extension: ((extensions as any) || {}).hydra_jwk_aggregate_fields
      }
    );
  },
  get hydra_jwk_avg_fields() {
    return new ObjectNode(
      {
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_jwk_avg_fields",
        extension: ((extensions as any) || {}).hydra_jwk_avg_fields
      }
    );
  },
  get hydra_jwk_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_jwk_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.hydra_jwk_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_jwk_bool_exp, true),
            true
          );
        },
        get created_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get keydata() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get kid() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get pk() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get sid() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get version() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        }
      },
      { name: "hydra_jwk_bool_exp" }
    );
  },
  get hydra_jwk_constraint() {
    return new EnumNode({ name: "hydra_jwk_constraint" });
  },
  get hydra_jwk_inc_input() {
    return new InputNode(
      {
        get pk() {
          return new InputNodeField(schema.Int, true);
        },
        get version() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "hydra_jwk_inc_input" }
    );
  },
  get hydra_jwk_insert_input() {
    return new InputNode(
      {
        get created_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get keydata() {
          return new InputNodeField(schema.String, true);
        },
        get kid() {
          return new InputNodeField(schema.String, true);
        },
        get pk() {
          return new InputNodeField(schema.Int, true);
        },
        get sid() {
          return new InputNodeField(schema.String, true);
        },
        get version() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "hydra_jwk_insert_input" }
    );
  },
  get hydra_jwk_max_fields() {
    return new ObjectNode(
      {
        get created_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get keydata() {
          return new FieldNode(schema.String, undefined, true);
        },
        get kid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pk() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get version() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "hydra_jwk_max_fields",
        extension: ((extensions as any) || {}).hydra_jwk_max_fields
      }
    );
  },
  get hydra_jwk_migration() {
    return new ObjectNode(
      {
        get applied_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_jwk_migration",
        extension: ((extensions as any) || {}).hydra_jwk_migration
      }
    );
  },
  get hydra_jwk_migration_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_jwk_migration_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_jwk_migration, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_jwk_migration_aggregate",
        extension: ((extensions as any) || {}).hydra_jwk_migration_aggregate
      }
    );
  },
  get hydra_jwk_migration_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_migration_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_jwk_migration_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_jwk_migration_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_jwk_migration_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_jwk_migration_aggregate_fields
      }
    );
  },
  get hydra_jwk_migration_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_jwk_migration_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.hydra_jwk_migration_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_jwk_migration_bool_exp, true),
            true
          );
        },
        get applied_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_jwk_migration_bool_exp" }
    );
  },
  get hydra_jwk_migration_constraint() {
    return new EnumNode({ name: "hydra_jwk_migration_constraint" });
  },
  get hydra_jwk_migration_insert_input() {
    return new InputNode(
      {
        get applied_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get id() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_jwk_migration_insert_input" }
    );
  },
  get hydra_jwk_migration_max_fields() {
    return new ObjectNode(
      {
        get applied_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_jwk_migration_max_fields",
        extension: ((extensions as any) || {}).hydra_jwk_migration_max_fields
      }
    );
  },
  get hydra_jwk_migration_min_fields() {
    return new ObjectNode(
      {
        get applied_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_jwk_migration_min_fields",
        extension: ((extensions as any) || {}).hydra_jwk_migration_min_fields
      }
    );
  },
  get hydra_jwk_migration_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_jwk_migration, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_jwk_migration_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_jwk_migration_mutation_response
      }
    );
  },
  get hydra_jwk_migration_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.hydra_jwk_migration_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_jwk_migration_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.hydra_jwk_migration_bool_exp, true);
        }
      },
      { name: "hydra_jwk_migration_on_conflict" }
    );
  },
  get hydra_jwk_migration_order_by() {
    return new InputNode(
      {
        get applied_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_jwk_migration_order_by" }
    );
  },
  get hydra_jwk_migration_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_jwk_migration_pk_columns_input" }
    );
  },
  get hydra_jwk_migration_select_column() {
    return new EnumNode({ name: "hydra_jwk_migration_select_column" });
  },
  get hydra_jwk_migration_set_input() {
    return new InputNode(
      {
        get applied_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get id() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_jwk_migration_set_input" }
    );
  },
  get hydra_jwk_migration_update_column() {
    return new EnumNode({ name: "hydra_jwk_migration_update_column" });
  },
  get hydra_jwk_min_fields() {
    return new ObjectNode(
      {
        get created_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get keydata() {
          return new FieldNode(schema.String, undefined, true);
        },
        get kid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pk() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get version() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "hydra_jwk_min_fields",
        extension: ((extensions as any) || {}).hydra_jwk_min_fields
      }
    );
  },
  get hydra_jwk_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_jwk, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_jwk_mutation_response",
        extension: ((extensions as any) || {}).hydra_jwk_mutation_response
      }
    );
  },
  get hydra_jwk_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.hydra_jwk_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_jwk_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.hydra_jwk_bool_exp, true);
        }
      },
      { name: "hydra_jwk_on_conflict" }
    );
  },
  get hydra_jwk_order_by() {
    return new InputNode(
      {
        get created_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get keydata() {
          return new InputNodeField(schema.order_by, true);
        },
        get kid() {
          return new InputNodeField(schema.order_by, true);
        },
        get pk() {
          return new InputNodeField(schema.order_by, true);
        },
        get sid() {
          return new InputNodeField(schema.order_by, true);
        },
        get version() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_jwk_order_by" }
    );
  },
  get hydra_jwk_pk_columns_input() {
    return new InputNode(
      {
        get pk() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "hydra_jwk_pk_columns_input" }
    );
  },
  get hydra_jwk_select_column() {
    return new EnumNode({ name: "hydra_jwk_select_column" });
  },
  get hydra_jwk_set_input() {
    return new InputNode(
      {
        get created_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get keydata() {
          return new InputNodeField(schema.String, true);
        },
        get kid() {
          return new InputNodeField(schema.String, true);
        },
        get pk() {
          return new InputNodeField(schema.Int, true);
        },
        get sid() {
          return new InputNodeField(schema.String, true);
        },
        get version() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "hydra_jwk_set_input" }
    );
  },
  get hydra_jwk_stddev_fields() {
    return new ObjectNode(
      {
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_jwk_stddev_fields",
        extension: ((extensions as any) || {}).hydra_jwk_stddev_fields
      }
    );
  },
  get hydra_jwk_stddev_pop_fields() {
    return new ObjectNode(
      {
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_jwk_stddev_pop_fields",
        extension: ((extensions as any) || {}).hydra_jwk_stddev_pop_fields
      }
    );
  },
  get hydra_jwk_stddev_samp_fields() {
    return new ObjectNode(
      {
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_jwk_stddev_samp_fields",
        extension: ((extensions as any) || {}).hydra_jwk_stddev_samp_fields
      }
    );
  },
  get hydra_jwk_sum_fields() {
    return new ObjectNode(
      {
        get pk() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get version() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "hydra_jwk_sum_fields",
        extension: ((extensions as any) || {}).hydra_jwk_sum_fields
      }
    );
  },
  get hydra_jwk_update_column() {
    return new EnumNode({ name: "hydra_jwk_update_column" });
  },
  get hydra_jwk_var_pop_fields() {
    return new ObjectNode(
      {
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_jwk_var_pop_fields",
        extension: ((extensions as any) || {}).hydra_jwk_var_pop_fields
      }
    );
  },
  get hydra_jwk_var_samp_fields() {
    return new ObjectNode(
      {
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_jwk_var_samp_fields",
        extension: ((extensions as any) || {}).hydra_jwk_var_samp_fields
      }
    );
  },
  get hydra_jwk_variance_fields() {
    return new ObjectNode(
      {
        get pk() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_jwk_variance_fields",
        extension: ((extensions as any) || {}).hydra_jwk_variance_fields
      }
    );
  },
  get hydra_oauth2_access() {
    return new ObjectNode(
      {
        get active() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, false);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get hydra_client() {
          return new FieldNode(schema.hydra_client, undefined, false);
        },
        get hydra_oauth2_consent_request_handled() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled,
            undefined,
            false
          );
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, false);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, false);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_access",
        extension: ((extensions as any) || {}).hydra_oauth2_access
      }
    );
  },
  get hydra_oauth2_access_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_access_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_access, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_access_aggregate",
        extension: ((extensions as any) || {}).hydra_oauth2_access_aggregate
      }
    );
  },
  get hydra_oauth2_access_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_access_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_access_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_access_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_access_aggregate_fields
      }
    );
  },
  get hydra_oauth2_access_aggregate_order_by() {
    return new InputNode(
      {
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.hydra_oauth2_access_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.hydra_oauth2_access_min_order_by,
            true
          );
        }
      },
      { name: "hydra_oauth2_access_aggregate_order_by" }
    );
  },
  get hydra_oauth2_access_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_access_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.hydra_oauth2_access_on_conflict,
            true
          );
        }
      },
      { name: "hydra_oauth2_access_arr_rel_insert_input" }
    );
  },
  get hydra_oauth2_access_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_access_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.hydra_oauth2_access_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_access_bool_exp, true),
            true
          );
        },
        get active() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get client_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get form_data() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_bool_exp, true);
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_bool_exp,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get session_data() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get signature() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get subject() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_access_bool_exp" }
    );
  },
  get hydra_oauth2_access_constraint() {
    return new EnumNode({ name: "hydra_oauth2_access_constraint" });
  },
  get hydra_oauth2_access_insert_input() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.Boolean, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get form_data() {
          return new InputNodeField(schema.String, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String, true);
        },
        get hydra_client() {
          return new InputNodeField(
            schema.hydra_client_obj_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_obj_rel_insert_input,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String, true);
        },
        get scope() {
          return new InputNodeField(schema.String, true);
        },
        get session_data() {
          return new InputNodeField(schema.String, true);
        },
        get signature() {
          return new InputNodeField(schema.String, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_access_insert_input" }
    );
  },
  get hydra_oauth2_access_max_fields() {
    return new ObjectNode(
      {
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_access_max_fields",
        extension: ((extensions as any) || {}).hydra_oauth2_access_max_fields
      }
    );
  },
  get hydra_oauth2_access_max_order_by() {
    return new InputNode(
      {
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_access_max_order_by" }
    );
  },
  get hydra_oauth2_access_min_fields() {
    return new ObjectNode(
      {
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_access_min_fields",
        extension: ((extensions as any) || {}).hydra_oauth2_access_min_fields
      }
    );
  },
  get hydra_oauth2_access_min_order_by() {
    return new InputNode(
      {
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_access_min_order_by" }
    );
  },
  get hydra_oauth2_access_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_access, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_access_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_access_mutation_response
      }
    );
  },
  get hydra_oauth2_access_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.hydra_oauth2_access_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_access_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.hydra_oauth2_access_bool_exp, true);
        }
      },
      { name: "hydra_oauth2_access_on_conflict" }
    );
  },
  get hydra_oauth2_access_order_by() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_order_by, true);
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_order_by,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_access_order_by" }
    );
  },
  get hydra_oauth2_access_pk_columns_input() {
    return new InputNode(
      {
        get signature() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_oauth2_access_pk_columns_input" }
    );
  },
  get hydra_oauth2_access_select_column() {
    return new EnumNode({ name: "hydra_oauth2_access_select_column" });
  },
  get hydra_oauth2_access_set_input() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.Boolean, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get form_data() {
          return new InputNodeField(schema.String, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String, true);
        },
        get request_id() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String, true);
        },
        get scope() {
          return new InputNodeField(schema.String, true);
        },
        get session_data() {
          return new InputNodeField(schema.String, true);
        },
        get signature() {
          return new InputNodeField(schema.String, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_access_set_input" }
    );
  },
  get hydra_oauth2_access_update_column() {
    return new EnumNode({ name: "hydra_oauth2_access_update_column" });
  },
  get hydra_oauth2_authentication_consent_migration() {
    return new ObjectNode(
      {
        get applied_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_authentication_consent_migration",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_consent_migration
      }
    );
  },
  get hydra_oauth2_authentication_consent_migration_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_consent_migration_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_authentication_consent_migration,
              false
            ),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_authentication_consent_migration_aggregate",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_consent_migration_aggregate
      }
    );
  },
  get hydra_oauth2_authentication_consent_migration_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_consent_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_consent_migration_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_consent_migration_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_authentication_consent_migration_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_consent_migration_aggregate_fields
      }
    );
  },
  get hydra_oauth2_authentication_consent_migration_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_consent_migration_bool_exp,
              true
            ),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_consent_migration_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_consent_migration_bool_exp,
              true
            ),
            true
          );
        },
        get applied_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_authentication_consent_migration_bool_exp" }
    );
  },
  get hydra_oauth2_authentication_consent_migration_constraint() {
    return new EnumNode({
      name: "hydra_oauth2_authentication_consent_migration_constraint"
    });
  },
  get hydra_oauth2_authentication_consent_migration_insert_input() {
    return new InputNode(
      {
        get applied_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get id() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_authentication_consent_migration_insert_input" }
    );
  },
  get hydra_oauth2_authentication_consent_migration_max_fields() {
    return new ObjectNode(
      {
        get applied_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_consent_migration_max_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_consent_migration_max_fields
      }
    );
  },
  get hydra_oauth2_authentication_consent_migration_min_fields() {
    return new ObjectNode(
      {
        get applied_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_consent_migration_min_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_consent_migration_min_fields
      }
    );
  },
  get hydra_oauth2_authentication_consent_migration_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_authentication_consent_migration,
              false
            ),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_authentication_consent_migration_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_consent_migration_mutation_response
      }
    );
  },
  get hydra_oauth2_authentication_consent_migration_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_consent_migration_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_consent_migration_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_consent_migration_bool_exp,
            true
          );
        }
      },
      { name: "hydra_oauth2_authentication_consent_migration_on_conflict" }
    );
  },
  get hydra_oauth2_authentication_consent_migration_order_by() {
    return new InputNode(
      {
        get applied_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_consent_migration_order_by" }
    );
  },
  get hydra_oauth2_authentication_consent_migration_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_oauth2_authentication_consent_migration_pk_columns_input" }
    );
  },
  get hydra_oauth2_authentication_consent_migration_select_column() {
    return new EnumNode({
      name: "hydra_oauth2_authentication_consent_migration_select_column"
    });
  },
  get hydra_oauth2_authentication_consent_migration_set_input() {
    return new InputNode(
      {
        get applied_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get id() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_authentication_consent_migration_set_input" }
    );
  },
  get hydra_oauth2_authentication_consent_migration_update_column() {
    return new EnumNode({
      name: "hydra_oauth2_authentication_consent_migration_update_column"
    });
  },
  get hydra_oauth2_authentication_request() {
    return new ObjectNode(
      {
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get challenge() {
          return new FieldNode(schema.String, undefined, false);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get csrf() {
          return new FieldNode(schema.String, undefined, false);
        },
        get hydra_client() {
          return new FieldNode(schema.hydra_client, undefined, false);
        },
        get hydra_oauth2_authentication_request_handleds() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_authentication_request_handled,
              false
            ),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_request_handleds_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_session() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session,
            undefined,
            false
          );
        },
        get hydra_oauth2_consent_requests() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_consent_request, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_requests_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get login_session_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get oidc_context() {
          return new FieldNode(schema.String, undefined, false);
        },
        get request_url() {
          return new FieldNode(schema.String, undefined, false);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get requested_at_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get skip() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, false);
        },
        get verifier() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_authentication_request",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request
      }
    );
  },
  get hydra_oauth2_authentication_request_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_authentication_request, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_authentication_request_aggregate",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_aggregate
      }
    );
  },
  get hydra_oauth2_authentication_request_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_authentication_request_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_aggregate_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_aggregate_order_by() {
    return new InputNode(
      {
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_min_order_by,
            true
          );
        }
      },
      { name: "hydra_oauth2_authentication_request_aggregate_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_request_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_on_conflict,
            true
          );
        }
      },
      { name: "hydra_oauth2_authentication_request_arr_rel_insert_input" }
    );
  },
  get hydra_oauth2_authentication_request_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_request_bool_exp,
              true
            ),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_request_bool_exp,
              true
            ),
            true
          );
        },
        get authenticated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get challenge() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get client_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get csrf() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_bool_exp, true);
        },
        get hydra_oauth2_authentication_request_handleds() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_bool_exp,
            true
          );
        },
        get hydra_oauth2_authentication_session() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_session_bool_exp,
            true
          );
        },
        get hydra_oauth2_consent_requests() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_bool_exp,
            true
          );
        },
        get login_session_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get oidc_context() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get request_url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get requested_at_audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get requested_scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get skip() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get subject() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get verifier() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_bool_exp" }
    );
  },
  get hydra_oauth2_authentication_request_constraint() {
    return new EnumNode({
      name: "hydra_oauth2_authentication_request_constraint"
    });
  },
  get hydra_oauth2_authentication_request_handled() {
    return new ObjectNode(
      {
        get acr() {
          return new FieldNode(schema.String, undefined, false);
        },
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get challenge() {
          return new FieldNode(schema.String, undefined, false);
        },
        get context() {
          return new FieldNode(schema.String, undefined, false);
        },
        get error() {
          return new FieldNode(schema.String, undefined, false);
        },
        get forced_subject_identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get hydra_oauth2_authentication_request() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request,
            undefined,
            false
          );
        },
        get remember() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get remember_for() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, false);
        },
        get was_used() {
          return new FieldNode(schema.Boolean, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_authentication_request_handled,
              false
            ),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_aggregate",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled_aggregate
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled_aggregate_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_variance_order_by,
            true
          );
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_aggregate_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_handled_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_request_handled_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_on_conflict,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_arr_rel_insert_input"
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_avg_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_avg_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled_avg_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_avg_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_avg_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_handled_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_request_handled_bool_exp,
              true
            ),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_request_handled_bool_exp,
              true
            ),
            true
          );
        },
        get acr() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get authenticated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get challenge() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get context() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get error() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get forced_subject_identifier() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hydra_oauth2_authentication_request() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_bool_exp,
            true
          );
        },
        get remember() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get remember_for() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get subject() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get was_used() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_bool_exp" }
    );
  },
  get hydra_oauth2_authentication_request_handled_constraint() {
    return new EnumNode({
      name: "hydra_oauth2_authentication_request_handled_constraint"
    });
  },
  get hydra_oauth2_authentication_request_handled_inc_input() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_inc_input" }
    );
  },
  get hydra_oauth2_authentication_request_handled_insert_input() {
    return new InputNode(
      {
        get acr() {
          return new InputNodeField(schema.String, true);
        },
        get authenticated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get challenge() {
          return new InputNodeField(schema.String, true);
        },
        get context() {
          return new InputNodeField(schema.String, true);
        },
        get error() {
          return new InputNodeField(schema.String, true);
        },
        get forced_subject_identifier() {
          return new InputNodeField(schema.String, true);
        },
        get hydra_oauth2_authentication_request() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_obj_rel_insert_input,
            true
          );
        },
        get remember() {
          return new InputNodeField(schema.Boolean, true);
        },
        get remember_for() {
          return new InputNodeField(schema.Int, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        },
        get was_used() {
          return new InputNodeField(schema.Boolean, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_insert_input" }
    );
  },
  get hydra_oauth2_authentication_request_handled_max_fields() {
    return new ObjectNode(
      {
        get acr() {
          return new FieldNode(schema.String, undefined, true);
        },
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get challenge() {
          return new FieldNode(schema.String, undefined, true);
        },
        get context() {
          return new FieldNode(schema.String, undefined, true);
        },
        get error() {
          return new FieldNode(schema.String, undefined, true);
        },
        get forced_subject_identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get remember_for() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_max_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled_max_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_max_order_by() {
    return new InputNode(
      {
        get acr() {
          return new InputNodeField(schema.order_by, true);
        },
        get authenticated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get context() {
          return new InputNodeField(schema.order_by, true);
        },
        get error() {
          return new InputNodeField(schema.order_by, true);
        },
        get forced_subject_identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_max_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_handled_min_fields() {
    return new ObjectNode(
      {
        get acr() {
          return new FieldNode(schema.String, undefined, true);
        },
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get challenge() {
          return new FieldNode(schema.String, undefined, true);
        },
        get context() {
          return new FieldNode(schema.String, undefined, true);
        },
        get error() {
          return new FieldNode(schema.String, undefined, true);
        },
        get forced_subject_identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get remember_for() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_min_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled_min_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_min_order_by() {
    return new InputNode(
      {
        get acr() {
          return new InputNodeField(schema.order_by, true);
        },
        get authenticated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get context() {
          return new InputNodeField(schema.order_by, true);
        },
        get error() {
          return new InputNodeField(schema.order_by, true);
        },
        get forced_subject_identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_min_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_handled_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_authentication_request_handled,
              false
            ),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled_mutation_response
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_request_handled_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_bool_exp,
            true
          );
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_on_conflict" }
    );
  },
  get hydra_oauth2_authentication_request_handled_order_by() {
    return new InputNode(
      {
        get acr() {
          return new InputNodeField(schema.order_by, true);
        },
        get authenticated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get context() {
          return new InputNodeField(schema.order_by, true);
        },
        get error() {
          return new InputNodeField(schema.order_by, true);
        },
        get forced_subject_identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get hydra_oauth2_authentication_request() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_order_by,
            true
          );
        },
        get remember() {
          return new InputNodeField(schema.order_by, true);
        },
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        },
        get was_used() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_handled_pk_columns_input() {
    return new InputNode(
      {
        get challenge() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_pk_columns_input" }
    );
  },
  get hydra_oauth2_authentication_request_handled_select_column() {
    return new EnumNode({
      name: "hydra_oauth2_authentication_request_handled_select_column"
    });
  },
  get hydra_oauth2_authentication_request_handled_set_input() {
    return new InputNode(
      {
        get acr() {
          return new InputNodeField(schema.String, true);
        },
        get authenticated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get challenge() {
          return new InputNodeField(schema.String, true);
        },
        get context() {
          return new InputNodeField(schema.String, true);
        },
        get error() {
          return new InputNodeField(schema.String, true);
        },
        get forced_subject_identifier() {
          return new InputNodeField(schema.String, true);
        },
        get remember() {
          return new InputNodeField(schema.Boolean, true);
        },
        get remember_for() {
          return new InputNodeField(schema.Int, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        },
        get was_used() {
          return new InputNodeField(schema.Boolean, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_set_input" }
    );
  },
  get hydra_oauth2_authentication_request_handled_stddev_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_stddev_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled_stddev_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_stddev_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_stddev_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_handled_stddev_pop_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled_stddev_pop_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_stddev_pop_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_stddev_pop_order_by"
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_stddev_samp_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled_stddev_samp_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_stddev_samp_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_stddev_samp_order_by"
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_sum_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_sum_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled_sum_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_sum_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_sum_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_handled_update_column() {
    return new EnumNode({
      name: "hydra_oauth2_authentication_request_handled_update_column"
    });
  },
  get hydra_oauth2_authentication_request_handled_var_pop_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_var_pop_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled_var_pop_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_var_pop_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_var_pop_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_handled_var_samp_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_var_samp_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled_var_samp_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_var_samp_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_var_samp_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_handled_variance_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_handled_variance_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_handled_variance_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_handled_variance_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_handled_variance_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_insert_input() {
    return new InputNode(
      {
        get authenticated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get challenge() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get csrf() {
          return new InputNodeField(schema.String, true);
        },
        get hydra_client() {
          return new InputNodeField(
            schema.hydra_client_obj_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_authentication_request_handleds() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_authentication_session() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_session_obj_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_consent_requests() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_arr_rel_insert_input,
            true
          );
        },
        get login_session_id() {
          return new InputNodeField(schema.String, true);
        },
        get oidc_context() {
          return new InputNodeField(schema.String, true);
        },
        get request_url() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_at_audience() {
          return new InputNodeField(schema.String, true);
        },
        get requested_scope() {
          return new InputNodeField(schema.String, true);
        },
        get skip() {
          return new InputNodeField(schema.Boolean, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        },
        get verifier() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_insert_input" }
    );
  },
  get hydra_oauth2_authentication_request_max_fields() {
    return new ObjectNode(
      {
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get challenge() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get csrf() {
          return new FieldNode(schema.String, undefined, true);
        },
        get login_session_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get oidc_context() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_at_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        },
        get verifier() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_max_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_max_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_max_order_by() {
    return new InputNode(
      {
        get authenticated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get csrf() {
          return new InputNodeField(schema.order_by, true);
        },
        get login_session_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get oidc_context() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        },
        get verifier() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_max_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_min_fields() {
    return new ObjectNode(
      {
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get challenge() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get csrf() {
          return new FieldNode(schema.String, undefined, true);
        },
        get login_session_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get oidc_context() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_at_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        },
        get verifier() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_request_min_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_min_fields
      }
    );
  },
  get hydra_oauth2_authentication_request_min_order_by() {
    return new InputNode(
      {
        get authenticated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get csrf() {
          return new InputNodeField(schema.order_by, true);
        },
        get login_session_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get oidc_context() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        },
        get verifier() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_min_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_authentication_request, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_authentication_request_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_request_mutation_response
      }
    );
  },
  get hydra_oauth2_authentication_request_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_on_conflict,
            true
          );
        }
      },
      { name: "hydra_oauth2_authentication_request_obj_rel_insert_input" }
    );
  },
  get hydra_oauth2_authentication_request_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_request_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_bool_exp,
            true
          );
        }
      },
      { name: "hydra_oauth2_authentication_request_on_conflict" }
    );
  },
  get hydra_oauth2_authentication_request_order_by() {
    return new InputNode(
      {
        get authenticated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get csrf() {
          return new InputNodeField(schema.order_by, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_order_by, true);
        },
        get hydra_oauth2_authentication_request_handleds_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_handled_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_authentication_session() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_session_order_by,
            true
          );
        },
        get hydra_oauth2_consent_requests_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_aggregate_order_by,
            true
          );
        },
        get login_session_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get oidc_context() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get skip() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        },
        get verifier() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_order_by" }
    );
  },
  get hydra_oauth2_authentication_request_pk_columns_input() {
    return new InputNode(
      {
        get challenge() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_oauth2_authentication_request_pk_columns_input" }
    );
  },
  get hydra_oauth2_authentication_request_select_column() {
    return new EnumNode({
      name: "hydra_oauth2_authentication_request_select_column"
    });
  },
  get hydra_oauth2_authentication_request_set_input() {
    return new InputNode(
      {
        get authenticated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get challenge() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get csrf() {
          return new InputNodeField(schema.String, true);
        },
        get login_session_id() {
          return new InputNodeField(schema.String, true);
        },
        get oidc_context() {
          return new InputNodeField(schema.String, true);
        },
        get request_url() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_at_audience() {
          return new InputNodeField(schema.String, true);
        },
        get requested_scope() {
          return new InputNodeField(schema.String, true);
        },
        get skip() {
          return new InputNodeField(schema.Boolean, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        },
        get verifier() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_authentication_request_set_input" }
    );
  },
  get hydra_oauth2_authentication_request_update_column() {
    return new EnumNode({
      name: "hydra_oauth2_authentication_request_update_column"
    });
  },
  get hydra_oauth2_authentication_session() {
    return new ObjectNode(
      {
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get hydra_oauth2_authentication_requests() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_authentication_request, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_requests_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_requests() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_consent_request, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_requests_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get remember() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_authentication_session",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_session
      }
    );
  },
  get hydra_oauth2_authentication_session_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_authentication_session, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_authentication_session_aggregate",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_session_aggregate
      }
    );
  },
  get hydra_oauth2_authentication_session_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_session_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_authentication_session_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_session_aggregate_fields
      }
    );
  },
  get hydra_oauth2_authentication_session_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_session_bool_exp,
              true
            ),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_session_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_session_bool_exp,
              true
            ),
            true
          );
        },
        get authenticated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get hydra_oauth2_authentication_requests() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_bool_exp,
            true
          );
        },
        get hydra_oauth2_consent_requests() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_bool_exp,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get remember() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get subject() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_authentication_session_bool_exp" }
    );
  },
  get hydra_oauth2_authentication_session_constraint() {
    return new EnumNode({
      name: "hydra_oauth2_authentication_session_constraint"
    });
  },
  get hydra_oauth2_authentication_session_insert_input() {
    return new InputNode(
      {
        get authenticated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get hydra_oauth2_authentication_requests() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_consent_requests() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_arr_rel_insert_input,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.String, true);
        },
        get remember() {
          return new InputNodeField(schema.Boolean, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_authentication_session_insert_input" }
    );
  },
  get hydra_oauth2_authentication_session_max_fields() {
    return new ObjectNode(
      {
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_session_max_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_session_max_fields
      }
    );
  },
  get hydra_oauth2_authentication_session_min_fields() {
    return new ObjectNode(
      {
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_authentication_session_min_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_session_min_fields
      }
    );
  },
  get hydra_oauth2_authentication_session_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_authentication_session, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_authentication_session_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_authentication_session_mutation_response
      }
    );
  },
  get hydra_oauth2_authentication_session_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_session_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_session_on_conflict,
            true
          );
        }
      },
      { name: "hydra_oauth2_authentication_session_obj_rel_insert_input" }
    );
  },
  get hydra_oauth2_authentication_session_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_session_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_authentication_session_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_session_bool_exp,
            true
          );
        }
      },
      { name: "hydra_oauth2_authentication_session_on_conflict" }
    );
  },
  get hydra_oauth2_authentication_session_order_by() {
    return new InputNode(
      {
        get authenticated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get hydra_oauth2_authentication_requests_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_consent_requests_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_aggregate_order_by,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get remember() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_authentication_session_order_by" }
    );
  },
  get hydra_oauth2_authentication_session_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_oauth2_authentication_session_pk_columns_input" }
    );
  },
  get hydra_oauth2_authentication_session_select_column() {
    return new EnumNode({
      name: "hydra_oauth2_authentication_session_select_column"
    });
  },
  get hydra_oauth2_authentication_session_set_input() {
    return new InputNode(
      {
        get authenticated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.String, true);
        },
        get remember() {
          return new InputNodeField(schema.Boolean, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_authentication_session_set_input" }
    );
  },
  get hydra_oauth2_authentication_session_update_column() {
    return new EnumNode({
      name: "hydra_oauth2_authentication_session_update_column"
    });
  },
  get hydra_oauth2_code() {
    return new ObjectNode(
      {
        get active() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, false);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get hydra_client() {
          return new FieldNode(schema.hydra_client, undefined, false);
        },
        get hydra_oauth2_consent_request_handled() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled,
            undefined,
            false
          );
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, false);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, false);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_code",
        extension: ((extensions as any) || {}).hydra_oauth2_code
      }
    );
  },
  get hydra_oauth2_code_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_code_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_code, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_code_aggregate",
        extension: ((extensions as any) || {}).hydra_oauth2_code_aggregate
      }
    );
  },
  get hydra_oauth2_code_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_code_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_code_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_code_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_code_aggregate_fields
      }
    );
  },
  get hydra_oauth2_code_aggregate_order_by() {
    return new InputNode(
      {
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.hydra_oauth2_code_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.hydra_oauth2_code_min_order_by,
            true
          );
        }
      },
      { name: "hydra_oauth2_code_aggregate_order_by" }
    );
  },
  get hydra_oauth2_code_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_code_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.hydra_oauth2_code_on_conflict, true);
        }
      },
      { name: "hydra_oauth2_code_arr_rel_insert_input" }
    );
  },
  get hydra_oauth2_code_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_code_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.hydra_oauth2_code_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_code_bool_exp, true),
            true
          );
        },
        get active() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get client_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get form_data() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_bool_exp, true);
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_bool_exp,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get session_data() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get signature() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get subject() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_code_bool_exp" }
    );
  },
  get hydra_oauth2_code_constraint() {
    return new EnumNode({ name: "hydra_oauth2_code_constraint" });
  },
  get hydra_oauth2_code_insert_input() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.Boolean, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get form_data() {
          return new InputNodeField(schema.String, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String, true);
        },
        get hydra_client() {
          return new InputNodeField(
            schema.hydra_client_obj_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_obj_rel_insert_input,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String, true);
        },
        get scope() {
          return new InputNodeField(schema.String, true);
        },
        get session_data() {
          return new InputNodeField(schema.String, true);
        },
        get signature() {
          return new InputNodeField(schema.String, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_code_insert_input" }
    );
  },
  get hydra_oauth2_code_max_fields() {
    return new ObjectNode(
      {
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_code_max_fields",
        extension: ((extensions as any) || {}).hydra_oauth2_code_max_fields
      }
    );
  },
  get hydra_oauth2_code_max_order_by() {
    return new InputNode(
      {
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_code_max_order_by" }
    );
  },
  get hydra_oauth2_code_min_fields() {
    return new ObjectNode(
      {
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_code_min_fields",
        extension: ((extensions as any) || {}).hydra_oauth2_code_min_fields
      }
    );
  },
  get hydra_oauth2_code_min_order_by() {
    return new InputNode(
      {
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_code_min_order_by" }
    );
  },
  get hydra_oauth2_code_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_code, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_code_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_code_mutation_response
      }
    );
  },
  get hydra_oauth2_code_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.hydra_oauth2_code_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_code_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.hydra_oauth2_code_bool_exp, true);
        }
      },
      { name: "hydra_oauth2_code_on_conflict" }
    );
  },
  get hydra_oauth2_code_order_by() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_order_by, true);
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_order_by,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_code_order_by" }
    );
  },
  get hydra_oauth2_code_pk_columns_input() {
    return new InputNode(
      {
        get signature() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_oauth2_code_pk_columns_input" }
    );
  },
  get hydra_oauth2_code_select_column() {
    return new EnumNode({ name: "hydra_oauth2_code_select_column" });
  },
  get hydra_oauth2_code_set_input() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.Boolean, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get form_data() {
          return new InputNodeField(schema.String, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String, true);
        },
        get request_id() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String, true);
        },
        get scope() {
          return new InputNodeField(schema.String, true);
        },
        get session_data() {
          return new InputNodeField(schema.String, true);
        },
        get signature() {
          return new InputNodeField(schema.String, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_code_set_input" }
    );
  },
  get hydra_oauth2_code_update_column() {
    return new EnumNode({ name: "hydra_oauth2_code_update_column" });
  },
  get hydra_oauth2_consent_request() {
    return new ObjectNode(
      {
        get acr() {
          return new FieldNode(schema.String, undefined, true);
        },
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get challenge() {
          return new FieldNode(schema.String, undefined, false);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get context() {
          return new FieldNode(schema.String, undefined, false);
        },
        get csrf() {
          return new FieldNode(schema.String, undefined, false);
        },
        get forced_subject_identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get hydra_client() {
          return new FieldNode(schema.hydra_client, undefined, false);
        },
        get hydra_oauth2_authentication_request() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request,
            undefined,
            false
          );
        },
        get hydra_oauth2_authentication_session() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session,
            undefined,
            false
          );
        },
        get hydra_oauth2_consent_request_handleds() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_consent_request_handled, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_request_handleds_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get login_challenge() {
          return new FieldNode(schema.String, undefined, true);
        },
        get login_session_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get oidc_context() {
          return new FieldNode(schema.String, undefined, false);
        },
        get request_url() {
          return new FieldNode(schema.String, undefined, false);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get requested_at_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get skip() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, false);
        },
        get verifier() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_consent_request",
        extension: ((extensions as any) || {}).hydra_oauth2_consent_request
      }
    );
  },
  get hydra_oauth2_consent_request_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_consent_request, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_consent_request_aggregate",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_aggregate
      }
    );
  },
  get hydra_oauth2_consent_request_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_consent_request_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_aggregate_fields
      }
    );
  },
  get hydra_oauth2_consent_request_aggregate_order_by() {
    return new InputNode(
      {
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_min_order_by,
            true
          );
        }
      },
      { name: "hydra_oauth2_consent_request_aggregate_order_by" }
    );
  },
  get hydra_oauth2_consent_request_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_consent_request_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_on_conflict,
            true
          );
        }
      },
      { name: "hydra_oauth2_consent_request_arr_rel_insert_input" }
    );
  },
  get hydra_oauth2_consent_request_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_consent_request_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_consent_request_bool_exp, true),
            true
          );
        },
        get acr() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get authenticated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get challenge() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get client_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get context() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get csrf() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get forced_subject_identifier() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_bool_exp, true);
        },
        get hydra_oauth2_authentication_request() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_bool_exp,
            true
          );
        },
        get hydra_oauth2_authentication_session() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_session_bool_exp,
            true
          );
        },
        get hydra_oauth2_consent_request_handleds() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_bool_exp,
            true
          );
        },
        get login_challenge() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get login_session_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get oidc_context() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get request_url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get requested_at_audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get requested_scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get skip() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get subject() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get verifier() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_consent_request_bool_exp" }
    );
  },
  get hydra_oauth2_consent_request_constraint() {
    return new EnumNode({ name: "hydra_oauth2_consent_request_constraint" });
  },
  get hydra_oauth2_consent_request_handled() {
    return new ObjectNode(
      {
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get challenge() {
          return new FieldNode(schema.String, undefined, false);
        },
        get error() {
          return new FieldNode(schema.String, undefined, false);
        },
        get granted_at_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get hydra_oauth2_accesses() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_access, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_accesses_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_access_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_codes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_code, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_codes_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_code_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_request() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request,
            undefined,
            false
          );
        },
        get hydra_oauth2_oidcs() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_oidc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_oidcs_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_oidc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_pkces() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_pkce, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_pkces_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_pkce_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_refreshes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_refresh, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_refresh_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_refresh_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_refreshes_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_refresh_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_refresh_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_refresh_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get remember() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get remember_for() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get session_access_token() {
          return new FieldNode(schema.String, undefined, false);
        },
        get session_id_token() {
          return new FieldNode(schema.String, undefined, false);
        },
        get was_used() {
          return new FieldNode(schema.Boolean, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled
      }
    );
  },
  get hydra_oauth2_consent_request_handled_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_consent_request_handled, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled_aggregate",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled_aggregate
      }
    );
  },
  get hydra_oauth2_consent_request_handled_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled_aggregate_fields
      }
    );
  },
  get hydra_oauth2_consent_request_handled_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_variance_order_by,
            true
          );
        }
      },
      { name: "hydra_oauth2_consent_request_handled_aggregate_order_by" }
    );
  },
  get hydra_oauth2_consent_request_handled_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_consent_request_handled_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_on_conflict,
            true
          );
        }
      },
      { name: "hydra_oauth2_consent_request_handled_arr_rel_insert_input" }
    );
  },
  get hydra_oauth2_consent_request_handled_avg_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled_avg_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled_avg_fields
      }
    );
  },
  get hydra_oauth2_consent_request_handled_avg_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_avg_order_by" }
    );
  },
  get hydra_oauth2_consent_request_handled_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_consent_request_handled_bool_exp,
              true
            ),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_consent_request_handled_bool_exp,
              true
            ),
            true
          );
        },
        get authenticated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get challenge() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get error() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get granted_at_audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hydra_oauth2_accesses() {
          return new InputNodeField(schema.hydra_oauth2_access_bool_exp, true);
        },
        get hydra_oauth2_codes() {
          return new InputNodeField(schema.hydra_oauth2_code_bool_exp, true);
        },
        get hydra_oauth2_consent_request() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_bool_exp,
            true
          );
        },
        get hydra_oauth2_oidcs() {
          return new InputNodeField(schema.hydra_oauth2_oidc_bool_exp, true);
        },
        get hydra_oauth2_pkces() {
          return new InputNodeField(schema.hydra_oauth2_pkce_bool_exp, true);
        },
        get hydra_oauth2_refreshes() {
          return new InputNodeField(schema.hydra_oauth2_refresh_bool_exp, true);
        },
        get remember() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get remember_for() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get session_access_token() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get session_id_token() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get was_used() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_bool_exp" }
    );
  },
  get hydra_oauth2_consent_request_handled_constraint() {
    return new EnumNode({
      name: "hydra_oauth2_consent_request_handled_constraint"
    });
  },
  get hydra_oauth2_consent_request_handled_inc_input() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_inc_input" }
    );
  },
  get hydra_oauth2_consent_request_handled_insert_input() {
    return new InputNode(
      {
        get authenticated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get challenge() {
          return new InputNodeField(schema.String, true);
        },
        get error() {
          return new InputNodeField(schema.String, true);
        },
        get granted_at_audience() {
          return new InputNodeField(schema.String, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String, true);
        },
        get hydra_oauth2_accesses() {
          return new InputNodeField(
            schema.hydra_oauth2_access_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_codes() {
          return new InputNodeField(
            schema.hydra_oauth2_code_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_consent_request() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_obj_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_oidcs() {
          return new InputNodeField(
            schema.hydra_oauth2_oidc_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_pkces() {
          return new InputNodeField(
            schema.hydra_oauth2_pkce_arr_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_refreshes() {
          return new InputNodeField(
            schema.hydra_oauth2_refresh_arr_rel_insert_input,
            true
          );
        },
        get remember() {
          return new InputNodeField(schema.Boolean, true);
        },
        get remember_for() {
          return new InputNodeField(schema.Int, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get session_access_token() {
          return new InputNodeField(schema.String, true);
        },
        get session_id_token() {
          return new InputNodeField(schema.String, true);
        },
        get was_used() {
          return new InputNodeField(schema.Boolean, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_insert_input" }
    );
  },
  get hydra_oauth2_consent_request_handled_max_fields() {
    return new ObjectNode(
      {
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get challenge() {
          return new FieldNode(schema.String, undefined, true);
        },
        get error() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_at_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get remember_for() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get session_access_token() {
          return new FieldNode(schema.String, undefined, true);
        },
        get session_id_token() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled_max_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled_max_fields
      }
    );
  },
  get hydra_oauth2_consent_request_handled_max_order_by() {
    return new InputNode(
      {
        get authenticated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get error() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_at_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_access_token() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_id_token() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_max_order_by" }
    );
  },
  get hydra_oauth2_consent_request_handled_min_fields() {
    return new ObjectNode(
      {
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get challenge() {
          return new FieldNode(schema.String, undefined, true);
        },
        get error() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_at_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get remember_for() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get session_access_token() {
          return new FieldNode(schema.String, undefined, true);
        },
        get session_id_token() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled_min_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled_min_fields
      }
    );
  },
  get hydra_oauth2_consent_request_handled_min_order_by() {
    return new InputNode(
      {
        get authenticated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get error() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_at_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_access_token() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_id_token() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_min_order_by" }
    );
  },
  get hydra_oauth2_consent_request_handled_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_consent_request_handled, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled_mutation_response
      }
    );
  },
  get hydra_oauth2_consent_request_handled_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_on_conflict,
            true
          );
        }
      },
      { name: "hydra_oauth2_consent_request_handled_obj_rel_insert_input" }
    );
  },
  get hydra_oauth2_consent_request_handled_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_consent_request_handled_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_bool_exp,
            true
          );
        }
      },
      { name: "hydra_oauth2_consent_request_handled_on_conflict" }
    );
  },
  get hydra_oauth2_consent_request_handled_order_by() {
    return new InputNode(
      {
        get authenticated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get error() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_at_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get hydra_oauth2_accesses_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_access_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_codes_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_code_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_consent_request() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_order_by,
            true
          );
        },
        get hydra_oauth2_oidcs_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_oidc_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_pkces_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_pkce_aggregate_order_by,
            true
          );
        },
        get hydra_oauth2_refreshes_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_refresh_aggregate_order_by,
            true
          );
        },
        get remember() {
          return new InputNodeField(schema.order_by, true);
        },
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_access_token() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_id_token() {
          return new InputNodeField(schema.order_by, true);
        },
        get was_used() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_order_by" }
    );
  },
  get hydra_oauth2_consent_request_handled_pk_columns_input() {
    return new InputNode(
      {
        get challenge() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_pk_columns_input" }
    );
  },
  get hydra_oauth2_consent_request_handled_select_column() {
    return new EnumNode({
      name: "hydra_oauth2_consent_request_handled_select_column"
    });
  },
  get hydra_oauth2_consent_request_handled_set_input() {
    return new InputNode(
      {
        get authenticated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get challenge() {
          return new InputNodeField(schema.String, true);
        },
        get error() {
          return new InputNodeField(schema.String, true);
        },
        get granted_at_audience() {
          return new InputNodeField(schema.String, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String, true);
        },
        get remember() {
          return new InputNodeField(schema.Boolean, true);
        },
        get remember_for() {
          return new InputNodeField(schema.Int, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get session_access_token() {
          return new InputNodeField(schema.String, true);
        },
        get session_id_token() {
          return new InputNodeField(schema.String, true);
        },
        get was_used() {
          return new InputNodeField(schema.Boolean, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_set_input" }
    );
  },
  get hydra_oauth2_consent_request_handled_stddev_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled_stddev_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled_stddev_fields
      }
    );
  },
  get hydra_oauth2_consent_request_handled_stddev_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_stddev_order_by" }
    );
  },
  get hydra_oauth2_consent_request_handled_stddev_pop_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled_stddev_pop_fields
      }
    );
  },
  get hydra_oauth2_consent_request_handled_stddev_pop_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_stddev_pop_order_by" }
    );
  },
  get hydra_oauth2_consent_request_handled_stddev_samp_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled_stddev_samp_fields
      }
    );
  },
  get hydra_oauth2_consent_request_handled_stddev_samp_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_stddev_samp_order_by" }
    );
  },
  get hydra_oauth2_consent_request_handled_sum_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled_sum_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled_sum_fields
      }
    );
  },
  get hydra_oauth2_consent_request_handled_sum_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_sum_order_by" }
    );
  },
  get hydra_oauth2_consent_request_handled_update_column() {
    return new EnumNode({
      name: "hydra_oauth2_consent_request_handled_update_column"
    });
  },
  get hydra_oauth2_consent_request_handled_var_pop_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled_var_pop_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled_var_pop_fields
      }
    );
  },
  get hydra_oauth2_consent_request_handled_var_pop_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_var_pop_order_by" }
    );
  },
  get hydra_oauth2_consent_request_handled_var_samp_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled_var_samp_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled_var_samp_fields
      }
    );
  },
  get hydra_oauth2_consent_request_handled_var_samp_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_var_samp_order_by" }
    );
  },
  get hydra_oauth2_consent_request_handled_variance_fields() {
    return new ObjectNode(
      {
        get remember_for() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_consent_request_handled_variance_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_handled_variance_fields
      }
    );
  },
  get hydra_oauth2_consent_request_handled_variance_order_by() {
    return new InputNode(
      {
        get remember_for() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_handled_variance_order_by" }
    );
  },
  get hydra_oauth2_consent_request_insert_input() {
    return new InputNode(
      {
        get acr() {
          return new InputNodeField(schema.String, true);
        },
        get authenticated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get challenge() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get context() {
          return new InputNodeField(schema.String, true);
        },
        get csrf() {
          return new InputNodeField(schema.String, true);
        },
        get forced_subject_identifier() {
          return new InputNodeField(schema.String, true);
        },
        get hydra_client() {
          return new InputNodeField(
            schema.hydra_client_obj_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_authentication_request() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_obj_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_authentication_session() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_session_obj_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_consent_request_handleds() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_arr_rel_insert_input,
            true
          );
        },
        get login_challenge() {
          return new InputNodeField(schema.String, true);
        },
        get login_session_id() {
          return new InputNodeField(schema.String, true);
        },
        get oidc_context() {
          return new InputNodeField(schema.String, true);
        },
        get request_url() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_at_audience() {
          return new InputNodeField(schema.String, true);
        },
        get requested_scope() {
          return new InputNodeField(schema.String, true);
        },
        get skip() {
          return new InputNodeField(schema.Boolean, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        },
        get verifier() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_consent_request_insert_input" }
    );
  },
  get hydra_oauth2_consent_request_max_fields() {
    return new ObjectNode(
      {
        get acr() {
          return new FieldNode(schema.String, undefined, true);
        },
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get challenge() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get context() {
          return new FieldNode(schema.String, undefined, true);
        },
        get csrf() {
          return new FieldNode(schema.String, undefined, true);
        },
        get forced_subject_identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get login_challenge() {
          return new FieldNode(schema.String, undefined, true);
        },
        get login_session_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get oidc_context() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_at_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        },
        get verifier() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_consent_request_max_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_max_fields
      }
    );
  },
  get hydra_oauth2_consent_request_max_order_by() {
    return new InputNode(
      {
        get acr() {
          return new InputNodeField(schema.order_by, true);
        },
        get authenticated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get context() {
          return new InputNodeField(schema.order_by, true);
        },
        get csrf() {
          return new InputNodeField(schema.order_by, true);
        },
        get forced_subject_identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get login_challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get login_session_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get oidc_context() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        },
        get verifier() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_max_order_by" }
    );
  },
  get hydra_oauth2_consent_request_min_fields() {
    return new ObjectNode(
      {
        get acr() {
          return new FieldNode(schema.String, undefined, true);
        },
        get authenticated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get challenge() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get context() {
          return new FieldNode(schema.String, undefined, true);
        },
        get csrf() {
          return new FieldNode(schema.String, undefined, true);
        },
        get forced_subject_identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get login_challenge() {
          return new FieldNode(schema.String, undefined, true);
        },
        get login_session_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get oidc_context() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_at_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        },
        get verifier() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_consent_request_min_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_min_fields
      }
    );
  },
  get hydra_oauth2_consent_request_min_order_by() {
    return new InputNode(
      {
        get acr() {
          return new InputNodeField(schema.order_by, true);
        },
        get authenticated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get context() {
          return new InputNodeField(schema.order_by, true);
        },
        get csrf() {
          return new InputNodeField(schema.order_by, true);
        },
        get forced_subject_identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get login_challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get login_session_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get oidc_context() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        },
        get verifier() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_min_order_by" }
    );
  },
  get hydra_oauth2_consent_request_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_consent_request, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_consent_request_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_consent_request_mutation_response
      }
    );
  },
  get hydra_oauth2_consent_request_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_on_conflict,
            true
          );
        }
      },
      { name: "hydra_oauth2_consent_request_obj_rel_insert_input" }
    );
  },
  get hydra_oauth2_consent_request_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_consent_request_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_bool_exp,
            true
          );
        }
      },
      { name: "hydra_oauth2_consent_request_on_conflict" }
    );
  },
  get hydra_oauth2_consent_request_order_by() {
    return new InputNode(
      {
        get acr() {
          return new InputNodeField(schema.order_by, true);
        },
        get authenticated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get context() {
          return new InputNodeField(schema.order_by, true);
        },
        get csrf() {
          return new InputNodeField(schema.order_by, true);
        },
        get forced_subject_identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_order_by, true);
        },
        get hydra_oauth2_authentication_request() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_request_order_by,
            true
          );
        },
        get hydra_oauth2_authentication_session() {
          return new InputNodeField(
            schema.hydra_oauth2_authentication_session_order_by,
            true
          );
        },
        get hydra_oauth2_consent_request_handleds_aggregate() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_aggregate_order_by,
            true
          );
        },
        get login_challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get login_session_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get oidc_context() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get skip() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        },
        get verifier() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_consent_request_order_by" }
    );
  },
  get hydra_oauth2_consent_request_pk_columns_input() {
    return new InputNode(
      {
        get challenge() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_oauth2_consent_request_pk_columns_input" }
    );
  },
  get hydra_oauth2_consent_request_select_column() {
    return new EnumNode({ name: "hydra_oauth2_consent_request_select_column" });
  },
  get hydra_oauth2_consent_request_set_input() {
    return new InputNode(
      {
        get acr() {
          return new InputNodeField(schema.String, true);
        },
        get authenticated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get challenge() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get context() {
          return new InputNodeField(schema.String, true);
        },
        get csrf() {
          return new InputNodeField(schema.String, true);
        },
        get forced_subject_identifier() {
          return new InputNodeField(schema.String, true);
        },
        get login_challenge() {
          return new InputNodeField(schema.String, true);
        },
        get login_session_id() {
          return new InputNodeField(schema.String, true);
        },
        get oidc_context() {
          return new InputNodeField(schema.String, true);
        },
        get request_url() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_at_audience() {
          return new InputNodeField(schema.String, true);
        },
        get requested_scope() {
          return new InputNodeField(schema.String, true);
        },
        get skip() {
          return new InputNodeField(schema.Boolean, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        },
        get verifier() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_consent_request_set_input" }
    );
  },
  get hydra_oauth2_consent_request_update_column() {
    return new EnumNode({ name: "hydra_oauth2_consent_request_update_column" });
  },
  get hydra_oauth2_logout_request() {
    return new ObjectNode(
      {
        get accepted() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get challenge() {
          return new FieldNode(schema.String, undefined, false);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get hydra_client() {
          return new FieldNode(schema.hydra_client, undefined, false);
        },
        get redir_url() {
          return new FieldNode(schema.String, undefined, false);
        },
        get rejected() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get request_url() {
          return new FieldNode(schema.String, undefined, false);
        },
        get rp_initiated() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get sid() {
          return new FieldNode(schema.String, undefined, false);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, false);
        },
        get verifier() {
          return new FieldNode(schema.String, undefined, false);
        },
        get was_used() {
          return new FieldNode(schema.Boolean, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_logout_request",
        extension: ((extensions as any) || {}).hydra_oauth2_logout_request
      }
    );
  },
  get hydra_oauth2_logout_request_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_logout_request, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_logout_request_aggregate",
        extension: ((extensions as any) || {})
          .hydra_oauth2_logout_request_aggregate
      }
    );
  },
  get hydra_oauth2_logout_request_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_logout_request_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_logout_request_aggregate_fields
      }
    );
  },
  get hydra_oauth2_logout_request_aggregate_order_by() {
    return new InputNode(
      {
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.hydra_oauth2_logout_request_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.hydra_oauth2_logout_request_min_order_by,
            true
          );
        }
      },
      { name: "hydra_oauth2_logout_request_aggregate_order_by" }
    );
  },
  get hydra_oauth2_logout_request_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_logout_request_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.hydra_oauth2_logout_request_on_conflict,
            true
          );
        }
      },
      { name: "hydra_oauth2_logout_request_arr_rel_insert_input" }
    );
  },
  get hydra_oauth2_logout_request_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_logout_request_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.hydra_oauth2_logout_request_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_logout_request_bool_exp, true),
            true
          );
        },
        get accepted() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get challenge() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get client_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_bool_exp, true);
        },
        get redir_url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get rejected() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get request_url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get rp_initiated() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get sid() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get subject() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get verifier() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get was_used() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_logout_request_bool_exp" }
    );
  },
  get hydra_oauth2_logout_request_constraint() {
    return new EnumNode({ name: "hydra_oauth2_logout_request_constraint" });
  },
  get hydra_oauth2_logout_request_insert_input() {
    return new InputNode(
      {
        get accepted() {
          return new InputNodeField(schema.Boolean, true);
        },
        get challenge() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get hydra_client() {
          return new InputNodeField(
            schema.hydra_client_obj_rel_insert_input,
            true
          );
        },
        get redir_url() {
          return new InputNodeField(schema.String, true);
        },
        get rejected() {
          return new InputNodeField(schema.Boolean, true);
        },
        get request_url() {
          return new InputNodeField(schema.String, true);
        },
        get rp_initiated() {
          return new InputNodeField(schema.Boolean, true);
        },
        get sid() {
          return new InputNodeField(schema.String, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        },
        get verifier() {
          return new InputNodeField(schema.String, true);
        },
        get was_used() {
          return new InputNodeField(schema.Boolean, true);
        }
      },
      { name: "hydra_oauth2_logout_request_insert_input" }
    );
  },
  get hydra_oauth2_logout_request_max_fields() {
    return new ObjectNode(
      {
        get challenge() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get redir_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        },
        get verifier() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_logout_request_max_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_logout_request_max_fields
      }
    );
  },
  get hydra_oauth2_logout_request_max_order_by() {
    return new InputNode(
      {
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get redir_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get sid() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        },
        get verifier() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_logout_request_max_order_by" }
    );
  },
  get hydra_oauth2_logout_request_min_fields() {
    return new ObjectNode(
      {
        get challenge() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get redir_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        },
        get verifier() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_logout_request_min_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_logout_request_min_fields
      }
    );
  },
  get hydra_oauth2_logout_request_min_order_by() {
    return new InputNode(
      {
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get redir_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get sid() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        },
        get verifier() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_logout_request_min_order_by" }
    );
  },
  get hydra_oauth2_logout_request_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_logout_request, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_logout_request_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_logout_request_mutation_response
      }
    );
  },
  get hydra_oauth2_logout_request_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.hydra_oauth2_logout_request_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_logout_request_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.hydra_oauth2_logout_request_bool_exp,
            true
          );
        }
      },
      { name: "hydra_oauth2_logout_request_on_conflict" }
    );
  },
  get hydra_oauth2_logout_request_order_by() {
    return new InputNode(
      {
        get accepted() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_order_by, true);
        },
        get redir_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get rejected() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get rp_initiated() {
          return new InputNodeField(schema.order_by, true);
        },
        get sid() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        },
        get verifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get was_used() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_logout_request_order_by" }
    );
  },
  get hydra_oauth2_logout_request_pk_columns_input() {
    return new InputNode(
      {
        get challenge() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_oauth2_logout_request_pk_columns_input" }
    );
  },
  get hydra_oauth2_logout_request_select_column() {
    return new EnumNode({ name: "hydra_oauth2_logout_request_select_column" });
  },
  get hydra_oauth2_logout_request_set_input() {
    return new InputNode(
      {
        get accepted() {
          return new InputNodeField(schema.Boolean, true);
        },
        get challenge() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get redir_url() {
          return new InputNodeField(schema.String, true);
        },
        get rejected() {
          return new InputNodeField(schema.Boolean, true);
        },
        get request_url() {
          return new InputNodeField(schema.String, true);
        },
        get rp_initiated() {
          return new InputNodeField(schema.Boolean, true);
        },
        get sid() {
          return new InputNodeField(schema.String, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        },
        get verifier() {
          return new InputNodeField(schema.String, true);
        },
        get was_used() {
          return new InputNodeField(schema.Boolean, true);
        }
      },
      { name: "hydra_oauth2_logout_request_set_input" }
    );
  },
  get hydra_oauth2_logout_request_update_column() {
    return new EnumNode({ name: "hydra_oauth2_logout_request_update_column" });
  },
  get hydra_oauth2_migration() {
    return new ObjectNode(
      {
        get applied_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_migration",
        extension: ((extensions as any) || {}).hydra_oauth2_migration
      }
    );
  },
  get hydra_oauth2_migration_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_migration_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_migration, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_migration_aggregate",
        extension: ((extensions as any) || {}).hydra_oauth2_migration_aggregate
      }
    );
  },
  get hydra_oauth2_migration_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_migration_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_migration_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_migration_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_migration_aggregate_fields
      }
    );
  },
  get hydra_oauth2_migration_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_migration_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.hydra_oauth2_migration_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_migration_bool_exp, true),
            true
          );
        },
        get applied_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_migration_bool_exp" }
    );
  },
  get hydra_oauth2_migration_constraint() {
    return new EnumNode({ name: "hydra_oauth2_migration_constraint" });
  },
  get hydra_oauth2_migration_insert_input() {
    return new InputNode(
      {
        get applied_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get id() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_migration_insert_input" }
    );
  },
  get hydra_oauth2_migration_max_fields() {
    return new ObjectNode(
      {
        get applied_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_migration_max_fields",
        extension: ((extensions as any) || {}).hydra_oauth2_migration_max_fields
      }
    );
  },
  get hydra_oauth2_migration_min_fields() {
    return new ObjectNode(
      {
        get applied_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_migration_min_fields",
        extension: ((extensions as any) || {}).hydra_oauth2_migration_min_fields
      }
    );
  },
  get hydra_oauth2_migration_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_migration, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_migration_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_migration_mutation_response
      }
    );
  },
  get hydra_oauth2_migration_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.hydra_oauth2_migration_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_migration_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.hydra_oauth2_migration_bool_exp,
            true
          );
        }
      },
      { name: "hydra_oauth2_migration_on_conflict" }
    );
  },
  get hydra_oauth2_migration_order_by() {
    return new InputNode(
      {
        get applied_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_migration_order_by" }
    );
  },
  get hydra_oauth2_migration_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_oauth2_migration_pk_columns_input" }
    );
  },
  get hydra_oauth2_migration_select_column() {
    return new EnumNode({ name: "hydra_oauth2_migration_select_column" });
  },
  get hydra_oauth2_migration_set_input() {
    return new InputNode(
      {
        get applied_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get id() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_migration_set_input" }
    );
  },
  get hydra_oauth2_migration_update_column() {
    return new EnumNode({ name: "hydra_oauth2_migration_update_column" });
  },
  get hydra_oauth2_obfuscated_authentication_session() {
    return new ObjectNode(
      {
        get client_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get hydra_client() {
          return new FieldNode(schema.hydra_client, undefined, false);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, false);
        },
        get subject_obfuscated() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_obfuscated_authentication_session",
        extension: ((extensions as any) || {})
          .hydra_oauth2_obfuscated_authentication_session
      }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_obfuscated_authentication_session,
              false
            ),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_obfuscated_authentication_session_aggregate",
        extension: ((extensions as any) || {})
          .hydra_oauth2_obfuscated_authentication_session_aggregate
      }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_obfuscated_authentication_session_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_obfuscated_authentication_session_aggregate_fields
      }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_aggregate_order_by() {
    return new InputNode(
      {
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.hydra_oauth2_obfuscated_authentication_session_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.hydra_oauth2_obfuscated_authentication_session_min_order_by,
            true
          );
        }
      },
      {
        name:
          "hydra_oauth2_obfuscated_authentication_session_aggregate_order_by"
      }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_obfuscated_authentication_session_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.hydra_oauth2_obfuscated_authentication_session_on_conflict,
            true
          );
        }
      },
      {
        name:
          "hydra_oauth2_obfuscated_authentication_session_arr_rel_insert_input"
      }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_obfuscated_authentication_session_bool_exp,
              true
            ),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.hydra_oauth2_obfuscated_authentication_session_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_obfuscated_authentication_session_bool_exp,
              true
            ),
            true
          );
        },
        get client_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_bool_exp, true);
        },
        get subject() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get subject_obfuscated() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_obfuscated_authentication_session_bool_exp" }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_constraint() {
    return new EnumNode({
      name: "hydra_oauth2_obfuscated_authentication_session_constraint"
    });
  },
  get hydra_oauth2_obfuscated_authentication_session_insert_input() {
    return new InputNode(
      {
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get hydra_client() {
          return new InputNodeField(
            schema.hydra_client_obj_rel_insert_input,
            true
          );
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        },
        get subject_obfuscated() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_obfuscated_authentication_session_insert_input" }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_max_fields() {
    return new ObjectNode(
      {
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject_obfuscated() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_obfuscated_authentication_session_max_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_obfuscated_authentication_session_max_fields
      }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_max_order_by() {
    return new InputNode(
      {
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_obfuscated() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_obfuscated_authentication_session_max_order_by" }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_min_fields() {
    return new ObjectNode(
      {
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject_obfuscated() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_obfuscated_authentication_session_min_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_obfuscated_authentication_session_min_fields
      }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_min_order_by() {
    return new InputNode(
      {
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_obfuscated() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_obfuscated_authentication_session_min_order_by" }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_obfuscated_authentication_session,
              false
            ),
            undefined,
            false
          );
        }
      },
      {
        name:
          "hydra_oauth2_obfuscated_authentication_session_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_obfuscated_authentication_session_mutation_response
      }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.hydra_oauth2_obfuscated_authentication_session_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.hydra_oauth2_obfuscated_authentication_session_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.hydra_oauth2_obfuscated_authentication_session_bool_exp,
            true
          );
        }
      },
      { name: "hydra_oauth2_obfuscated_authentication_session_on_conflict" }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_order_by() {
    return new InputNode(
      {
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_obfuscated() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_obfuscated_authentication_session_order_by" }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_pk_columns_input() {
    return new InputNode(
      {
        get client_id() {
          return new InputNodeField(schema.String, false);
        },
        get subject() {
          return new InputNodeField(schema.String, false);
        }
      },
      {
        name: "hydra_oauth2_obfuscated_authentication_session_pk_columns_input"
      }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_select_column() {
    return new EnumNode({
      name: "hydra_oauth2_obfuscated_authentication_session_select_column"
    });
  },
  get hydra_oauth2_obfuscated_authentication_session_set_input() {
    return new InputNode(
      {
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        },
        get subject_obfuscated() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_obfuscated_authentication_session_set_input" }
    );
  },
  get hydra_oauth2_obfuscated_authentication_session_update_column() {
    return new EnumNode({
      name: "hydra_oauth2_obfuscated_authentication_session_update_column"
    });
  },
  get hydra_oauth2_oidc() {
    return new ObjectNode(
      {
        get active() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, false);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get hydra_client() {
          return new FieldNode(schema.hydra_client, undefined, false);
        },
        get hydra_oauth2_consent_request_handled() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled,
            undefined,
            false
          );
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, false);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, false);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_oidc",
        extension: ((extensions as any) || {}).hydra_oauth2_oidc
      }
    );
  },
  get hydra_oauth2_oidc_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_oidc_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_oidc, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_oidc_aggregate",
        extension: ((extensions as any) || {}).hydra_oauth2_oidc_aggregate
      }
    );
  },
  get hydra_oauth2_oidc_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_oidc_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_oidc_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_oidc_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_oidc_aggregate_fields
      }
    );
  },
  get hydra_oauth2_oidc_aggregate_order_by() {
    return new InputNode(
      {
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.hydra_oauth2_oidc_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.hydra_oauth2_oidc_min_order_by,
            true
          );
        }
      },
      { name: "hydra_oauth2_oidc_aggregate_order_by" }
    );
  },
  get hydra_oauth2_oidc_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_oidc_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.hydra_oauth2_oidc_on_conflict, true);
        }
      },
      { name: "hydra_oauth2_oidc_arr_rel_insert_input" }
    );
  },
  get hydra_oauth2_oidc_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_oidc_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.hydra_oauth2_oidc_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_oidc_bool_exp, true),
            true
          );
        },
        get active() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get client_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get form_data() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_bool_exp, true);
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_bool_exp,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get session_data() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get signature() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get subject() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_oidc_bool_exp" }
    );
  },
  get hydra_oauth2_oidc_constraint() {
    return new EnumNode({ name: "hydra_oauth2_oidc_constraint" });
  },
  get hydra_oauth2_oidc_insert_input() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.Boolean, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get form_data() {
          return new InputNodeField(schema.String, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String, true);
        },
        get hydra_client() {
          return new InputNodeField(
            schema.hydra_client_obj_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_obj_rel_insert_input,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String, true);
        },
        get scope() {
          return new InputNodeField(schema.String, true);
        },
        get session_data() {
          return new InputNodeField(schema.String, true);
        },
        get signature() {
          return new InputNodeField(schema.String, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_oidc_insert_input" }
    );
  },
  get hydra_oauth2_oidc_max_fields() {
    return new ObjectNode(
      {
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_oidc_max_fields",
        extension: ((extensions as any) || {}).hydra_oauth2_oidc_max_fields
      }
    );
  },
  get hydra_oauth2_oidc_max_order_by() {
    return new InputNode(
      {
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_oidc_max_order_by" }
    );
  },
  get hydra_oauth2_oidc_min_fields() {
    return new ObjectNode(
      {
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_oidc_min_fields",
        extension: ((extensions as any) || {}).hydra_oauth2_oidc_min_fields
      }
    );
  },
  get hydra_oauth2_oidc_min_order_by() {
    return new InputNode(
      {
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_oidc_min_order_by" }
    );
  },
  get hydra_oauth2_oidc_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_oidc, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_oidc_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_oidc_mutation_response
      }
    );
  },
  get hydra_oauth2_oidc_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.hydra_oauth2_oidc_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_oidc_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.hydra_oauth2_oidc_bool_exp, true);
        }
      },
      { name: "hydra_oauth2_oidc_on_conflict" }
    );
  },
  get hydra_oauth2_oidc_order_by() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_order_by, true);
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_order_by,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_oidc_order_by" }
    );
  },
  get hydra_oauth2_oidc_pk_columns_input() {
    return new InputNode(
      {
        get signature() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_oauth2_oidc_pk_columns_input" }
    );
  },
  get hydra_oauth2_oidc_select_column() {
    return new EnumNode({ name: "hydra_oauth2_oidc_select_column" });
  },
  get hydra_oauth2_oidc_set_input() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.Boolean, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get form_data() {
          return new InputNodeField(schema.String, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String, true);
        },
        get request_id() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String, true);
        },
        get scope() {
          return new InputNodeField(schema.String, true);
        },
        get session_data() {
          return new InputNodeField(schema.String, true);
        },
        get signature() {
          return new InputNodeField(schema.String, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_oidc_set_input" }
    );
  },
  get hydra_oauth2_oidc_update_column() {
    return new EnumNode({ name: "hydra_oauth2_oidc_update_column" });
  },
  get hydra_oauth2_pkce() {
    return new ObjectNode(
      {
        get active() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, false);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get hydra_client() {
          return new FieldNode(schema.hydra_client, undefined, false);
        },
        get hydra_oauth2_consent_request_handled() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled,
            undefined,
            false
          );
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, false);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, false);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_pkce",
        extension: ((extensions as any) || {}).hydra_oauth2_pkce
      }
    );
  },
  get hydra_oauth2_pkce_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_pkce_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_pkce, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_pkce_aggregate",
        extension: ((extensions as any) || {}).hydra_oauth2_pkce_aggregate
      }
    );
  },
  get hydra_oauth2_pkce_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_pkce_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_pkce_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_pkce_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_pkce_aggregate_fields
      }
    );
  },
  get hydra_oauth2_pkce_aggregate_order_by() {
    return new InputNode(
      {
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.hydra_oauth2_pkce_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.hydra_oauth2_pkce_min_order_by,
            true
          );
        }
      },
      { name: "hydra_oauth2_pkce_aggregate_order_by" }
    );
  },
  get hydra_oauth2_pkce_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_pkce_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.hydra_oauth2_pkce_on_conflict, true);
        }
      },
      { name: "hydra_oauth2_pkce_arr_rel_insert_input" }
    );
  },
  get hydra_oauth2_pkce_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_pkce_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.hydra_oauth2_pkce_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_pkce_bool_exp, true),
            true
          );
        },
        get active() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get client_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get form_data() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_bool_exp, true);
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_bool_exp,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get session_data() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get signature() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get subject() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_pkce_bool_exp" }
    );
  },
  get hydra_oauth2_pkce_constraint() {
    return new EnumNode({ name: "hydra_oauth2_pkce_constraint" });
  },
  get hydra_oauth2_pkce_insert_input() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.Boolean, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get form_data() {
          return new InputNodeField(schema.String, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String, true);
        },
        get hydra_client() {
          return new InputNodeField(
            schema.hydra_client_obj_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_obj_rel_insert_input,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String, true);
        },
        get scope() {
          return new InputNodeField(schema.String, true);
        },
        get session_data() {
          return new InputNodeField(schema.String, true);
        },
        get signature() {
          return new InputNodeField(schema.String, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_pkce_insert_input" }
    );
  },
  get hydra_oauth2_pkce_max_fields() {
    return new ObjectNode(
      {
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_pkce_max_fields",
        extension: ((extensions as any) || {}).hydra_oauth2_pkce_max_fields
      }
    );
  },
  get hydra_oauth2_pkce_max_order_by() {
    return new InputNode(
      {
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_pkce_max_order_by" }
    );
  },
  get hydra_oauth2_pkce_min_fields() {
    return new ObjectNode(
      {
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_pkce_min_fields",
        extension: ((extensions as any) || {}).hydra_oauth2_pkce_min_fields
      }
    );
  },
  get hydra_oauth2_pkce_min_order_by() {
    return new InputNode(
      {
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_pkce_min_order_by" }
    );
  },
  get hydra_oauth2_pkce_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_pkce, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_pkce_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_pkce_mutation_response
      }
    );
  },
  get hydra_oauth2_pkce_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.hydra_oauth2_pkce_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_pkce_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.hydra_oauth2_pkce_bool_exp, true);
        }
      },
      { name: "hydra_oauth2_pkce_on_conflict" }
    );
  },
  get hydra_oauth2_pkce_order_by() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_order_by, true);
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_order_by,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_pkce_order_by" }
    );
  },
  get hydra_oauth2_pkce_pk_columns_input() {
    return new InputNode(
      {
        get signature() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_oauth2_pkce_pk_columns_input" }
    );
  },
  get hydra_oauth2_pkce_select_column() {
    return new EnumNode({ name: "hydra_oauth2_pkce_select_column" });
  },
  get hydra_oauth2_pkce_set_input() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.Boolean, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get form_data() {
          return new InputNodeField(schema.String, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String, true);
        },
        get request_id() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String, true);
        },
        get scope() {
          return new InputNodeField(schema.String, true);
        },
        get session_data() {
          return new InputNodeField(schema.String, true);
        },
        get signature() {
          return new InputNodeField(schema.String, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_pkce_set_input" }
    );
  },
  get hydra_oauth2_pkce_update_column() {
    return new EnumNode({ name: "hydra_oauth2_pkce_update_column" });
  },
  get hydra_oauth2_refresh() {
    return new ObjectNode(
      {
        get active() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, false);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get hydra_client() {
          return new FieldNode(schema.hydra_client, undefined, false);
        },
        get hydra_oauth2_consent_request_handled() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled,
            undefined,
            false
          );
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, false);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, false);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, false);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "hydra_oauth2_refresh",
        extension: ((extensions as any) || {}).hydra_oauth2_refresh
      }
    );
  },
  get hydra_oauth2_refresh_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_refresh_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_refresh, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_refresh_aggregate",
        extension: ((extensions as any) || {}).hydra_oauth2_refresh_aggregate
      }
    );
  },
  get hydra_oauth2_refresh_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_refresh_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.hydra_oauth2_refresh_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.hydra_oauth2_refresh_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "hydra_oauth2_refresh_aggregate_fields",
        extension: ((extensions as any) || {})
          .hydra_oauth2_refresh_aggregate_fields
      }
    );
  },
  get hydra_oauth2_refresh_aggregate_order_by() {
    return new InputNode(
      {
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.hydra_oauth2_refresh_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.hydra_oauth2_refresh_min_order_by,
            true
          );
        }
      },
      { name: "hydra_oauth2_refresh_aggregate_order_by" }
    );
  },
  get hydra_oauth2_refresh_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_refresh_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.hydra_oauth2_refresh_on_conflict,
            true
          );
        }
      },
      { name: "hydra_oauth2_refresh_arr_rel_insert_input" }
    );
  },
  get hydra_oauth2_refresh_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_refresh_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.hydra_oauth2_refresh_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_refresh_bool_exp, true),
            true
          );
        },
        get active() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get client_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get form_data() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_bool_exp, true);
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_bool_exp,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get scope() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get session_data() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get signature() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get subject() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "hydra_oauth2_refresh_bool_exp" }
    );
  },
  get hydra_oauth2_refresh_constraint() {
    return new EnumNode({ name: "hydra_oauth2_refresh_constraint" });
  },
  get hydra_oauth2_refresh_insert_input() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.Boolean, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get form_data() {
          return new InputNodeField(schema.String, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String, true);
        },
        get hydra_client() {
          return new InputNodeField(
            schema.hydra_client_obj_rel_insert_input,
            true
          );
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_obj_rel_insert_input,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String, true);
        },
        get scope() {
          return new InputNodeField(schema.String, true);
        },
        get session_data() {
          return new InputNodeField(schema.String, true);
        },
        get signature() {
          return new InputNodeField(schema.String, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_refresh_insert_input" }
    );
  },
  get hydra_oauth2_refresh_max_fields() {
    return new ObjectNode(
      {
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_refresh_max_fields",
        extension: ((extensions as any) || {}).hydra_oauth2_refresh_max_fields
      }
    );
  },
  get hydra_oauth2_refresh_max_order_by() {
    return new InputNode(
      {
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_refresh_max_order_by" }
    );
  },
  get hydra_oauth2_refresh_min_fields() {
    return new ObjectNode(
      {
        get challenge_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get client_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get form_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get granted_scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get request_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get requested_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_audience() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scope() {
          return new FieldNode(schema.String, undefined, true);
        },
        get session_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get signature() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "hydra_oauth2_refresh_min_fields",
        extension: ((extensions as any) || {}).hydra_oauth2_refresh_min_fields
      }
    );
  },
  get hydra_oauth2_refresh_min_order_by() {
    return new InputNode(
      {
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_refresh_min_order_by" }
    );
  },
  get hydra_oauth2_refresh_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_refresh, false),
            undefined,
            false
          );
        }
      },
      {
        name: "hydra_oauth2_refresh_mutation_response",
        extension: ((extensions as any) || {})
          .hydra_oauth2_refresh_mutation_response
      }
    );
  },
  get hydra_oauth2_refresh_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.hydra_oauth2_refresh_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.hydra_oauth2_refresh_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.hydra_oauth2_refresh_bool_exp, true);
        }
      },
      { name: "hydra_oauth2_refresh_on_conflict" }
    );
  },
  get hydra_oauth2_refresh_order_by() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.order_by, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get client_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get form_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get hydra_client() {
          return new InputNodeField(schema.hydra_client_order_by, true);
        },
        get hydra_oauth2_consent_request_handled() {
          return new InputNodeField(
            schema.hydra_oauth2_consent_request_handled_order_by,
            true
          );
        },
        get request_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.order_by, true);
        },
        get scope() {
          return new InputNodeField(schema.order_by, true);
        },
        get session_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get signature() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "hydra_oauth2_refresh_order_by" }
    );
  },
  get hydra_oauth2_refresh_pk_columns_input() {
    return new InputNode(
      {
        get signature() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "hydra_oauth2_refresh_pk_columns_input" }
    );
  },
  get hydra_oauth2_refresh_select_column() {
    return new EnumNode({ name: "hydra_oauth2_refresh_select_column" });
  },
  get hydra_oauth2_refresh_set_input() {
    return new InputNode(
      {
        get active() {
          return new InputNodeField(schema.Boolean, true);
        },
        get challenge_id() {
          return new InputNodeField(schema.String, true);
        },
        get client_id() {
          return new InputNodeField(schema.String, true);
        },
        get form_data() {
          return new InputNodeField(schema.String, true);
        },
        get granted_audience() {
          return new InputNodeField(schema.String, true);
        },
        get granted_scope() {
          return new InputNodeField(schema.String, true);
        },
        get request_id() {
          return new InputNodeField(schema.String, true);
        },
        get requested_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_audience() {
          return new InputNodeField(schema.String, true);
        },
        get scope() {
          return new InputNodeField(schema.String, true);
        },
        get session_data() {
          return new InputNodeField(schema.String, true);
        },
        get signature() {
          return new InputNodeField(schema.String, true);
        },
        get subject() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "hydra_oauth2_refresh_set_input" }
    );
  },
  get hydra_oauth2_refresh_update_column() {
    return new EnumNode({ name: "hydra_oauth2_refresh_update_column" });
  },
  get json() {
    return new ScalarNode({
      name: "json",
      extension: ((extensions as any) || {}).json
    });
  },
  get json_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.json, true);
        },
        get _gt() {
          return new InputNodeField(schema.json, true);
        },
        get _gte() {
          return new InputNodeField(schema.json, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.json, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.json, true);
        },
        get _lte() {
          return new InputNodeField(schema.json, true);
        },
        get _neq() {
          return new InputNodeField(schema.json, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.json, true), true);
        }
      },
      { name: "json_comparison_exp" }
    );
  },
  get jsonb() {
    return new ScalarNode({
      name: "jsonb",
      extension: ((extensions as any) || {}).jsonb
    });
  },
  get jsonb_comparison_exp() {
    return new InputNode(
      {
        get _contained_in() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _contains() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _eq() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _gt() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _gte() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _has_key() {
          return new InputNodeField(schema.String, true);
        },
        get _has_keys_all() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
        get _has_keys_any() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.jsonb, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _lte() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _neq() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.jsonb, true), true);
        }
      },
      { name: "jsonb_comparison_exp" }
    );
  },
  get keycloak_realm_smtp_config() {
    return new ObjectNode(
      {
        get name() {
          return new FieldNode(schema.String, undefined, false);
        },
        get realm_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get value() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "keycloak_realm_smtp_config",
        extension: ((extensions as any) || {}).keycloak_realm_smtp_config
      }
    );
  },
  get keycloak_realm_smtp_config_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.keycloak_realm_smtp_config_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.keycloak_realm_smtp_config, false),
            undefined,
            false
          );
        }
      },
      {
        name: "keycloak_realm_smtp_config_aggregate",
        extension: ((extensions as any) || {})
          .keycloak_realm_smtp_config_aggregate
      }
    );
  },
  get keycloak_realm_smtp_config_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_realm_smtp_config_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.keycloak_realm_smtp_config_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.keycloak_realm_smtp_config_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "keycloak_realm_smtp_config_aggregate_fields",
        extension: ((extensions as any) || {})
          .keycloak_realm_smtp_config_aggregate_fields
      }
    );
  },
  get keycloak_realm_smtp_config_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.keycloak_realm_smtp_config_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.keycloak_realm_smtp_config_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.keycloak_realm_smtp_config_bool_exp, true),
            true
          );
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get realm_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get value() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "keycloak_realm_smtp_config_bool_exp" }
    );
  },
  get keycloak_realm_smtp_config_constraint() {
    return new EnumNode({ name: "keycloak_realm_smtp_config_constraint" });
  },
  get keycloak_realm_smtp_config_insert_input() {
    return new InputNode(
      {
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get realm_id() {
          return new InputNodeField(schema.String, true);
        },
        get value() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "keycloak_realm_smtp_config_insert_input" }
    );
  },
  get keycloak_realm_smtp_config_max_fields() {
    return new ObjectNode(
      {
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get realm_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get value() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "keycloak_realm_smtp_config_max_fields",
        extension: ((extensions as any) || {})
          .keycloak_realm_smtp_config_max_fields
      }
    );
  },
  get keycloak_realm_smtp_config_min_fields() {
    return new ObjectNode(
      {
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get realm_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get value() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "keycloak_realm_smtp_config_min_fields",
        extension: ((extensions as any) || {})
          .keycloak_realm_smtp_config_min_fields
      }
    );
  },
  get keycloak_realm_smtp_config_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.keycloak_realm_smtp_config, false),
            undefined,
            false
          );
        }
      },
      {
        name: "keycloak_realm_smtp_config_mutation_response",
        extension: ((extensions as any) || {})
          .keycloak_realm_smtp_config_mutation_response
      }
    );
  },
  get keycloak_realm_smtp_config_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.keycloak_realm_smtp_config_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.keycloak_realm_smtp_config_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.keycloak_realm_smtp_config_bool_exp,
            true
          );
        }
      },
      { name: "keycloak_realm_smtp_config_on_conflict" }
    );
  },
  get keycloak_realm_smtp_config_order_by() {
    return new InputNode(
      {
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get realm_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get value() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "keycloak_realm_smtp_config_order_by" }
    );
  },
  get keycloak_realm_smtp_config_pk_columns_input() {
    return new InputNode(
      {
        get name() {
          return new InputNodeField(schema.String, false);
        },
        get realm_id() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "keycloak_realm_smtp_config_pk_columns_input" }
    );
  },
  get keycloak_realm_smtp_config_select_column() {
    return new EnumNode({ name: "keycloak_realm_smtp_config_select_column" });
  },
  get keycloak_realm_smtp_config_set_input() {
    return new InputNode(
      {
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get realm_id() {
          return new InputNodeField(schema.String, true);
        },
        get value() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "keycloak_realm_smtp_config_set_input" }
    );
  },
  get keycloak_realm_smtp_config_update_column() {
    return new EnumNode({ name: "keycloak_realm_smtp_config_update_column" });
  },
  get keycloak_user_role_mapping() {
    return new ObjectNode(
      {
        get role_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get user_id() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "keycloak_user_role_mapping",
        extension: ((extensions as any) || {}).keycloak_user_role_mapping
      }
    );
  },
  get keycloak_user_role_mapping_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.keycloak_user_role_mapping_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.keycloak_user_role_mapping, false),
            undefined,
            false
          );
        }
      },
      {
        name: "keycloak_user_role_mapping_aggregate",
        extension: ((extensions as any) || {})
          .keycloak_user_role_mapping_aggregate
      }
    );
  },
  get keycloak_user_role_mapping_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_user_role_mapping_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.keycloak_user_role_mapping_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.keycloak_user_role_mapping_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "keycloak_user_role_mapping_aggregate_fields",
        extension: ((extensions as any) || {})
          .keycloak_user_role_mapping_aggregate_fields
      }
    );
  },
  get keycloak_user_role_mapping_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.keycloak_user_role_mapping_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.keycloak_user_role_mapping_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.keycloak_user_role_mapping_bool_exp, true),
            true
          );
        },
        get role_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "keycloak_user_role_mapping_bool_exp" }
    );
  },
  get keycloak_user_role_mapping_constraint() {
    return new EnumNode({ name: "keycloak_user_role_mapping_constraint" });
  },
  get keycloak_user_role_mapping_insert_input() {
    return new InputNode(
      {
        get role_id() {
          return new InputNodeField(schema.String, true);
        },
        get user_id() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "keycloak_user_role_mapping_insert_input" }
    );
  },
  get keycloak_user_role_mapping_max_fields() {
    return new ObjectNode(
      {
        get role_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "keycloak_user_role_mapping_max_fields",
        extension: ((extensions as any) || {})
          .keycloak_user_role_mapping_max_fields
      }
    );
  },
  get keycloak_user_role_mapping_min_fields() {
    return new ObjectNode(
      {
        get role_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "keycloak_user_role_mapping_min_fields",
        extension: ((extensions as any) || {})
          .keycloak_user_role_mapping_min_fields
      }
    );
  },
  get keycloak_user_role_mapping_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.keycloak_user_role_mapping, false),
            undefined,
            false
          );
        }
      },
      {
        name: "keycloak_user_role_mapping_mutation_response",
        extension: ((extensions as any) || {})
          .keycloak_user_role_mapping_mutation_response
      }
    );
  },
  get keycloak_user_role_mapping_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.keycloak_user_role_mapping_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.keycloak_user_role_mapping_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.keycloak_user_role_mapping_bool_exp,
            true
          );
        }
      },
      { name: "keycloak_user_role_mapping_on_conflict" }
    );
  },
  get keycloak_user_role_mapping_order_by() {
    return new InputNode(
      {
        get role_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "keycloak_user_role_mapping_order_by" }
    );
  },
  get keycloak_user_role_mapping_pk_columns_input() {
    return new InputNode(
      {
        get role_id() {
          return new InputNodeField(schema.String, false);
        },
        get user_id() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "keycloak_user_role_mapping_pk_columns_input" }
    );
  },
  get keycloak_user_role_mapping_select_column() {
    return new EnumNode({ name: "keycloak_user_role_mapping_select_column" });
  },
  get keycloak_user_role_mapping_set_input() {
    return new InputNode(
      {
        get role_id() {
          return new InputNodeField(schema.String, true);
        },
        get user_id() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "keycloak_user_role_mapping_set_input" }
    );
  },
  get keycloak_user_role_mapping_update_column() {
    return new EnumNode({ name: "keycloak_user_role_mapping_update_column" });
  },
  get m4cfp_area_general() {
    return new ObjectNode(
      {
        get cfp_id_area_genera() {
          return new FieldNode(schema.String, undefined, false);
        },
        get cfp_n_area_general() {
          return new FieldNode(schema.String, undefined, false);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        }
      },
      {
        name: "m4cfp_area_general",
        extension: ((extensions as any) || {}).m4cfp_area_general
      }
    );
  },
  get m4cfp_area_general_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.m4cfp_area_general_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_area_general, false),
            undefined,
            false
          );
        }
      },
      {
        name: "m4cfp_area_general_aggregate",
        extension: ((extensions as any) || {}).m4cfp_area_general_aggregate
      }
    );
  },
  get m4cfp_area_general_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.m4cfp_area_general_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_general_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.m4cfp_area_general_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.m4cfp_area_general_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.m4cfp_area_general_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.m4cfp_area_general_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.m4cfp_area_general_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.m4cfp_area_general_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.m4cfp_area_general_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.m4cfp_area_general_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.m4cfp_area_general_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "m4cfp_area_general_aggregate_fields",
        extension: ((extensions as any) || {})
          .m4cfp_area_general_aggregate_fields
      }
    );
  },
  get m4cfp_area_general_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_general_avg_fields",
        extension: ((extensions as any) || {}).m4cfp_area_general_avg_fields
      }
    );
  },
  get m4cfp_area_general_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.m4cfp_area_general_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.m4cfp_area_general_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.m4cfp_area_general_bool_exp, true),
            true
          );
        },
        get cfp_id_area_genera() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cfp_n_area_general() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        }
      },
      { name: "m4cfp_area_general_bool_exp" }
    );
  },
  get m4cfp_area_general_constraint() {
    return new EnumNode({ name: "m4cfp_area_general_constraint" });
  },
  get m4cfp_area_general_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "m4cfp_area_general_inc_input" }
    );
  },
  get m4cfp_area_general_insert_input() {
    return new InputNode(
      {
        get cfp_id_area_genera() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_n_area_general() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "m4cfp_area_general_insert_input" }
    );
  },
  get m4cfp_area_general_max_fields() {
    return new ObjectNode(
      {
        get cfp_id_area_genera() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_n_area_general() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "m4cfp_area_general_max_fields",
        extension: ((extensions as any) || {}).m4cfp_area_general_max_fields
      }
    );
  },
  get m4cfp_area_general_min_fields() {
    return new ObjectNode(
      {
        get cfp_id_area_genera() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_n_area_general() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "m4cfp_area_general_min_fields",
        extension: ((extensions as any) || {}).m4cfp_area_general_min_fields
      }
    );
  },
  get m4cfp_area_general_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_area_general, false),
            undefined,
            false
          );
        }
      },
      {
        name: "m4cfp_area_general_mutation_response",
        extension: ((extensions as any) || {})
          .m4cfp_area_general_mutation_response
      }
    );
  },
  get m4cfp_area_general_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.m4cfp_area_general_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.m4cfp_area_general_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.m4cfp_area_general_bool_exp, true);
        }
      },
      { name: "m4cfp_area_general_on_conflict" }
    );
  },
  get m4cfp_area_general_order_by() {
    return new InputNode(
      {
        get cfp_id_area_genera() {
          return new InputNodeField(schema.order_by, true);
        },
        get cfp_n_area_general() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "m4cfp_area_general_order_by" }
    );
  },
  get m4cfp_area_general_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "m4cfp_area_general_pk_columns_input" }
    );
  },
  get m4cfp_area_general_select_column() {
    return new EnumNode({ name: "m4cfp_area_general_select_column" });
  },
  get m4cfp_area_general_set_input() {
    return new InputNode(
      {
        get cfp_id_area_genera() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_n_area_general() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "m4cfp_area_general_set_input" }
    );
  },
  get m4cfp_area_general_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_general_stddev_fields",
        extension: ((extensions as any) || {}).m4cfp_area_general_stddev_fields
      }
    );
  },
  get m4cfp_area_general_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_general_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .m4cfp_area_general_stddev_pop_fields
      }
    );
  },
  get m4cfp_area_general_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_general_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .m4cfp_area_general_stddev_samp_fields
      }
    );
  },
  get m4cfp_area_general_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "m4cfp_area_general_sum_fields",
        extension: ((extensions as any) || {}).m4cfp_area_general_sum_fields
      }
    );
  },
  get m4cfp_area_general_update_column() {
    return new EnumNode({ name: "m4cfp_area_general_update_column" });
  },
  get m4cfp_area_general_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_general_var_pop_fields",
        extension: ((extensions as any) || {}).m4cfp_area_general_var_pop_fields
      }
    );
  },
  get m4cfp_area_general_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_general_var_samp_fields",
        extension: ((extensions as any) || {})
          .m4cfp_area_general_var_samp_fields
      }
    );
  },
  get m4cfp_area_general_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_general_variance_fields",
        extension: ((extensions as any) || {})
          .m4cfp_area_general_variance_fields
      }
    );
  },
  get m4cfp_area_gral_ex() {
    return new ObjectNode(
      {
        get cfp_id_area_gral_e() {
          return new FieldNode(schema.String, undefined, false);
        },
        get cfp_id_gpo_exp() {
          return new FieldNode(schema.String, undefined, false);
        },
        get cfp_n_area_gral_ex() {
          return new FieldNode(schema.String, undefined, false);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        }
      },
      {
        name: "m4cfp_area_gral_ex",
        extension: ((extensions as any) || {}).m4cfp_area_gral_ex
      }
    );
  },
  get m4cfp_area_gral_ex_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_area_gral_ex, false),
            undefined,
            false
          );
        }
      },
      {
        name: "m4cfp_area_gral_ex_aggregate",
        extension: ((extensions as any) || {}).m4cfp_area_gral_ex_aggregate
      }
    );
  },
  get m4cfp_area_gral_ex_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_gral_ex_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "m4cfp_area_gral_ex_aggregate_fields",
        extension: ((extensions as any) || {})
          .m4cfp_area_gral_ex_aggregate_fields
      }
    );
  },
  get m4cfp_area_gral_ex_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_gral_ex_avg_fields",
        extension: ((extensions as any) || {}).m4cfp_area_gral_ex_avg_fields
      }
    );
  },
  get m4cfp_area_gral_ex_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.m4cfp_area_gral_ex_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.m4cfp_area_gral_ex_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.m4cfp_area_gral_ex_bool_exp, true),
            true
          );
        },
        get cfp_id_area_gral_e() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cfp_id_gpo_exp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cfp_n_area_gral_ex() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        }
      },
      { name: "m4cfp_area_gral_ex_bool_exp" }
    );
  },
  get m4cfp_area_gral_ex_constraint() {
    return new EnumNode({ name: "m4cfp_area_gral_ex_constraint" });
  },
  get m4cfp_area_gral_ex_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "m4cfp_area_gral_ex_inc_input" }
    );
  },
  get m4cfp_area_gral_ex_insert_input() {
    return new InputNode(
      {
        get cfp_id_area_gral_e() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_id_gpo_exp() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_n_area_gral_ex() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "m4cfp_area_gral_ex_insert_input" }
    );
  },
  get m4cfp_area_gral_ex_max_fields() {
    return new ObjectNode(
      {
        get cfp_id_area_gral_e() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_id_gpo_exp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_n_area_gral_ex() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "m4cfp_area_gral_ex_max_fields",
        extension: ((extensions as any) || {}).m4cfp_area_gral_ex_max_fields
      }
    );
  },
  get m4cfp_area_gral_ex_min_fields() {
    return new ObjectNode(
      {
        get cfp_id_area_gral_e() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_id_gpo_exp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_n_area_gral_ex() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "m4cfp_area_gral_ex_min_fields",
        extension: ((extensions as any) || {}).m4cfp_area_gral_ex_min_fields
      }
    );
  },
  get m4cfp_area_gral_ex_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_area_gral_ex, false),
            undefined,
            false
          );
        }
      },
      {
        name: "m4cfp_area_gral_ex_mutation_response",
        extension: ((extensions as any) || {})
          .m4cfp_area_gral_ex_mutation_response
      }
    );
  },
  get m4cfp_area_gral_ex_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.m4cfp_area_gral_ex_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.m4cfp_area_gral_ex_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.m4cfp_area_gral_ex_bool_exp, true);
        }
      },
      { name: "m4cfp_area_gral_ex_on_conflict" }
    );
  },
  get m4cfp_area_gral_ex_order_by() {
    return new InputNode(
      {
        get cfp_id_area_gral_e() {
          return new InputNodeField(schema.order_by, true);
        },
        get cfp_id_gpo_exp() {
          return new InputNodeField(schema.order_by, true);
        },
        get cfp_n_area_gral_ex() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "m4cfp_area_gral_ex_order_by" }
    );
  },
  get m4cfp_area_gral_ex_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "m4cfp_area_gral_ex_pk_columns_input" }
    );
  },
  get m4cfp_area_gral_ex_select_column() {
    return new EnumNode({ name: "m4cfp_area_gral_ex_select_column" });
  },
  get m4cfp_area_gral_ex_set_input() {
    return new InputNode(
      {
        get cfp_id_area_gral_e() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_id_gpo_exp() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_n_area_gral_ex() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "m4cfp_area_gral_ex_set_input" }
    );
  },
  get m4cfp_area_gral_ex_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_gral_ex_stddev_fields",
        extension: ((extensions as any) || {}).m4cfp_area_gral_ex_stddev_fields
      }
    );
  },
  get m4cfp_area_gral_ex_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_gral_ex_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .m4cfp_area_gral_ex_stddev_pop_fields
      }
    );
  },
  get m4cfp_area_gral_ex_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_gral_ex_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .m4cfp_area_gral_ex_stddev_samp_fields
      }
    );
  },
  get m4cfp_area_gral_ex_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "m4cfp_area_gral_ex_sum_fields",
        extension: ((extensions as any) || {}).m4cfp_area_gral_ex_sum_fields
      }
    );
  },
  get m4cfp_area_gral_ex_update_column() {
    return new EnumNode({ name: "m4cfp_area_gral_ex_update_column" });
  },
  get m4cfp_area_gral_ex_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_gral_ex_var_pop_fields",
        extension: ((extensions as any) || {}).m4cfp_area_gral_ex_var_pop_fields
      }
    );
  },
  get m4cfp_area_gral_ex_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_gral_ex_var_samp_fields",
        extension: ((extensions as any) || {})
          .m4cfp_area_gral_ex_var_samp_fields
      }
    );
  },
  get m4cfp_area_gral_ex_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_area_gral_ex_variance_fields",
        extension: ((extensions as any) || {})
          .m4cfp_area_gral_ex_variance_fields
      }
    );
  },
  get m4cfp_carreras_ge() {
    return new ObjectNode(
      {
        get cfp_id_area_genera() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_id_carrera_gen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_n_carrera_gen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        }
      },
      {
        name: "m4cfp_carreras_ge",
        extension: ((extensions as any) || {}).m4cfp_carreras_ge
      }
    );
  },
  get m4cfp_carreras_ge_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_carreras_ge, false),
            undefined,
            false
          );
        }
      },
      {
        name: "m4cfp_carreras_ge_aggregate",
        extension: ((extensions as any) || {}).m4cfp_carreras_ge_aggregate
      }
    );
  },
  get m4cfp_carreras_ge_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_carreras_ge_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "m4cfp_carreras_ge_aggregate_fields",
        extension: ((extensions as any) || {})
          .m4cfp_carreras_ge_aggregate_fields
      }
    );
  },
  get m4cfp_carreras_ge_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_carreras_ge_avg_fields",
        extension: ((extensions as any) || {}).m4cfp_carreras_ge_avg_fields
      }
    );
  },
  get m4cfp_carreras_ge_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.m4cfp_carreras_ge_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.m4cfp_carreras_ge_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.m4cfp_carreras_ge_bool_exp, true),
            true
          );
        },
        get cfp_id_area_genera() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cfp_id_carrera_gen() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cfp_n_carrera_gen() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        }
      },
      { name: "m4cfp_carreras_ge_bool_exp" }
    );
  },
  get m4cfp_carreras_ge_constraint() {
    return new EnumNode({ name: "m4cfp_carreras_ge_constraint" });
  },
  get m4cfp_carreras_ge_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "m4cfp_carreras_ge_inc_input" }
    );
  },
  get m4cfp_carreras_ge_insert_input() {
    return new InputNode(
      {
        get cfp_id_area_genera() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_id_carrera_gen() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_n_carrera_gen() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "m4cfp_carreras_ge_insert_input" }
    );
  },
  get m4cfp_carreras_ge_max_fields() {
    return new ObjectNode(
      {
        get cfp_id_area_genera() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_id_carrera_gen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_n_carrera_gen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "m4cfp_carreras_ge_max_fields",
        extension: ((extensions as any) || {}).m4cfp_carreras_ge_max_fields
      }
    );
  },
  get m4cfp_carreras_ge_min_fields() {
    return new ObjectNode(
      {
        get cfp_id_area_genera() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_id_carrera_gen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_n_carrera_gen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "m4cfp_carreras_ge_min_fields",
        extension: ((extensions as any) || {}).m4cfp_carreras_ge_min_fields
      }
    );
  },
  get m4cfp_carreras_ge_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_carreras_ge, false),
            undefined,
            false
          );
        }
      },
      {
        name: "m4cfp_carreras_ge_mutation_response",
        extension: ((extensions as any) || {})
          .m4cfp_carreras_ge_mutation_response
      }
    );
  },
  get m4cfp_carreras_ge_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.m4cfp_carreras_ge_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.m4cfp_carreras_ge_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.m4cfp_carreras_ge_bool_exp, true);
        }
      },
      { name: "m4cfp_carreras_ge_on_conflict" }
    );
  },
  get m4cfp_carreras_ge_order_by() {
    return new InputNode(
      {
        get cfp_id_area_genera() {
          return new InputNodeField(schema.order_by, true);
        },
        get cfp_id_carrera_gen() {
          return new InputNodeField(schema.order_by, true);
        },
        get cfp_n_carrera_gen() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "m4cfp_carreras_ge_order_by" }
    );
  },
  get m4cfp_carreras_ge_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "m4cfp_carreras_ge_pk_columns_input" }
    );
  },
  get m4cfp_carreras_ge_select_column() {
    return new EnumNode({ name: "m4cfp_carreras_ge_select_column" });
  },
  get m4cfp_carreras_ge_set_input() {
    return new InputNode(
      {
        get cfp_id_area_genera() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_id_carrera_gen() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_n_carrera_gen() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "m4cfp_carreras_ge_set_input" }
    );
  },
  get m4cfp_carreras_ge_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_carreras_ge_stddev_fields",
        extension: ((extensions as any) || {}).m4cfp_carreras_ge_stddev_fields
      }
    );
  },
  get m4cfp_carreras_ge_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_carreras_ge_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .m4cfp_carreras_ge_stddev_pop_fields
      }
    );
  },
  get m4cfp_carreras_ge_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_carreras_ge_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .m4cfp_carreras_ge_stddev_samp_fields
      }
    );
  },
  get m4cfp_carreras_ge_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "m4cfp_carreras_ge_sum_fields",
        extension: ((extensions as any) || {}).m4cfp_carreras_ge_sum_fields
      }
    );
  },
  get m4cfp_carreras_ge_update_column() {
    return new EnumNode({ name: "m4cfp_carreras_ge_update_column" });
  },
  get m4cfp_carreras_ge_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_carreras_ge_var_pop_fields",
        extension: ((extensions as any) || {}).m4cfp_carreras_ge_var_pop_fields
      }
    );
  },
  get m4cfp_carreras_ge_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_carreras_ge_var_samp_fields",
        extension: ((extensions as any) || {}).m4cfp_carreras_ge_var_samp_fields
      }
    );
  },
  get m4cfp_carreras_ge_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_carreras_ge_variance_fields",
        extension: ((extensions as any) || {}).m4cfp_carreras_ge_variance_fields
      }
    );
  },
  get m4cfp_gpo_experien() {
    return new ObjectNode(
      {
        get cfp_id_gpo_exp() {
          return new FieldNode(schema.String, undefined, false);
        },
        get cfp_n_gpo_exper() {
          return new FieldNode(schema.String, undefined, false);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        }
      },
      {
        name: "m4cfp_gpo_experien",
        extension: ((extensions as any) || {}).m4cfp_gpo_experien
      }
    );
  },
  get m4cfp_gpo_experien_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_gpo_experien, false),
            undefined,
            false
          );
        }
      },
      {
        name: "m4cfp_gpo_experien_aggregate",
        extension: ((extensions as any) || {}).m4cfp_gpo_experien_aggregate
      }
    );
  },
  get m4cfp_gpo_experien_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_gpo_experien_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "m4cfp_gpo_experien_aggregate_fields",
        extension: ((extensions as any) || {})
          .m4cfp_gpo_experien_aggregate_fields
      }
    );
  },
  get m4cfp_gpo_experien_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_gpo_experien_avg_fields",
        extension: ((extensions as any) || {}).m4cfp_gpo_experien_avg_fields
      }
    );
  },
  get m4cfp_gpo_experien_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.m4cfp_gpo_experien_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.m4cfp_gpo_experien_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.m4cfp_gpo_experien_bool_exp, true),
            true
          );
        },
        get cfp_id_gpo_exp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cfp_n_gpo_exper() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        }
      },
      { name: "m4cfp_gpo_experien_bool_exp" }
    );
  },
  get m4cfp_gpo_experien_constraint() {
    return new EnumNode({ name: "m4cfp_gpo_experien_constraint" });
  },
  get m4cfp_gpo_experien_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "m4cfp_gpo_experien_inc_input" }
    );
  },
  get m4cfp_gpo_experien_insert_input() {
    return new InputNode(
      {
        get cfp_id_gpo_exp() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_n_gpo_exper() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "m4cfp_gpo_experien_insert_input" }
    );
  },
  get m4cfp_gpo_experien_max_fields() {
    return new ObjectNode(
      {
        get cfp_id_gpo_exp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_n_gpo_exper() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "m4cfp_gpo_experien_max_fields",
        extension: ((extensions as any) || {}).m4cfp_gpo_experien_max_fields
      }
    );
  },
  get m4cfp_gpo_experien_min_fields() {
    return new ObjectNode(
      {
        get cfp_id_gpo_exp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_n_gpo_exper() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "m4cfp_gpo_experien_min_fields",
        extension: ((extensions as any) || {}).m4cfp_gpo_experien_min_fields
      }
    );
  },
  get m4cfp_gpo_experien_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_gpo_experien, false),
            undefined,
            false
          );
        }
      },
      {
        name: "m4cfp_gpo_experien_mutation_response",
        extension: ((extensions as any) || {})
          .m4cfp_gpo_experien_mutation_response
      }
    );
  },
  get m4cfp_gpo_experien_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.m4cfp_gpo_experien_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.m4cfp_gpo_experien_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.m4cfp_gpo_experien_bool_exp, true);
        }
      },
      { name: "m4cfp_gpo_experien_on_conflict" }
    );
  },
  get m4cfp_gpo_experien_order_by() {
    return new InputNode(
      {
        get cfp_id_gpo_exp() {
          return new InputNodeField(schema.order_by, true);
        },
        get cfp_n_gpo_exper() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "m4cfp_gpo_experien_order_by" }
    );
  },
  get m4cfp_gpo_experien_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "m4cfp_gpo_experien_pk_columns_input" }
    );
  },
  get m4cfp_gpo_experien_select_column() {
    return new EnumNode({ name: "m4cfp_gpo_experien_select_column" });
  },
  get m4cfp_gpo_experien_set_input() {
    return new InputNode(
      {
        get cfp_id_gpo_exp() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_n_gpo_exper() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "m4cfp_gpo_experien_set_input" }
    );
  },
  get m4cfp_gpo_experien_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_gpo_experien_stddev_fields",
        extension: ((extensions as any) || {}).m4cfp_gpo_experien_stddev_fields
      }
    );
  },
  get m4cfp_gpo_experien_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_gpo_experien_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .m4cfp_gpo_experien_stddev_pop_fields
      }
    );
  },
  get m4cfp_gpo_experien_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_gpo_experien_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .m4cfp_gpo_experien_stddev_samp_fields
      }
    );
  },
  get m4cfp_gpo_experien_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "m4cfp_gpo_experien_sum_fields",
        extension: ((extensions as any) || {}).m4cfp_gpo_experien_sum_fields
      }
    );
  },
  get m4cfp_gpo_experien_update_column() {
    return new EnumNode({ name: "m4cfp_gpo_experien_update_column" });
  },
  get m4cfp_gpo_experien_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_gpo_experien_var_pop_fields",
        extension: ((extensions as any) || {}).m4cfp_gpo_experien_var_pop_fields
      }
    );
  },
  get m4cfp_gpo_experien_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_gpo_experien_var_samp_fields",
        extension: ((extensions as any) || {})
          .m4cfp_gpo_experien_var_samp_fields
      }
    );
  },
  get m4cfp_gpo_experien_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4cfp_gpo_experien_variance_fields",
        extension: ((extensions as any) || {})
          .m4cfp_gpo_experien_variance_fields
      }
    );
  },
  get m4rch_organization2() {
    return new ObjectNode(
      {
        get dt_last_update() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id_approle() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_level() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get id_organization() {
          return new FieldNode(schema.String, undefined, false);
        },
        get id_secuser() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationbra() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationeng() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationesp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationfra() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationgen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationger() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationita() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "m4rch_organization2",
        extension: ((extensions as any) || {}).m4rch_organization2
      }
    );
  },
  get m4rch_organization2_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.m4rch_organization2_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.m4rch_organization2, false),
            undefined,
            false
          );
        }
      },
      {
        name: "m4rch_organization2_aggregate",
        extension: ((extensions as any) || {}).m4rch_organization2_aggregate
      }
    );
  },
  get m4rch_organization2_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.m4rch_organization2_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4rch_organization2_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.m4rch_organization2_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.m4rch_organization2_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.m4rch_organization2_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.m4rch_organization2_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.m4rch_organization2_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.m4rch_organization2_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.m4rch_organization2_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.m4rch_organization2_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.m4rch_organization2_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "m4rch_organization2_aggregate_fields",
        extension: ((extensions as any) || {})
          .m4rch_organization2_aggregate_fields
      }
    );
  },
  get m4rch_organization2_avg_fields() {
    return new ObjectNode(
      {
        get id_level() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4rch_organization2_avg_fields",
        extension: ((extensions as any) || {}).m4rch_organization2_avg_fields
      }
    );
  },
  get m4rch_organization2_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.m4rch_organization2_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.m4rch_organization2_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.m4rch_organization2_bool_exp, true),
            true
          );
        },
        get dt_last_update() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get id_approle() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id_level() {
          return new InputNodeField(schema.numeric_comparison_exp, true);
        },
        get id_organization() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id_secuser() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nm_organizationbra() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nm_organizationeng() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nm_organizationesp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nm_organizationfra() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nm_organizationgen() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nm_organizationger() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nm_organizationita() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "m4rch_organization2_bool_exp" }
    );
  },
  get m4rch_organization2_constraint() {
    return new EnumNode({ name: "m4rch_organization2_constraint" });
  },
  get m4rch_organization2_inc_input() {
    return new InputNode(
      {
        get id_level() {
          return new InputNodeField(schema.numeric, true);
        }
      },
      { name: "m4rch_organization2_inc_input" }
    );
  },
  get m4rch_organization2_insert_input() {
    return new InputNode(
      {
        get dt_last_update() {
          return new InputNodeField(schema.date, true);
        },
        get id_approle() {
          return new InputNodeField(schema.String, true);
        },
        get id_level() {
          return new InputNodeField(schema.numeric, true);
        },
        get id_organization() {
          return new InputNodeField(schema.String, true);
        },
        get id_secuser() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationbra() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationeng() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationesp() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationfra() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationgen() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationger() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationita() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "m4rch_organization2_insert_input" }
    );
  },
  get m4rch_organization2_max_fields() {
    return new ObjectNode(
      {
        get dt_last_update() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id_approle() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_level() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get id_organization() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_secuser() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationbra() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationeng() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationesp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationfra() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationgen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationger() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationita() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "m4rch_organization2_max_fields",
        extension: ((extensions as any) || {}).m4rch_organization2_max_fields
      }
    );
  },
  get m4rch_organization2_min_fields() {
    return new ObjectNode(
      {
        get dt_last_update() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id_approle() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_level() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get id_organization() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_secuser() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationbra() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationeng() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationesp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationfra() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationgen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationger() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nm_organizationita() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "m4rch_organization2_min_fields",
        extension: ((extensions as any) || {}).m4rch_organization2_min_fields
      }
    );
  },
  get m4rch_organization2_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.m4rch_organization2, false),
            undefined,
            false
          );
        }
      },
      {
        name: "m4rch_organization2_mutation_response",
        extension: ((extensions as any) || {})
          .m4rch_organization2_mutation_response
      }
    );
  },
  get m4rch_organization2_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.m4rch_organization2_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.m4rch_organization2_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.m4rch_organization2_bool_exp, true);
        }
      },
      { name: "m4rch_organization2_on_conflict" }
    );
  },
  get m4rch_organization2_order_by() {
    return new InputNode(
      {
        get dt_last_update() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_approle() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_level() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_organization() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_secuser() {
          return new InputNodeField(schema.order_by, true);
        },
        get nm_organizationbra() {
          return new InputNodeField(schema.order_by, true);
        },
        get nm_organizationeng() {
          return new InputNodeField(schema.order_by, true);
        },
        get nm_organizationesp() {
          return new InputNodeField(schema.order_by, true);
        },
        get nm_organizationfra() {
          return new InputNodeField(schema.order_by, true);
        },
        get nm_organizationgen() {
          return new InputNodeField(schema.order_by, true);
        },
        get nm_organizationger() {
          return new InputNodeField(schema.order_by, true);
        },
        get nm_organizationita() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "m4rch_organization2_order_by" }
    );
  },
  get m4rch_organization2_pk_columns_input() {
    return new InputNode(
      {
        get id_organization() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "m4rch_organization2_pk_columns_input" }
    );
  },
  get m4rch_organization2_select_column() {
    return new EnumNode({ name: "m4rch_organization2_select_column" });
  },
  get m4rch_organization2_set_input() {
    return new InputNode(
      {
        get dt_last_update() {
          return new InputNodeField(schema.date, true);
        },
        get id_approle() {
          return new InputNodeField(schema.String, true);
        },
        get id_level() {
          return new InputNodeField(schema.numeric, true);
        },
        get id_organization() {
          return new InputNodeField(schema.String, true);
        },
        get id_secuser() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationbra() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationeng() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationesp() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationfra() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationgen() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationger() {
          return new InputNodeField(schema.String, true);
        },
        get nm_organizationita() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "m4rch_organization2_set_input" }
    );
  },
  get m4rch_organization2_stddev_fields() {
    return new ObjectNode(
      {
        get id_level() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4rch_organization2_stddev_fields",
        extension: ((extensions as any) || {}).m4rch_organization2_stddev_fields
      }
    );
  },
  get m4rch_organization2_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id_level() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4rch_organization2_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .m4rch_organization2_stddev_pop_fields
      }
    );
  },
  get m4rch_organization2_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id_level() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4rch_organization2_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .m4rch_organization2_stddev_samp_fields
      }
    );
  },
  get m4rch_organization2_sum_fields() {
    return new ObjectNode(
      {
        get id_level() {
          return new FieldNode(schema.numeric, undefined, true);
        }
      },
      {
        name: "m4rch_organization2_sum_fields",
        extension: ((extensions as any) || {}).m4rch_organization2_sum_fields
      }
    );
  },
  get m4rch_organization2_update_column() {
    return new EnumNode({ name: "m4rch_organization2_update_column" });
  },
  get m4rch_organization2_var_pop_fields() {
    return new ObjectNode(
      {
        get id_level() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4rch_organization2_var_pop_fields",
        extension: ((extensions as any) || {})
          .m4rch_organization2_var_pop_fields
      }
    );
  },
  get m4rch_organization2_var_samp_fields() {
    return new ObjectNode(
      {
        get id_level() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4rch_organization2_var_samp_fields",
        extension: ((extensions as any) || {})
          .m4rch_organization2_var_samp_fields
      }
    );
  },
  get m4rch_organization2_variance_fields() {
    return new ObjectNode(
      {
        get id_level() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "m4rch_organization2_variance_fields",
        extension: ((extensions as any) || {})
          .m4rch_organization2_variance_fields
      }
    );
  },
  get menu() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get padre() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get texto() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      { name: "menu", extension: ((extensions as any) || {}).menu }
    );
  },
  get menu_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(schema.menu_aggregate_fields, undefined, true);
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.menu, false),
            undefined,
            false
          );
        }
      },
      {
        name: "menu_aggregate",
        extension: ((extensions as any) || {}).menu_aggregate
      }
    );
  },
  get menu_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.menu_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.menu_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.menu_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.menu_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.menu_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(schema.menu_stddev_pop_fields, undefined, true);
        },
        get stddev_samp() {
          return new FieldNode(schema.menu_stddev_samp_fields, undefined, true);
        },
        get sum() {
          return new FieldNode(schema.menu_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.menu_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.menu_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.menu_variance_fields, undefined, true);
        }
      },
      {
        name: "menu_aggregate_fields",
        extension: ((extensions as any) || {}).menu_aggregate_fields
      }
    );
  },
  get menu_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get padre() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "menu_avg_fields",
        extension: ((extensions as any) || {}).menu_avg_fields
      }
    );
  },
  get menu_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.menu_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.menu_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.menu_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get padre() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get texto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "menu_bool_exp" }
    );
  },
  get menu_constraint() {
    return new EnumNode({ name: "menu_constraint" });
  },
  get menu_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get padre() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "menu_inc_input" }
    );
  },
  get menu_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get padre() {
          return new InputNodeField(schema.Int, true);
        },
        get texto() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "menu_insert_input" }
    );
  },
  get menu_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get padre() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get texto() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "menu_max_fields",
        extension: ((extensions as any) || {}).menu_max_fields
      }
    );
  },
  get menu_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get padre() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get texto() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "menu_min_fields",
        extension: ((extensions as any) || {}).menu_min_fields
      }
    );
  },
  get menu_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.menu, false),
            undefined,
            false
          );
        }
      },
      {
        name: "menu_mutation_response",
        extension: ((extensions as any) || {}).menu_mutation_response
      }
    );
  },
  get menu_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.menu_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.menu_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.menu_bool_exp, true);
        }
      },
      { name: "menu_on_conflict" }
    );
  },
  get menu_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get padre() {
          return new InputNodeField(schema.order_by, true);
        },
        get texto() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "menu_order_by" }
    );
  },
  get menu_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "menu_pk_columns_input" }
    );
  },
  get menu_select_column() {
    return new EnumNode({ name: "menu_select_column" });
  },
  get menu_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get padre() {
          return new InputNodeField(schema.Int, true);
        },
        get texto() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "menu_set_input" }
    );
  },
  get menu_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get padre() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "menu_stddev_fields",
        extension: ((extensions as any) || {}).menu_stddev_fields
      }
    );
  },
  get menu_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get padre() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "menu_stddev_pop_fields",
        extension: ((extensions as any) || {}).menu_stddev_pop_fields
      }
    );
  },
  get menu_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get padre() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "menu_stddev_samp_fields",
        extension: ((extensions as any) || {}).menu_stddev_samp_fields
      }
    );
  },
  get menu_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get padre() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "menu_sum_fields",
        extension: ((extensions as any) || {}).menu_sum_fields
      }
    );
  },
  get menu_update_column() {
    return new EnumNode({ name: "menu_update_column" });
  },
  get menu_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get padre() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "menu_var_pop_fields",
        extension: ((extensions as any) || {}).menu_var_pop_fields
      }
    );
  },
  get menu_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get padre() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "menu_var_samp_fields",
        extension: ((extensions as any) || {}).menu_var_samp_fields
      }
    );
  },
  get menu_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get padre() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "menu_variance_fields",
        extension: ((extensions as any) || {}).menu_variance_fields
      }
    );
  },
  get mind_person() {
    return new ObjectNode(
      {
        get curp() {
          return new FieldNode(schema.bpchar, undefined, false);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get idrusp() {
          return new FieldNode(schema.bpchar, undefined, false);
        },
        get nombre() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "mind_person",
        extension: ((extensions as any) || {}).mind_person
      }
    );
  },
  get mind_person_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.mind_person_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.mind_person, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_person_aggregate",
        extension: ((extensions as any) || {}).mind_person_aggregate
      }
    );
  },
  get mind_person_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.mind_person_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_person_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.mind_person_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.mind_person_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.mind_person_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.mind_person_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.mind_person_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.mind_person_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.mind_person_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.mind_person_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.mind_person_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "mind_person_aggregate_fields",
        extension: ((extensions as any) || {}).mind_person_aggregate_fields
      }
    );
  },
  get mind_person_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_person_avg_fields",
        extension: ((extensions as any) || {}).mind_person_avg_fields
      }
    );
  },
  get mind_person_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.mind_person_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.mind_person_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.mind_person_bool_exp, true),
            true
          );
        },
        get curp() {
          return new InputNodeField(schema.bpchar_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get idrusp() {
          return new InputNodeField(schema.bpchar_comparison_exp, true);
        },
        get nombre() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "mind_person_bool_exp" }
    );
  },
  get mind_person_constraint() {
    return new EnumNode({ name: "mind_person_constraint" });
  },
  get mind_person_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "mind_person_inc_input" }
    );
  },
  get mind_person_insert_input() {
    return new InputNode(
      {
        get curp() {
          return new InputNodeField(schema.bpchar, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get idrusp() {
          return new InputNodeField(schema.bpchar, true);
        },
        get nombre() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_person_insert_input" }
    );
  },
  get mind_person_max_fields() {
    return new ObjectNode(
      {
        get curp() {
          return new FieldNode(schema.bpchar, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idrusp() {
          return new FieldNode(schema.bpchar, undefined, true);
        },
        get nombre() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_person_max_fields",
        extension: ((extensions as any) || {}).mind_person_max_fields
      }
    );
  },
  get mind_person_min_fields() {
    return new ObjectNode(
      {
        get curp() {
          return new FieldNode(schema.bpchar, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idrusp() {
          return new FieldNode(schema.bpchar, undefined, true);
        },
        get nombre() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_person_min_fields",
        extension: ((extensions as any) || {}).mind_person_min_fields
      }
    );
  },
  get mind_person_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.mind_person, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_person_mutation_response",
        extension: ((extensions as any) || {}).mind_person_mutation_response
      }
    );
  },
  get mind_person_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.mind_person_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.mind_person_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.mind_person_bool_exp, true);
        }
      },
      { name: "mind_person_on_conflict" }
    );
  },
  get mind_person_order_by() {
    return new InputNode(
      {
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idrusp() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombre() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_person_order_by" }
    );
  },
  get mind_person_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "mind_person_pk_columns_input" }
    );
  },
  get mind_person_select_column() {
    return new EnumNode({ name: "mind_person_select_column" });
  },
  get mind_person_set_input() {
    return new InputNode(
      {
        get curp() {
          return new InputNodeField(schema.bpchar, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get idrusp() {
          return new InputNodeField(schema.bpchar, true);
        },
        get nombre() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_person_set_input" }
    );
  },
  get mind_person_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_person_stddev_fields",
        extension: ((extensions as any) || {}).mind_person_stddev_fields
      }
    );
  },
  get mind_person_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_person_stddev_pop_fields",
        extension: ((extensions as any) || {}).mind_person_stddev_pop_fields
      }
    );
  },
  get mind_person_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_person_stddev_samp_fields",
        extension: ((extensions as any) || {}).mind_person_stddev_samp_fields
      }
    );
  },
  get mind_person_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "mind_person_sum_fields",
        extension: ((extensions as any) || {}).mind_person_sum_fields
      }
    );
  },
  get mind_person_update_column() {
    return new EnumNode({ name: "mind_person_update_column" });
  },
  get mind_person_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_person_var_pop_fields",
        extension: ((extensions as any) || {}).mind_person_var_pop_fields
      }
    );
  },
  get mind_person_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_person_var_samp_fields",
        extension: ((extensions as any) || {}).mind_person_var_samp_fields
      }
    );
  },
  get mind_person_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_person_variance_fields",
        extension: ((extensions as any) || {}).mind_person_variance_fields
      }
    );
  },
  get mind_rh_grupo_trabajo() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rh_grupo_trabajo_usuarios() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_grupo_trabajo_usuario, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get rh_grupo_trabajo_usuarios_aggregate() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get rh_usuario() {
          return new FieldNode(schema.mind_rh_usuario, undefined, false);
        }
      },
      {
        name: "mind_rh_grupo_trabajo",
        extension: ((extensions as any) || {}).mind_rh_grupo_trabajo
      }
    );
  },
  get mind_rh_grupo_trabajo_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_grupo_trabajo, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_grupo_trabajo_aggregate",
        extension: ((extensions as any) || {}).mind_rh_grupo_trabajo_aggregate
      }
    );
  },
  get mind_rh_grupo_trabajo_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "mind_rh_grupo_trabajo_aggregate_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_aggregate_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_variance_order_by,
            true
          );
        }
      },
      { name: "mind_rh_grupo_trabajo_aggregate_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_grupo_trabajo_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_on_conflict,
            true
          );
        }
      },
      { name: "mind_rh_grupo_trabajo_arr_rel_insert_input" }
    );
  },
  get mind_rh_grupo_trabajo_avg_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_avg_fields",
        extension: ((extensions as any) || {}).mind_rh_grupo_trabajo_avg_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_avg_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_avg_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_grupo_trabajo_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_grupo_trabajo_bool_exp, true),
            true
          );
        },
        get ano() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get curp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get estatus() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get rh_grupo_trabajo_usuarios() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_bool_exp,
            true
          );
        },
        get rh_usuario() {
          return new InputNodeField(schema.mind_rh_usuario_bool_exp, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_bool_exp" }
    );
  },
  get mind_rh_grupo_trabajo_constraint() {
    return new EnumNode({ name: "mind_rh_grupo_trabajo_constraint" });
  },
  get mind_rh_grupo_trabajo_inc_input() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.Int, true);
        },
        get estatus() {
          return new InputNodeField(schema.smallint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_inc_input" }
    );
  },
  get mind_rh_grupo_trabajo_insert_input() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.Int, true);
        },
        get curp() {
          return new InputNodeField(schema.String, true);
        },
        get estatus() {
          return new InputNodeField(schema.smallint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int, true);
        },
        get rh_grupo_trabajo_usuarios() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_arr_rel_insert_input,
            true
          );
        },
        get rh_usuario() {
          return new InputNodeField(
            schema.mind_rh_usuario_obj_rel_insert_input,
            true
          );
        }
      },
      { name: "mind_rh_grupo_trabajo_insert_input" }
    );
  },
  get mind_rh_grupo_trabajo_max_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_max_fields",
        extension: ((extensions as any) || {}).mind_rh_grupo_trabajo_max_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_max_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_max_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_min_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_min_fields",
        extension: ((extensions as any) || {}).mind_rh_grupo_trabajo_min_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_min_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_min_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_grupo_trabajo, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_grupo_trabajo_mutation_response",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_mutation_response
      }
    );
  },
  get mind_rh_grupo_trabajo_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_on_conflict,
            true
          );
        }
      },
      { name: "mind_rh_grupo_trabajo_obj_rel_insert_input" }
    );
  },
  get mind_rh_grupo_trabajo_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_grupo_trabajo_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_bool_exp,
            true
          );
        }
      },
      { name: "mind_rh_grupo_trabajo_on_conflict" }
    );
  },
  get mind_rh_grupo_trabajo_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get rh_grupo_trabajo_usuarios_aggregate() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_aggregate_order_by,
            true
          );
        },
        get rh_usuario() {
          return new InputNodeField(schema.mind_rh_usuario_order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "mind_rh_grupo_trabajo_pk_columns_input" }
    );
  },
  get mind_rh_grupo_trabajo_select_column() {
    return new EnumNode({ name: "mind_rh_grupo_trabajo_select_column" });
  },
  get mind_rh_grupo_trabajo_set_input() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.Int, true);
        },
        get curp() {
          return new InputNodeField(schema.String, true);
        },
        get estatus() {
          return new InputNodeField(schema.smallint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_set_input" }
    );
  },
  get mind_rh_grupo_trabajo_stddev_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_stddev_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_stddev_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_stddev_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_stddev_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_stddev_pop_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_stddev_pop_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_stddev_pop_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_stddev_pop_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_stddev_samp_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_stddev_samp_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_stddev_samp_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_stddev_samp_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_sum_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_sum_fields",
        extension: ((extensions as any) || {}).mind_rh_grupo_trabajo_sum_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_sum_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_sum_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_update_column() {
    return new EnumNode({ name: "mind_rh_grupo_trabajo_update_column" });
  },
  get mind_rh_grupo_trabajo_usuario() {
    return new ObjectNode(
      {
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get curpMiembro() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get id_rh_grupo_trabajo() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rhUsuarioByCurp() {
          return new FieldNode(schema.mind_rh_usuario, undefined, false);
        },
        get rhUsuarioByCurpmiembro() {
          return new FieldNode(schema.mind_rh_usuario, undefined, false);
        },
        get rh_grupo_trabajo() {
          return new FieldNode(schema.mind_rh_grupo_trabajo, undefined, false);
        },
        get rh_usuario() {
          return new FieldNode(schema.mind_rh_usuario, undefined, false);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario",
        extension: ((extensions as any) || {}).mind_rh_grupo_trabajo_usuario
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_grupo_trabajo_usuario, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario_aggregate",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_usuario_aggregate
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario_aggregate_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_usuario_aggregate_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_variance_order_by,
            true
          );
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_aggregate_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.mind_rh_grupo_trabajo_usuario_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_on_conflict,
            true
          );
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_arr_rel_insert_input" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_grupo_trabajo() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario_avg_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_usuario_avg_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_avg_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_grupo_trabajo_usuario_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_grupo_trabajo_usuario_bool_exp, true),
            true
          );
        },
        get curp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get curpMiembro() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get rhUsuarioByCurp() {
          return new InputNodeField(schema.mind_rh_usuario_bool_exp, true);
        },
        get rhUsuarioByCurpmiembro() {
          return new InputNodeField(schema.mind_rh_usuario_bool_exp, true);
        },
        get rh_grupo_trabajo() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_bool_exp,
            true
          );
        },
        get rh_usuario() {
          return new InputNodeField(schema.mind_rh_usuario_bool_exp, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_bool_exp" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_constraint() {
    return new EnumNode({ name: "mind_rh_grupo_trabajo_usuario_constraint" });
  },
  get mind_rh_grupo_trabajo_usuario_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_inc_input" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_insert_input() {
    return new InputNode(
      {
        get curp() {
          return new InputNodeField(schema.String, true);
        },
        get curpMiembro() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int, true);
        },
        get rhUsuarioByCurp() {
          return new InputNodeField(
            schema.mind_rh_usuario_obj_rel_insert_input,
            true
          );
        },
        get rhUsuarioByCurpmiembro() {
          return new InputNodeField(
            schema.mind_rh_usuario_obj_rel_insert_input,
            true
          );
        },
        get rh_grupo_trabajo() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_obj_rel_insert_input,
            true
          );
        },
        get rh_usuario() {
          return new InputNodeField(
            schema.mind_rh_usuario_obj_rel_insert_input,
            true
          );
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_insert_input" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_max_fields() {
    return new ObjectNode(
      {
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get curpMiembro() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_grupo_trabajo() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario_max_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_usuario_max_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_max_order_by() {
    return new InputNode(
      {
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get curpMiembro() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_max_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_min_fields() {
    return new ObjectNode(
      {
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get curpMiembro() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_grupo_trabajo() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario_min_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_usuario_min_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_min_order_by() {
    return new InputNode(
      {
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get curpMiembro() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_min_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_grupo_trabajo_usuario, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario_mutation_response",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_usuario_mutation_response
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.mind_rh_grupo_trabajo_usuario_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_bool_exp,
            true
          );
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_on_conflict" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_order_by() {
    return new InputNode(
      {
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get curpMiembro() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get rhUsuarioByCurp() {
          return new InputNodeField(schema.mind_rh_usuario_order_by, true);
        },
        get rhUsuarioByCurpmiembro() {
          return new InputNodeField(schema.mind_rh_usuario_order_by, true);
        },
        get rh_grupo_trabajo() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_order_by,
            true
          );
        },
        get rh_usuario() {
          return new InputNodeField(schema.mind_rh_usuario_order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_pk_columns_input" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_select_column() {
    return new EnumNode({
      name: "mind_rh_grupo_trabajo_usuario_select_column"
    });
  },
  get mind_rh_grupo_trabajo_usuario_set_input() {
    return new InputNode(
      {
        get curp() {
          return new InputNodeField(schema.String, true);
        },
        get curpMiembro() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_set_input" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_grupo_trabajo() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario_stddev_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_usuario_stddev_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_stddev_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_grupo_trabajo() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_usuario_stddev_pop_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_stddev_pop_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_grupo_trabajo() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_usuario_stddev_samp_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_stddev_samp_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_grupo_trabajo() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario_sum_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_usuario_sum_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_sum_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_update_column() {
    return new EnumNode({
      name: "mind_rh_grupo_trabajo_usuario_update_column"
    });
  },
  get mind_rh_grupo_trabajo_usuario_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_grupo_trabajo() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario_var_pop_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_usuario_var_pop_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_var_pop_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_grupo_trabajo() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario_var_samp_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_usuario_var_samp_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_var_samp_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_usuario_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_grupo_trabajo() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_usuario_variance_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_usuario_variance_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_usuario_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_grupo_trabajo() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_usuario_variance_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_var_pop_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_var_pop_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_var_pop_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_var_pop_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_var_pop_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_var_samp_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_var_samp_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_var_samp_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_var_samp_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_var_samp_order_by" }
    );
  },
  get mind_rh_grupo_trabajo_variance_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_grupo_trabajo_variance_fields",
        extension: ((extensions as any) || {})
          .mind_rh_grupo_trabajo_variance_fields
      }
    );
  },
  get mind_rh_grupo_trabajo_variance_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_grupo_trabajo_variance_order_by" }
    );
  },
  get mind_rh_igr() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, false);
        },
        get igr() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_igr",
        extension: ((extensions as any) || {}).mind_rh_igr
      }
    );
  },
  get mind_rh_igr_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.mind_rh_igr_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_igr, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_igr_aggregate",
        extension: ((extensions as any) || {}).mind_rh_igr_aggregate
      }
    );
  },
  get mind_rh_igr_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.mind_rh_igr_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_igr_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.mind_rh_igr_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.mind_rh_igr_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.mind_rh_igr_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.mind_rh_igr_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.mind_rh_igr_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.mind_rh_igr_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.mind_rh_igr_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.mind_rh_igr_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.mind_rh_igr_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "mind_rh_igr_aggregate_fields",
        extension: ((extensions as any) || {}).mind_rh_igr_aggregate_fields
      }
    );
  },
  get mind_rh_igr_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_igr_avg_fields",
        extension: ((extensions as any) || {}).mind_rh_igr_avg_fields
      }
    );
  },
  get mind_rh_igr_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_igr_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.mind_rh_igr_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_igr_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get igr() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "mind_rh_igr_bool_exp" }
    );
  },
  get mind_rh_igr_constraint() {
    return new EnumNode({ name: "mind_rh_igr_constraint" });
  },
  get mind_rh_igr_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, true);
        }
      },
      { name: "mind_rh_igr_inc_input" }
    );
  },
  get mind_rh_igr_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, true);
        },
        get igr() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_igr_insert_input" }
    );
  },
  get mind_rh_igr_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get igr() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_igr_max_fields",
        extension: ((extensions as any) || {}).mind_rh_igr_max_fields
      }
    );
  },
  get mind_rh_igr_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get igr() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_igr_min_fields",
        extension: ((extensions as any) || {}).mind_rh_igr_min_fields
      }
    );
  },
  get mind_rh_igr_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_igr, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_igr_mutation_response",
        extension: ((extensions as any) || {}).mind_rh_igr_mutation_response
      }
    );
  },
  get mind_rh_igr_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.mind_rh_igr_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.mind_rh_igr_on_conflict, true);
        }
      },
      { name: "mind_rh_igr_obj_rel_insert_input" }
    );
  },
  get mind_rh_igr_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.mind_rh_igr_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_igr_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.mind_rh_igr_bool_exp, true);
        }
      },
      { name: "mind_rh_igr_on_conflict" }
    );
  },
  get mind_rh_igr_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get igr() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_igr_order_by" }
    );
  },
  get mind_rh_igr_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, false);
        }
      },
      { name: "mind_rh_igr_pk_columns_input" }
    );
  },
  get mind_rh_igr_select_column() {
    return new EnumNode({ name: "mind_rh_igr_select_column" });
  },
  get mind_rh_igr_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, true);
        },
        get igr() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_igr_set_input" }
    );
  },
  get mind_rh_igr_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_igr_stddev_fields",
        extension: ((extensions as any) || {}).mind_rh_igr_stddev_fields
      }
    );
  },
  get mind_rh_igr_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_igr_stddev_pop_fields",
        extension: ((extensions as any) || {}).mind_rh_igr_stddev_pop_fields
      }
    );
  },
  get mind_rh_igr_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_igr_stddev_samp_fields",
        extension: ((extensions as any) || {}).mind_rh_igr_stddev_samp_fields
      }
    );
  },
  get mind_rh_igr_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, true);
        }
      },
      {
        name: "mind_rh_igr_sum_fields",
        extension: ((extensions as any) || {}).mind_rh_igr_sum_fields
      }
    );
  },
  get mind_rh_igr_update_column() {
    return new EnumNode({ name: "mind_rh_igr_update_column" });
  },
  get mind_rh_igr_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_igr_var_pop_fields",
        extension: ((extensions as any) || {}).mind_rh_igr_var_pop_fields
      }
    );
  },
  get mind_rh_igr_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_igr_var_samp_fields",
        extension: ((extensions as any) || {}).mind_rh_igr_var_samp_fields
      }
    );
  },
  get mind_rh_igr_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_igr_variance_fields",
        extension: ((extensions as any) || {}).mind_rh_igr_variance_fields
      }
    );
  },
  get mind_rh_meta_individual() {
    return new ObjectNode(
      {
        get aceptable() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ano() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, false);
        },
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get descripcion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get id_rh_igr() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_tipo_meta() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inaceptable() {
          return new FieldNode(schema.String, undefined, true);
        },
        get meta() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get objetivo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get observacion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get otro() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get ramo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get resultados() {
          return new FieldNode(schema.String, undefined, true);
        },
        get rh_igr() {
          return new FieldNode(schema.mind_rh_igr, undefined, false);
        },
        get rh_pnd() {
          return new FieldNode(schema.mind_rh_pnd, undefined, false);
        },
        get rh_unidad_medida() {
          return new FieldNode(schema.mind_rh_unidad_medida, undefined, false);
        },
        get rh_usuario() {
          return new FieldNode(schema.mind_rh_usuario, undefined, false);
        },
        get satisfactorio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        },
        get verbo() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_individual",
        extension: ((extensions as any) || {}).mind_rh_meta_individual
      }
    );
  },
  get mind_rh_meta_individual_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.mind_rh_meta_individual_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_meta_individual, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_meta_individual_aggregate",
        extension: ((extensions as any) || {}).mind_rh_meta_individual_aggregate
      }
    );
  },
  get mind_rh_meta_individual_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.mind_rh_meta_individual_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_individual_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.mind_rh_meta_individual_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.mind_rh_meta_individual_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.mind_rh_meta_individual_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.mind_rh_meta_individual_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.mind_rh_meta_individual_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.mind_rh_meta_individual_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.mind_rh_meta_individual_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.mind_rh_meta_individual_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.mind_rh_meta_individual_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "mind_rh_meta_individual_aggregate_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_individual_aggregate_fields
      }
    );
  },
  get mind_rh_meta_individual_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_variance_order_by,
            true
          );
        }
      },
      { name: "mind_rh_meta_individual_aggregate_order_by" }
    );
  },
  get mind_rh_meta_individual_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_meta_individual_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_on_conflict,
            true
          );
        }
      },
      { name: "mind_rh_meta_individual_arr_rel_insert_input" }
    );
  },
  get mind_rh_meta_individual_avg_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_tipo_meta() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_individual_avg_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_individual_avg_fields
      }
    );
  },
  get mind_rh_meta_individual_avg_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_individual_avg_order_by" }
    );
  },
  get mind_rh_meta_individual_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_meta_individual_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_meta_individual_bool_exp, true),
            true
          );
        },
        get aceptable() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get ano() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        },
        get curp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get descripcion() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get estatus() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inaceptable() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get meta() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get numero() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get objetivo() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get observacion() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get otro() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get ramo() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get resultados() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get rh_igr() {
          return new InputNodeField(schema.mind_rh_igr_bool_exp, true);
        },
        get rh_pnd() {
          return new InputNodeField(schema.mind_rh_pnd_bool_exp, true);
        },
        get rh_unidad_medida() {
          return new InputNodeField(
            schema.mind_rh_unidad_medida_bool_exp,
            true
          );
        },
        get rh_usuario() {
          return new InputNodeField(schema.mind_rh_usuario_bool_exp, true);
        },
        get satisfactorio() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get ur() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get verbo() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "mind_rh_meta_individual_bool_exp" }
    );
  },
  get mind_rh_meta_individual_constraint() {
    return new EnumNode({ name: "mind_rh_meta_individual_constraint" });
  },
  get mind_rh_meta_individual_inc_input() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.Int, true);
        },
        get estatus() {
          return new InputNodeField(schema.smallint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int, true);
        },
        get numero() {
          return new InputNodeField(schema.Int, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "mind_rh_meta_individual_inc_input" }
    );
  },
  get mind_rh_meta_individual_insert_input() {
    return new InputNode(
      {
        get aceptable() {
          return new InputNodeField(schema.String, true);
        },
        get ano() {
          return new InputNodeField(schema.Int, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get curp() {
          return new InputNodeField(schema.String, true);
        },
        get descripcion() {
          return new InputNodeField(schema.String, true);
        },
        get estatus() {
          return new InputNodeField(schema.smallint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int, true);
        },
        get inaceptable() {
          return new InputNodeField(schema.String, true);
        },
        get meta() {
          return new InputNodeField(schema.String, true);
        },
        get numero() {
          return new InputNodeField(schema.Int, true);
        },
        get objetivo() {
          return new InputNodeField(schema.String, true);
        },
        get observacion() {
          return new InputNodeField(schema.String, true);
        },
        get otro() {
          return new InputNodeField(schema.String, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.Int, true);
        },
        get ramo() {
          return new InputNodeField(schema.String, true);
        },
        get resultados() {
          return new InputNodeField(schema.String, true);
        },
        get rh_igr() {
          return new InputNodeField(
            schema.mind_rh_igr_obj_rel_insert_input,
            true
          );
        },
        get rh_pnd() {
          return new InputNodeField(
            schema.mind_rh_pnd_obj_rel_insert_input,
            true
          );
        },
        get rh_unidad_medida() {
          return new InputNodeField(
            schema.mind_rh_unidad_medida_obj_rel_insert_input,
            true
          );
        },
        get rh_usuario() {
          return new InputNodeField(
            schema.mind_rh_usuario_obj_rel_insert_input,
            true
          );
        },
        get satisfactorio() {
          return new InputNodeField(schema.String, true);
        },
        get ur() {
          return new InputNodeField(schema.String, true);
        },
        get verbo() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_meta_individual_insert_input" }
    );
  },
  get mind_rh_meta_individual_max_fields() {
    return new ObjectNode(
      {
        get aceptable() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ano() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get descripcion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_tipo_meta() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inaceptable() {
          return new FieldNode(schema.String, undefined, true);
        },
        get meta() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get objetivo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get observacion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get otro() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get ramo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get resultados() {
          return new FieldNode(schema.String, undefined, true);
        },
        get satisfactorio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        },
        get verbo() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_individual_max_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_individual_max_fields
      }
    );
  },
  get mind_rh_meta_individual_max_order_by() {
    return new InputNode(
      {
        get aceptable() {
          return new InputNodeField(schema.order_by, true);
        },
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get created_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get descripcion() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get inaceptable() {
          return new InputNodeField(schema.order_by, true);
        },
        get meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get objetivo() {
          return new InputNodeField(schema.order_by, true);
        },
        get observacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get otro() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get ramo() {
          return new InputNodeField(schema.order_by, true);
        },
        get resultados() {
          return new InputNodeField(schema.order_by, true);
        },
        get satisfactorio() {
          return new InputNodeField(schema.order_by, true);
        },
        get ur() {
          return new InputNodeField(schema.order_by, true);
        },
        get verbo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_individual_max_order_by" }
    );
  },
  get mind_rh_meta_individual_min_fields() {
    return new ObjectNode(
      {
        get aceptable() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ano() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get descripcion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_tipo_meta() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inaceptable() {
          return new FieldNode(schema.String, undefined, true);
        },
        get meta() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get objetivo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get observacion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get otro() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get ramo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get resultados() {
          return new FieldNode(schema.String, undefined, true);
        },
        get satisfactorio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        },
        get verbo() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_individual_min_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_individual_min_fields
      }
    );
  },
  get mind_rh_meta_individual_min_order_by() {
    return new InputNode(
      {
        get aceptable() {
          return new InputNodeField(schema.order_by, true);
        },
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get created_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get descripcion() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get inaceptable() {
          return new InputNodeField(schema.order_by, true);
        },
        get meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get objetivo() {
          return new InputNodeField(schema.order_by, true);
        },
        get observacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get otro() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get ramo() {
          return new InputNodeField(schema.order_by, true);
        },
        get resultados() {
          return new InputNodeField(schema.order_by, true);
        },
        get satisfactorio() {
          return new InputNodeField(schema.order_by, true);
        },
        get ur() {
          return new InputNodeField(schema.order_by, true);
        },
        get verbo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_individual_min_order_by" }
    );
  },
  get mind_rh_meta_individual_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_meta_individual, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_meta_individual_mutation_response",
        extension: ((extensions as any) || {})
          .mind_rh_meta_individual_mutation_response
      }
    );
  },
  get mind_rh_meta_individual_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_meta_individual_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_bool_exp,
            true
          );
        }
      },
      { name: "mind_rh_meta_individual_on_conflict" }
    );
  },
  get mind_rh_meta_individual_order_by() {
    return new InputNode(
      {
        get aceptable() {
          return new InputNodeField(schema.order_by, true);
        },
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get created_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get descripcion() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get inaceptable() {
          return new InputNodeField(schema.order_by, true);
        },
        get meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get objetivo() {
          return new InputNodeField(schema.order_by, true);
        },
        get observacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get otro() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get ramo() {
          return new InputNodeField(schema.order_by, true);
        },
        get resultados() {
          return new InputNodeField(schema.order_by, true);
        },
        get rh_igr() {
          return new InputNodeField(schema.mind_rh_igr_order_by, true);
        },
        get rh_pnd() {
          return new InputNodeField(schema.mind_rh_pnd_order_by, true);
        },
        get rh_unidad_medida() {
          return new InputNodeField(
            schema.mind_rh_unidad_medida_order_by,
            true
          );
        },
        get rh_usuario() {
          return new InputNodeField(schema.mind_rh_usuario_order_by, true);
        },
        get satisfactorio() {
          return new InputNodeField(schema.order_by, true);
        },
        get ur() {
          return new InputNodeField(schema.order_by, true);
        },
        get verbo() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_individual_order_by" }
    );
  },
  get mind_rh_meta_individual_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "mind_rh_meta_individual_pk_columns_input" }
    );
  },
  get mind_rh_meta_individual_select_column() {
    return new EnumNode({ name: "mind_rh_meta_individual_select_column" });
  },
  get mind_rh_meta_individual_set_input() {
    return new InputNode(
      {
        get aceptable() {
          return new InputNodeField(schema.String, true);
        },
        get ano() {
          return new InputNodeField(schema.Int, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get curp() {
          return new InputNodeField(schema.String, true);
        },
        get descripcion() {
          return new InputNodeField(schema.String, true);
        },
        get estatus() {
          return new InputNodeField(schema.smallint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int, true);
        },
        get inaceptable() {
          return new InputNodeField(schema.String, true);
        },
        get meta() {
          return new InputNodeField(schema.String, true);
        },
        get numero() {
          return new InputNodeField(schema.Int, true);
        },
        get objetivo() {
          return new InputNodeField(schema.String, true);
        },
        get observacion() {
          return new InputNodeField(schema.String, true);
        },
        get otro() {
          return new InputNodeField(schema.String, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.Int, true);
        },
        get ramo() {
          return new InputNodeField(schema.String, true);
        },
        get resultados() {
          return new InputNodeField(schema.String, true);
        },
        get satisfactorio() {
          return new InputNodeField(schema.String, true);
        },
        get ur() {
          return new InputNodeField(schema.String, true);
        },
        get verbo() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_meta_individual_set_input" }
    );
  },
  get mind_rh_meta_individual_stddev_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_tipo_meta() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_individual_stddev_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_individual_stddev_fields
      }
    );
  },
  get mind_rh_meta_individual_stddev_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_individual_stddev_order_by" }
    );
  },
  get mind_rh_meta_individual_stddev_pop_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_tipo_meta() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_individual_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_individual_stddev_pop_fields
      }
    );
  },
  get mind_rh_meta_individual_stddev_pop_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_individual_stddev_pop_order_by" }
    );
  },
  get mind_rh_meta_individual_stddev_samp_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_tipo_meta() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_individual_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_individual_stddev_samp_fields
      }
    );
  },
  get mind_rh_meta_individual_stddev_samp_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_individual_stddev_samp_order_by" }
    );
  },
  get mind_rh_meta_individual_sum_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_tipo_meta() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_individual_sum_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_individual_sum_fields
      }
    );
  },
  get mind_rh_meta_individual_sum_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_individual_sum_order_by" }
    );
  },
  get mind_rh_meta_individual_update_column() {
    return new EnumNode({ name: "mind_rh_meta_individual_update_column" });
  },
  get mind_rh_meta_individual_var_pop_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_tipo_meta() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_individual_var_pop_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_individual_var_pop_fields
      }
    );
  },
  get mind_rh_meta_individual_var_pop_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_individual_var_pop_order_by" }
    );
  },
  get mind_rh_meta_individual_var_samp_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_tipo_meta() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_individual_var_samp_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_individual_var_samp_fields
      }
    );
  },
  get mind_rh_meta_individual_var_samp_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_individual_var_samp_order_by" }
    );
  },
  get mind_rh_meta_individual_variance_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_tipo_meta() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_individual_variance_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_individual_variance_fields
      }
    );
  },
  get mind_rh_meta_individual_variance_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_tipo_meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_individual_variance_order_by" }
    );
  },
  get mind_rh_meta_institucional() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, false);
        },
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get descripcion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get id_rh_igr() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get igr() {
          return new FieldNode(schema.String, undefined, true);
        },
        get meta() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get otro() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get ramo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get resultados() {
          return new FieldNode(schema.String, undefined, true);
        },
        get rh_igr() {
          return new FieldNode(schema.mind_rh_igr, undefined, false);
        },
        get rh_pnd() {
          return new FieldNode(schema.mind_rh_pnd, undefined, false);
        },
        get rh_unidad_medida() {
          return new FieldNode(schema.mind_rh_unidad_medida, undefined, false);
        },
        get rh_usuario() {
          return new FieldNode(schema.mind_rh_usuario, undefined, false);
        },
        get unidad_medida() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_institucional",
        extension: ((extensions as any) || {}).mind_rh_meta_institucional
      }
    );
  },
  get mind_rh_meta_institucional_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_meta_institucional, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_meta_institucional_aggregate",
        extension: ((extensions as any) || {})
          .mind_rh_meta_institucional_aggregate
      }
    );
  },
  get mind_rh_meta_institucional_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "mind_rh_meta_institucional_aggregate_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_institucional_aggregate_fields
      }
    );
  },
  get mind_rh_meta_institucional_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_variance_order_by,
            true
          );
        }
      },
      { name: "mind_rh_meta_institucional_aggregate_order_by" }
    );
  },
  get mind_rh_meta_institucional_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.mind_rh_meta_institucional_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_on_conflict,
            true
          );
        }
      },
      { name: "mind_rh_meta_institucional_arr_rel_insert_input" }
    );
  },
  get mind_rh_meta_institucional_avg_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_institucional_avg_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_institucional_avg_fields
      }
    );
  },
  get mind_rh_meta_institucional_avg_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_institucional_avg_order_by" }
    );
  },
  get mind_rh_meta_institucional_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_meta_institucional_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_meta_institucional_bool_exp, true),
            true
          );
        },
        get ano() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        },
        get curp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get descripcion() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get estatus() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get igr() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get meta() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get numero() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get otro() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get ramo() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get resultados() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get rh_igr() {
          return new InputNodeField(schema.mind_rh_igr_bool_exp, true);
        },
        get rh_pnd() {
          return new InputNodeField(schema.mind_rh_pnd_bool_exp, true);
        },
        get rh_unidad_medida() {
          return new InputNodeField(
            schema.mind_rh_unidad_medida_bool_exp,
            true
          );
        },
        get rh_usuario() {
          return new InputNodeField(schema.mind_rh_usuario_bool_exp, true);
        },
        get unidad_medida() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get ur() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "mind_rh_meta_institucional_bool_exp" }
    );
  },
  get mind_rh_meta_institucional_constraint() {
    return new EnumNode({ name: "mind_rh_meta_institucional_constraint" });
  },
  get mind_rh_meta_institucional_inc_input() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.Int, true);
        },
        get estatus() {
          return new InputNodeField(schema.smallint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int, true);
        },
        get numero() {
          return new InputNodeField(schema.Int, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "mind_rh_meta_institucional_inc_input" }
    );
  },
  get mind_rh_meta_institucional_insert_input() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.Int, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get curp() {
          return new InputNodeField(schema.String, true);
        },
        get descripcion() {
          return new InputNodeField(schema.String, true);
        },
        get estatus() {
          return new InputNodeField(schema.smallint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int, true);
        },
        get igr() {
          return new InputNodeField(schema.String, true);
        },
        get meta() {
          return new InputNodeField(schema.String, true);
        },
        get numero() {
          return new InputNodeField(schema.Int, true);
        },
        get otro() {
          return new InputNodeField(schema.String, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.Int, true);
        },
        get ramo() {
          return new InputNodeField(schema.String, true);
        },
        get resultados() {
          return new InputNodeField(schema.String, true);
        },
        get rh_igr() {
          return new InputNodeField(
            schema.mind_rh_igr_obj_rel_insert_input,
            true
          );
        },
        get rh_pnd() {
          return new InputNodeField(
            schema.mind_rh_pnd_obj_rel_insert_input,
            true
          );
        },
        get rh_unidad_medida() {
          return new InputNodeField(
            schema.mind_rh_unidad_medida_obj_rel_insert_input,
            true
          );
        },
        get rh_usuario() {
          return new InputNodeField(
            schema.mind_rh_usuario_obj_rel_insert_input,
            true
          );
        },
        get unidad_medida() {
          return new InputNodeField(schema.String, true);
        },
        get ur() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_meta_institucional_insert_input" }
    );
  },
  get mind_rh_meta_institucional_max_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get descripcion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get igr() {
          return new FieldNode(schema.String, undefined, true);
        },
        get meta() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get otro() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get ramo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get resultados() {
          return new FieldNode(schema.String, undefined, true);
        },
        get unidad_medida() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_institucional_max_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_institucional_max_fields
      }
    );
  },
  get mind_rh_meta_institucional_max_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get created_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get descripcion() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get otro() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get ramo() {
          return new InputNodeField(schema.order_by, true);
        },
        get resultados() {
          return new InputNodeField(schema.order_by, true);
        },
        get unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get ur() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_institucional_max_order_by" }
    );
  },
  get mind_rh_meta_institucional_min_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get descripcion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get igr() {
          return new FieldNode(schema.String, undefined, true);
        },
        get meta() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get otro() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get ramo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get resultados() {
          return new FieldNode(schema.String, undefined, true);
        },
        get unidad_medida() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_institucional_min_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_institucional_min_fields
      }
    );
  },
  get mind_rh_meta_institucional_min_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get created_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get descripcion() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get otro() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get ramo() {
          return new InputNodeField(schema.order_by, true);
        },
        get resultados() {
          return new InputNodeField(schema.order_by, true);
        },
        get unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get ur() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_institucional_min_order_by" }
    );
  },
  get mind_rh_meta_institucional_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_meta_institucional, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_meta_institucional_mutation_response",
        extension: ((extensions as any) || {})
          .mind_rh_meta_institucional_mutation_response
      }
    );
  },
  get mind_rh_meta_institucional_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.mind_rh_meta_institucional_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_bool_exp,
            true
          );
        }
      },
      { name: "mind_rh_meta_institucional_on_conflict" }
    );
  },
  get mind_rh_meta_institucional_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get created_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get descripcion() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get meta() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get otro() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get ramo() {
          return new InputNodeField(schema.order_by, true);
        },
        get resultados() {
          return new InputNodeField(schema.order_by, true);
        },
        get rh_igr() {
          return new InputNodeField(schema.mind_rh_igr_order_by, true);
        },
        get rh_pnd() {
          return new InputNodeField(schema.mind_rh_pnd_order_by, true);
        },
        get rh_unidad_medida() {
          return new InputNodeField(
            schema.mind_rh_unidad_medida_order_by,
            true
          );
        },
        get rh_usuario() {
          return new InputNodeField(schema.mind_rh_usuario_order_by, true);
        },
        get unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get ur() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_institucional_order_by" }
    );
  },
  get mind_rh_meta_institucional_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "mind_rh_meta_institucional_pk_columns_input" }
    );
  },
  get mind_rh_meta_institucional_select_column() {
    return new EnumNode({ name: "mind_rh_meta_institucional_select_column" });
  },
  get mind_rh_meta_institucional_set_input() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.Int, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get curp() {
          return new InputNodeField(schema.String, true);
        },
        get descripcion() {
          return new InputNodeField(schema.String, true);
        },
        get estatus() {
          return new InputNodeField(schema.smallint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.smallint, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.Int, true);
        },
        get igr() {
          return new InputNodeField(schema.String, true);
        },
        get meta() {
          return new InputNodeField(schema.String, true);
        },
        get numero() {
          return new InputNodeField(schema.Int, true);
        },
        get otro() {
          return new InputNodeField(schema.String, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.Int, true);
        },
        get ramo() {
          return new InputNodeField(schema.String, true);
        },
        get resultados() {
          return new InputNodeField(schema.String, true);
        },
        get unidad_medida() {
          return new InputNodeField(schema.String, true);
        },
        get ur() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_meta_institucional_set_input" }
    );
  },
  get mind_rh_meta_institucional_stddev_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_institucional_stddev_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_institucional_stddev_fields
      }
    );
  },
  get mind_rh_meta_institucional_stddev_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_institucional_stddev_order_by" }
    );
  },
  get mind_rh_meta_institucional_stddev_pop_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_institucional_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_institucional_stddev_pop_fields
      }
    );
  },
  get mind_rh_meta_institucional_stddev_pop_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_institucional_stddev_pop_order_by" }
    );
  },
  get mind_rh_meta_institucional_stddev_samp_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_institucional_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_institucional_stddev_samp_fields
      }
    );
  },
  get mind_rh_meta_institucional_stddev_samp_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_institucional_stddev_samp_order_by" }
    );
  },
  get mind_rh_meta_institucional_sum_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_institucional_sum_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_institucional_sum_fields
      }
    );
  },
  get mind_rh_meta_institucional_sum_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_institucional_sum_order_by" }
    );
  },
  get mind_rh_meta_institucional_update_column() {
    return new EnumNode({ name: "mind_rh_meta_institucional_update_column" });
  },
  get mind_rh_meta_institucional_var_pop_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_institucional_var_pop_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_institucional_var_pop_fields
      }
    );
  },
  get mind_rh_meta_institucional_var_pop_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_institucional_var_pop_order_by" }
    );
  },
  get mind_rh_meta_institucional_var_samp_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_institucional_var_samp_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_institucional_var_samp_fields
      }
    );
  },
  get mind_rh_meta_institucional_var_samp_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_institucional_var_samp_order_by" }
    );
  },
  get mind_rh_meta_institucional_variance_fields() {
    return new ObjectNode(
      {
        get ano() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estatus() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_igr() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_pnd() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_unidad_medida() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_rh_usuario() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numero() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get ponderacion() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_meta_institucional_variance_fields",
        extension: ((extensions as any) || {})
          .mind_rh_meta_institucional_variance_fields
      }
    );
  },
  get mind_rh_meta_institucional_variance_order_by() {
    return new InputNode(
      {
        get ano() {
          return new InputNodeField(schema.order_by, true);
        },
        get estatus() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_igr() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_pnd() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_unidad_medida() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_rh_usuario() {
          return new InputNodeField(schema.order_by, true);
        },
        get numero() {
          return new InputNodeField(schema.order_by, true);
        },
        get ponderacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_meta_institucional_variance_order_by" }
    );
  },
  get mind_rh_pnd() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, false);
        },
        get pnd() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_pnd",
        extension: ((extensions as any) || {}).mind_rh_pnd
      }
    );
  },
  get mind_rh_pnd_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.mind_rh_pnd_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_pnd, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_pnd_aggregate",
        extension: ((extensions as any) || {}).mind_rh_pnd_aggregate
      }
    );
  },
  get mind_rh_pnd_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.mind_rh_pnd_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_pnd_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.mind_rh_pnd_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.mind_rh_pnd_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.mind_rh_pnd_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.mind_rh_pnd_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.mind_rh_pnd_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.mind_rh_pnd_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.mind_rh_pnd_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.mind_rh_pnd_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.mind_rh_pnd_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "mind_rh_pnd_aggregate_fields",
        extension: ((extensions as any) || {}).mind_rh_pnd_aggregate_fields
      }
    );
  },
  get mind_rh_pnd_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_pnd_avg_fields",
        extension: ((extensions as any) || {}).mind_rh_pnd_avg_fields
      }
    );
  },
  get mind_rh_pnd_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_pnd_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.mind_rh_pnd_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_pnd_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get pnd() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "mind_rh_pnd_bool_exp" }
    );
  },
  get mind_rh_pnd_constraint() {
    return new EnumNode({ name: "mind_rh_pnd_constraint" });
  },
  get mind_rh_pnd_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, true);
        }
      },
      { name: "mind_rh_pnd_inc_input" }
    );
  },
  get mind_rh_pnd_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, true);
        },
        get pnd() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_pnd_insert_input" }
    );
  },
  get mind_rh_pnd_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get pnd() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_pnd_max_fields",
        extension: ((extensions as any) || {}).mind_rh_pnd_max_fields
      }
    );
  },
  get mind_rh_pnd_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get pnd() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_pnd_min_fields",
        extension: ((extensions as any) || {}).mind_rh_pnd_min_fields
      }
    );
  },
  get mind_rh_pnd_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_pnd, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_pnd_mutation_response",
        extension: ((extensions as any) || {}).mind_rh_pnd_mutation_response
      }
    );
  },
  get mind_rh_pnd_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.mind_rh_pnd_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.mind_rh_pnd_on_conflict, true);
        }
      },
      { name: "mind_rh_pnd_obj_rel_insert_input" }
    );
  },
  get mind_rh_pnd_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.mind_rh_pnd_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_pnd_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.mind_rh_pnd_bool_exp, true);
        }
      },
      { name: "mind_rh_pnd_on_conflict" }
    );
  },
  get mind_rh_pnd_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get pnd() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_pnd_order_by" }
    );
  },
  get mind_rh_pnd_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, false);
        }
      },
      { name: "mind_rh_pnd_pk_columns_input" }
    );
  },
  get mind_rh_pnd_select_column() {
    return new EnumNode({ name: "mind_rh_pnd_select_column" });
  },
  get mind_rh_pnd_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, true);
        },
        get pnd() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_pnd_set_input" }
    );
  },
  get mind_rh_pnd_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_pnd_stddev_fields",
        extension: ((extensions as any) || {}).mind_rh_pnd_stddev_fields
      }
    );
  },
  get mind_rh_pnd_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_pnd_stddev_pop_fields",
        extension: ((extensions as any) || {}).mind_rh_pnd_stddev_pop_fields
      }
    );
  },
  get mind_rh_pnd_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_pnd_stddev_samp_fields",
        extension: ((extensions as any) || {}).mind_rh_pnd_stddev_samp_fields
      }
    );
  },
  get mind_rh_pnd_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, true);
        }
      },
      {
        name: "mind_rh_pnd_sum_fields",
        extension: ((extensions as any) || {}).mind_rh_pnd_sum_fields
      }
    );
  },
  get mind_rh_pnd_update_column() {
    return new EnumNode({ name: "mind_rh_pnd_update_column" });
  },
  get mind_rh_pnd_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_pnd_var_pop_fields",
        extension: ((extensions as any) || {}).mind_rh_pnd_var_pop_fields
      }
    );
  },
  get mind_rh_pnd_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_pnd_var_samp_fields",
        extension: ((extensions as any) || {}).mind_rh_pnd_var_samp_fields
      }
    );
  },
  get mind_rh_pnd_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_pnd_variance_fields",
        extension: ((extensions as any) || {}).mind_rh_pnd_variance_fields
      }
    );
  },
  get mind_rh_tipo_meta() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, false);
        },
        get tipo_meta() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_tipo_meta",
        extension: ((extensions as any) || {}).mind_rh_tipo_meta
      }
    );
  },
  get mind_rh_tipo_meta_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_tipo_meta, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_tipo_meta_aggregate",
        extension: ((extensions as any) || {}).mind_rh_tipo_meta_aggregate
      }
    );
  },
  get mind_rh_tipo_meta_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_tipo_meta_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "mind_rh_tipo_meta_aggregate_fields",
        extension: ((extensions as any) || {})
          .mind_rh_tipo_meta_aggregate_fields
      }
    );
  },
  get mind_rh_tipo_meta_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_tipo_meta_avg_fields",
        extension: ((extensions as any) || {}).mind_rh_tipo_meta_avg_fields
      }
    );
  },
  get mind_rh_tipo_meta_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_tipo_meta_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.mind_rh_tipo_meta_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_tipo_meta_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get tipo_meta() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "mind_rh_tipo_meta_bool_exp" }
    );
  },
  get mind_rh_tipo_meta_constraint() {
    return new EnumNode({ name: "mind_rh_tipo_meta_constraint" });
  },
  get mind_rh_tipo_meta_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, true);
        }
      },
      { name: "mind_rh_tipo_meta_inc_input" }
    );
  },
  get mind_rh_tipo_meta_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, true);
        },
        get tipo_meta() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_tipo_meta_insert_input" }
    );
  },
  get mind_rh_tipo_meta_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get tipo_meta() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_tipo_meta_max_fields",
        extension: ((extensions as any) || {}).mind_rh_tipo_meta_max_fields
      }
    );
  },
  get mind_rh_tipo_meta_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get tipo_meta() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_tipo_meta_min_fields",
        extension: ((extensions as any) || {}).mind_rh_tipo_meta_min_fields
      }
    );
  },
  get mind_rh_tipo_meta_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_tipo_meta, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_tipo_meta_mutation_response",
        extension: ((extensions as any) || {})
          .mind_rh_tipo_meta_mutation_response
      }
    );
  },
  get mind_rh_tipo_meta_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.mind_rh_tipo_meta_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_tipo_meta_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.mind_rh_tipo_meta_bool_exp, true);
        }
      },
      { name: "mind_rh_tipo_meta_on_conflict" }
    );
  },
  get mind_rh_tipo_meta_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get tipo_meta() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_tipo_meta_order_by" }
    );
  },
  get mind_rh_tipo_meta_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, false);
        }
      },
      { name: "mind_rh_tipo_meta_pk_columns_input" }
    );
  },
  get mind_rh_tipo_meta_select_column() {
    return new EnumNode({ name: "mind_rh_tipo_meta_select_column" });
  },
  get mind_rh_tipo_meta_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, true);
        },
        get tipo_meta() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_tipo_meta_set_input" }
    );
  },
  get mind_rh_tipo_meta_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_tipo_meta_stddev_fields",
        extension: ((extensions as any) || {}).mind_rh_tipo_meta_stddev_fields
      }
    );
  },
  get mind_rh_tipo_meta_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_tipo_meta_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .mind_rh_tipo_meta_stddev_pop_fields
      }
    );
  },
  get mind_rh_tipo_meta_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_tipo_meta_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .mind_rh_tipo_meta_stddev_samp_fields
      }
    );
  },
  get mind_rh_tipo_meta_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, true);
        }
      },
      {
        name: "mind_rh_tipo_meta_sum_fields",
        extension: ((extensions as any) || {}).mind_rh_tipo_meta_sum_fields
      }
    );
  },
  get mind_rh_tipo_meta_update_column() {
    return new EnumNode({ name: "mind_rh_tipo_meta_update_column" });
  },
  get mind_rh_tipo_meta_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_tipo_meta_var_pop_fields",
        extension: ((extensions as any) || {}).mind_rh_tipo_meta_var_pop_fields
      }
    );
  },
  get mind_rh_tipo_meta_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_tipo_meta_var_samp_fields",
        extension: ((extensions as any) || {}).mind_rh_tipo_meta_var_samp_fields
      }
    );
  },
  get mind_rh_tipo_meta_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_tipo_meta_variance_fields",
        extension: ((extensions as any) || {}).mind_rh_tipo_meta_variance_fields
      }
    );
  },
  get mind_rh_unidad_medida() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, false);
        },
        get unidad() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_unidad_medida",
        extension: ((extensions as any) || {}).mind_rh_unidad_medida
      }
    );
  },
  get mind_rh_unidad_medida_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_unidad_medida, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_unidad_medida_aggregate",
        extension: ((extensions as any) || {}).mind_rh_unidad_medida_aggregate
      }
    );
  },
  get mind_rh_unidad_medida_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_unidad_medida_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "mind_rh_unidad_medida_aggregate_fields",
        extension: ((extensions as any) || {})
          .mind_rh_unidad_medida_aggregate_fields
      }
    );
  },
  get mind_rh_unidad_medida_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_unidad_medida_avg_fields",
        extension: ((extensions as any) || {}).mind_rh_unidad_medida_avg_fields
      }
    );
  },
  get mind_rh_unidad_medida_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_unidad_medida_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.mind_rh_unidad_medida_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_unidad_medida_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get unidad() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "mind_rh_unidad_medida_bool_exp" }
    );
  },
  get mind_rh_unidad_medida_constraint() {
    return new EnumNode({ name: "mind_rh_unidad_medida_constraint" });
  },
  get mind_rh_unidad_medida_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, true);
        }
      },
      { name: "mind_rh_unidad_medida_inc_input" }
    );
  },
  get mind_rh_unidad_medida_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, true);
        },
        get unidad() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_unidad_medida_insert_input" }
    );
  },
  get mind_rh_unidad_medida_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get unidad() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_unidad_medida_max_fields",
        extension: ((extensions as any) || {}).mind_rh_unidad_medida_max_fields
      }
    );
  },
  get mind_rh_unidad_medida_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get unidad() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_unidad_medida_min_fields",
        extension: ((extensions as any) || {}).mind_rh_unidad_medida_min_fields
      }
    );
  },
  get mind_rh_unidad_medida_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_unidad_medida, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_unidad_medida_mutation_response",
        extension: ((extensions as any) || {})
          .mind_rh_unidad_medida_mutation_response
      }
    );
  },
  get mind_rh_unidad_medida_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.mind_rh_unidad_medida_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.mind_rh_unidad_medida_on_conflict,
            true
          );
        }
      },
      { name: "mind_rh_unidad_medida_obj_rel_insert_input" }
    );
  },
  get mind_rh_unidad_medida_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.mind_rh_unidad_medida_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_unidad_medida_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.mind_rh_unidad_medida_bool_exp,
            true
          );
        }
      },
      { name: "mind_rh_unidad_medida_on_conflict" }
    );
  },
  get mind_rh_unidad_medida_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get unidad() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_unidad_medida_order_by" }
    );
  },
  get mind_rh_unidad_medida_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, false);
        }
      },
      { name: "mind_rh_unidad_medida_pk_columns_input" }
    );
  },
  get mind_rh_unidad_medida_select_column() {
    return new EnumNode({ name: "mind_rh_unidad_medida_select_column" });
  },
  get mind_rh_unidad_medida_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.smallint, true);
        },
        get unidad() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_unidad_medida_set_input" }
    );
  },
  get mind_rh_unidad_medida_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_unidad_medida_stddev_fields",
        extension: ((extensions as any) || {})
          .mind_rh_unidad_medida_stddev_fields
      }
    );
  },
  get mind_rh_unidad_medida_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_unidad_medida_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .mind_rh_unidad_medida_stddev_pop_fields
      }
    );
  },
  get mind_rh_unidad_medida_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_unidad_medida_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .mind_rh_unidad_medida_stddev_samp_fields
      }
    );
  },
  get mind_rh_unidad_medida_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.smallint, undefined, true);
        }
      },
      {
        name: "mind_rh_unidad_medida_sum_fields",
        extension: ((extensions as any) || {}).mind_rh_unidad_medida_sum_fields
      }
    );
  },
  get mind_rh_unidad_medida_update_column() {
    return new EnumNode({ name: "mind_rh_unidad_medida_update_column" });
  },
  get mind_rh_unidad_medida_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_unidad_medida_var_pop_fields",
        extension: ((extensions as any) || {})
          .mind_rh_unidad_medida_var_pop_fields
      }
    );
  },
  get mind_rh_unidad_medida_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_unidad_medida_var_samp_fields",
        extension: ((extensions as any) || {})
          .mind_rh_unidad_medida_var_samp_fields
      }
    );
  },
  get mind_rh_unidad_medida_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_unidad_medida_variance_fields",
        extension: ((extensions as any) || {})
          .mind_rh_unidad_medida_variance_fields
      }
    );
  },
  get mind_rh_usuario() {
    return new ObjectNode(
      {
        get grp() {
          return new FieldNode(
            schema.Empleado,
            new Arguments({
              get email() {
                return new ArgumentsField(schema.String, true);
              },
              get numero_credencial() {
                return new ArgumentsField(schema.ID, true);
              }
            }),
            true
          );
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get id_person() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_role() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get password() {
          return new FieldNode(schema.String, undefined, true);
        },
        get picture() {
          return new FieldNode(schema.bytea, undefined, true);
        },
        get picture_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get picturebase64() {
          return new FieldNode(schema.String, undefined, true);
        },
        get rhGrupoTrabajoUsuariosByCurpmiembro() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_grupo_trabajo_usuario, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get rhGrupoTrabajoUsuariosByCurpmiembro_aggregate() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get rh_grupo_trabajo_usuarios() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_grupo_trabajo_usuario, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get rh_grupo_trabajo_usuarios_aggregate() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get rh_grupo_trabajos() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_grupo_trabajo, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_grupo_trabajo_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get rh_grupo_trabajos_aggregate() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_grupo_trabajo_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get rh_meta_individuals() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_meta_individual, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_individual_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_meta_individual_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get rh_meta_individuals_aggregate() {
          return new FieldNode(
            schema.mind_rh_meta_individual_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_individual_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_meta_individual_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get rh_meta_institucionals() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_meta_institucional, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get rh_meta_institucionals_aggregate() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get rusp() {
          return new FieldNode(
            schema.SP,
            new Arguments({
              get id_sp() {
                return new ArgumentsField(schema.Int, true);
              },
              get tipoOmex() {
                return new ArgumentsField(
                  new ArrayNode(schema.Omex, true),
                  true
                );
              }
            }),
            true
          );
        },
        get username() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_usuario",
        extension: ((extensions as any) || {}).mind_rh_usuario
      }
    );
  },
  get mind_rh_usuario_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.mind_rh_usuario_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_usuario, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_usuario_aggregate",
        extension: ((extensions as any) || {}).mind_rh_usuario_aggregate
      }
    );
  },
  get mind_rh_usuario_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.mind_rh_usuario_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_usuario_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.mind_rh_usuario_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.mind_rh_usuario_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.mind_rh_usuario_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.mind_rh_usuario_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.mind_rh_usuario_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.mind_rh_usuario_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.mind_rh_usuario_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.mind_rh_usuario_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.mind_rh_usuario_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "mind_rh_usuario_aggregate_fields",
        extension: ((extensions as any) || {}).mind_rh_usuario_aggregate_fields
      }
    );
  },
  get mind_rh_usuario_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_person() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_role() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_usuario_avg_fields",
        extension: ((extensions as any) || {}).mind_rh_usuario_avg_fields
      }
    );
  },
  get mind_rh_usuario_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_usuario_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.mind_rh_usuario_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_usuario_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id_person() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id_role() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get password() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get picture() {
          return new InputNodeField(schema.bytea_comparison_exp, true);
        },
        get picture_type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get rhGrupoTrabajoUsuariosByCurpmiembro() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_bool_exp,
            true
          );
        },
        get rh_grupo_trabajo_usuarios() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_bool_exp,
            true
          );
        },
        get rh_grupo_trabajos() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_bool_exp,
            true
          );
        },
        get rh_meta_individuals() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_bool_exp,
            true
          );
        },
        get rh_meta_institucionals() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_bool_exp,
            true
          );
        },
        get username() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "mind_rh_usuario_bool_exp" }
    );
  },
  get mind_rh_usuario_constraint() {
    return new EnumNode({ name: "mind_rh_usuario_constraint" });
  },
  get mind_rh_usuario_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_person() {
          return new InputNodeField(schema.Int, true);
        },
        get id_role() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "mind_rh_usuario_inc_input" }
    );
  },
  get mind_rh_usuario_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_person() {
          return new InputNodeField(schema.Int, true);
        },
        get id_role() {
          return new InputNodeField(schema.Int, true);
        },
        get password() {
          return new InputNodeField(schema.String, true);
        },
        get picture() {
          return new InputNodeField(schema.bytea, true);
        },
        get picture_type() {
          return new InputNodeField(schema.String, true);
        },
        get rhGrupoTrabajoUsuariosByCurpmiembro() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_arr_rel_insert_input,
            true
          );
        },
        get rh_grupo_trabajo_usuarios() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_arr_rel_insert_input,
            true
          );
        },
        get rh_grupo_trabajos() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_arr_rel_insert_input,
            true
          );
        },
        get rh_meta_individuals() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_arr_rel_insert_input,
            true
          );
        },
        get rh_meta_institucionals() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_arr_rel_insert_input,
            true
          );
        },
        get username() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_usuario_insert_input" }
    );
  },
  get mind_rh_usuario_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_person() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_role() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get password() {
          return new FieldNode(schema.String, undefined, true);
        },
        get picture_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get username() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_usuario_max_fields",
        extension: ((extensions as any) || {}).mind_rh_usuario_max_fields
      }
    );
  },
  get mind_rh_usuario_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_person() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_role() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get password() {
          return new FieldNode(schema.String, undefined, true);
        },
        get picture_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get username() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "mind_rh_usuario_min_fields",
        extension: ((extensions as any) || {}).mind_rh_usuario_min_fields
      }
    );
  },
  get mind_rh_usuario_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_usuario, false),
            undefined,
            false
          );
        }
      },
      {
        name: "mind_rh_usuario_mutation_response",
        extension: ((extensions as any) || {}).mind_rh_usuario_mutation_response
      }
    );
  },
  get mind_rh_usuario_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.mind_rh_usuario_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.mind_rh_usuario_on_conflict, true);
        }
      },
      { name: "mind_rh_usuario_obj_rel_insert_input" }
    );
  },
  get mind_rh_usuario_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.mind_rh_usuario_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.mind_rh_usuario_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.mind_rh_usuario_bool_exp, true);
        }
      },
      { name: "mind_rh_usuario_on_conflict" }
    );
  },
  get mind_rh_usuario_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_person() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_role() {
          return new InputNodeField(schema.order_by, true);
        },
        get password() {
          return new InputNodeField(schema.order_by, true);
        },
        get picture() {
          return new InputNodeField(schema.order_by, true);
        },
        get picture_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get rhGrupoTrabajoUsuariosByCurpmiembro_aggregate() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_aggregate_order_by,
            true
          );
        },
        get rh_grupo_trabajo_usuarios_aggregate() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_usuario_aggregate_order_by,
            true
          );
        },
        get rh_grupo_trabajos_aggregate() {
          return new InputNodeField(
            schema.mind_rh_grupo_trabajo_aggregate_order_by,
            true
          );
        },
        get rh_meta_individuals_aggregate() {
          return new InputNodeField(
            schema.mind_rh_meta_individual_aggregate_order_by,
            true
          );
        },
        get rh_meta_institucionals_aggregate() {
          return new InputNodeField(
            schema.mind_rh_meta_institucional_aggregate_order_by,
            true
          );
        },
        get username() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "mind_rh_usuario_order_by" }
    );
  },
  get mind_rh_usuario_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "mind_rh_usuario_pk_columns_input" }
    );
  },
  get mind_rh_usuario_select_column() {
    return new EnumNode({ name: "mind_rh_usuario_select_column" });
  },
  get mind_rh_usuario_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_person() {
          return new InputNodeField(schema.Int, true);
        },
        get id_role() {
          return new InputNodeField(schema.Int, true);
        },
        get password() {
          return new InputNodeField(schema.String, true);
        },
        get picture() {
          return new InputNodeField(schema.bytea, true);
        },
        get picture_type() {
          return new InputNodeField(schema.String, true);
        },
        get username() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "mind_rh_usuario_set_input" }
    );
  },
  get mind_rh_usuario_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_person() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_role() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_usuario_stddev_fields",
        extension: ((extensions as any) || {}).mind_rh_usuario_stddev_fields
      }
    );
  },
  get mind_rh_usuario_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_person() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_role() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_usuario_stddev_pop_fields",
        extension: ((extensions as any) || {}).mind_rh_usuario_stddev_pop_fields
      }
    );
  },
  get mind_rh_usuario_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_person() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_role() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_usuario_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .mind_rh_usuario_stddev_samp_fields
      }
    );
  },
  get mind_rh_usuario_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_person() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_role() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "mind_rh_usuario_sum_fields",
        extension: ((extensions as any) || {}).mind_rh_usuario_sum_fields
      }
    );
  },
  get mind_rh_usuario_update_column() {
    return new EnumNode({ name: "mind_rh_usuario_update_column" });
  },
  get mind_rh_usuario_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_person() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_role() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_usuario_var_pop_fields",
        extension: ((extensions as any) || {}).mind_rh_usuario_var_pop_fields
      }
    );
  },
  get mind_rh_usuario_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_person() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_role() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_usuario_var_samp_fields",
        extension: ((extensions as any) || {}).mind_rh_usuario_var_samp_fields
      }
    );
  },
  get mind_rh_usuario_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_person() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id_role() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "mind_rh_usuario_variance_fields",
        extension: ((extensions as any) || {}).mind_rh_usuario_variance_fields
      }
    );
  },
  get mutation_root() {
    return new ObjectNode(
      {
        get delete_PARTICIPANTES() {
          return new FieldNode(
            schema.PARTICIPANTES_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.PARTICIPANTES_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_PARTICIPANTES_by_pk() {
          return new FieldNode(
            schema.PARTICIPANTES,
            new Arguments(
              {
                get ID() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_areaGeneralEstudios() {
          return new FieldNode(
            schema.areaGeneralEstudios_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.areaGeneralEstudios_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_areaGeneralEstudios_by_pk() {
          return new FieldNode(
            schema.areaGeneralEstudios,
            new Arguments(
              {
                get idAreaGeneralEstudios() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_areaGeneralExperiencia() {
          return new FieldNode(
            schema.areaGeneralExperiencia_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.areaGeneralExperiencia_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_areaGeneralExperiencia_by_pk() {
          return new FieldNode(
            schema.areaGeneralExperiencia,
            new Arguments(
              {
                get idAreaGeneralExperiencia() {
                  return new ArgumentsField(schema.String, false);
                },
                get idGrupoExperiencia() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_calificaciones() {
          return new FieldNode(
            schema.calificaciones_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.calificaciones_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_calificaciones_by_pk() {
          return new FieldNode(
            schema.calificaciones,
            new Arguments(
              {
                get uid() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_carreraGenerica() {
          return new FieldNode(
            schema.carreraGenerica_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.carreraGenerica_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_carreraGenerica_by_pk() {
          return new FieldNode(
            schema.carreraGenerica,
            new Arguments(
              {
                get idAreaGeneralEstudios() {
                  return new ArgumentsField(schema.String, false);
                },
                get idCarreraGenerica() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_catalogo_idiomas() {
          return new FieldNode(
            schema.catalogo_idiomas_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.catalogo_idiomas_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_catalogo_idiomas_by_pk() {
          return new FieldNode(
            schema.catalogo_idiomas,
            new Arguments(
              {
                get id_idioma() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_cliks() {
          return new FieldNode(
            schema.cliks_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.cliks_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_cliks_by_pk() {
          return new FieldNode(
            schema.cliks,
            new Arguments(
              {
                get id_clik() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_convocatoriagenero() {
          return new FieldNode(
            schema.convocatoriagenero_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.convocatoriagenero_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_convocatoriagenero_by_pk() {
          return new FieldNode(
            schema.convocatoriagenero,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_convocatoriageneronospc() {
          return new FieldNode(
            schema.convocatoriageneronospc_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.convocatoriageneronospc_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_convocatoriageneronospc_by_pk() {
          return new FieldNode(
            schema.convocatoriageneronospc,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_core_store() {
          return new FieldNode(
            schema.core_store_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.core_store_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_core_store_by_pk() {
          return new FieldNode(
            schema.core_store,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_curriculum() {
          return new FieldNode(
            schema.curriculum_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.curriculum_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_curriculum_by_pk() {
          return new FieldNode(
            schema.curriculum,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_curso() {
          return new FieldNode(
            schema.curso_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.curso_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_curso_by_pk() {
          return new FieldNode(
            schema.curso,
            new Arguments(
              {
                get uid() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_dependencia() {
          return new FieldNode(
            schema.dependencia_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.dependencia_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_dependencia_by_pk() {
          return new FieldNode(
            schema.dependencia,
            new Arguments(
              {
                get idDependencia() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_dependencias() {
          return new FieldNode(
            schema.dependencias_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.dependencias_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_dependencias_by_pk() {
          return new FieldNode(
            schema.dependencias,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_encuesta() {
          return new FieldNode(
            schema.encuesta_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.encuesta_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_encuesta_by_pk() {
          return new FieldNode(
            schema.encuesta,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_entidadFederativa() {
          return new FieldNode(
            schema.entidadFederativa_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.entidadFederativa_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_entidadFederativa_by_pk() {
          return new FieldNode(
            schema.entidadFederativa,
            new Arguments(
              {
                get idEntidadFederativa() {
                  return new ArgumentsField(schema.String, false);
                },
                get idPais() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_estadopuesto() {
          return new FieldNode(
            schema.estadopuesto_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.estadopuesto_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_estadopuesto_by_pk() {
          return new FieldNode(
            schema.estadopuesto,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_grupoExperiencia() {
          return new FieldNode(
            schema.grupoExperiencia_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.grupoExperiencia_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_grupoExperiencia_by_pk() {
          return new FieldNode(
            schema.grupoExperiencia,
            new Arguments(
              {
                get idGrupoExperiencia() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_client() {
          return new FieldNode(
            schema.hydra_client_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_client_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_client_by_pk() {
          return new FieldNode(
            schema.hydra_client,
            new Arguments(
              {
                get pk() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_client_migration() {
          return new FieldNode(
            schema.hydra_client_migration_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_client_migration_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_client_migration_by_pk() {
          return new FieldNode(
            schema.hydra_client_migration,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_jwk() {
          return new FieldNode(
            schema.hydra_jwk_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.hydra_jwk_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_jwk_by_pk() {
          return new FieldNode(
            schema.hydra_jwk,
            new Arguments(
              {
                get pk() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_jwk_migration() {
          return new FieldNode(
            schema.hydra_jwk_migration_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_jwk_migration_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_jwk_migration_by_pk() {
          return new FieldNode(
            schema.hydra_jwk_migration,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_access() {
          return new FieldNode(
            schema.hydra_oauth2_access_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_access_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_access_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_access,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_authentication_consent_migration() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_consent_migration_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_authentication_consent_migration_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_authentication_consent_migration_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_consent_migration,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_authentication_request() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_authentication_request_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_authentication_request_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_authentication_request_handled() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_authentication_request_handled_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_authentication_request_handled_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_authentication_session() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_authentication_session_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_authentication_session_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_code() {
          return new FieldNode(
            schema.hydra_oauth2_code_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_code_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_code_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_code,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_consent_request() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_consent_request_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_consent_request_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_consent_request_handled() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_consent_request_handled_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_consent_request_handled_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_logout_request() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_logout_request_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_logout_request_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_migration() {
          return new FieldNode(
            schema.hydra_oauth2_migration_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_migration_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_migration_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_migration,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_obfuscated_authentication_session() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_obfuscated_authentication_session_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_obfuscated_authentication_session_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session,
            new Arguments(
              {
                get client_id() {
                  return new ArgumentsField(schema.String, false);
                },
                get subject() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_oidc() {
          return new FieldNode(
            schema.hydra_oauth2_oidc_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_oidc_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_oidc_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_oidc,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_pkce() {
          return new FieldNode(
            schema.hydra_oauth2_pkce_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_pkce_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_pkce_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_pkce,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_refresh() {
          return new FieldNode(
            schema.hydra_oauth2_refresh_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.hydra_oauth2_refresh_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_hydra_oauth2_refresh_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_refresh,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_keycloak_realm_smtp_config() {
          return new FieldNode(
            schema.keycloak_realm_smtp_config_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.keycloak_realm_smtp_config_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_keycloak_realm_smtp_config_by_pk() {
          return new FieldNode(
            schema.keycloak_realm_smtp_config,
            new Arguments(
              {
                get name() {
                  return new ArgumentsField(schema.String, false);
                },
                get realm_id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_keycloak_user_role_mapping() {
          return new FieldNode(
            schema.keycloak_user_role_mapping_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.keycloak_user_role_mapping_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_keycloak_user_role_mapping_by_pk() {
          return new FieldNode(
            schema.keycloak_user_role_mapping,
            new Arguments(
              {
                get role_id() {
                  return new ArgumentsField(schema.String, false);
                },
                get user_id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_m4cfp_area_general() {
          return new FieldNode(
            schema.m4cfp_area_general_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.m4cfp_area_general_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_m4cfp_area_general_by_pk() {
          return new FieldNode(
            schema.m4cfp_area_general,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_m4cfp_area_gral_ex() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.m4cfp_area_gral_ex_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_m4cfp_area_gral_ex_by_pk() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_m4cfp_carreras_ge() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.m4cfp_carreras_ge_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_m4cfp_carreras_ge_by_pk() {
          return new FieldNode(
            schema.m4cfp_carreras_ge,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_m4cfp_gpo_experien() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.m4cfp_gpo_experien_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_m4cfp_gpo_experien_by_pk() {
          return new FieldNode(
            schema.m4cfp_gpo_experien,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_m4rch_organization2() {
          return new FieldNode(
            schema.m4rch_organization2_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.m4rch_organization2_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_m4rch_organization2_by_pk() {
          return new FieldNode(
            schema.m4rch_organization2,
            new Arguments(
              {
                get id_organization() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_menu() {
          return new FieldNode(
            schema.menu_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.menu_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_menu_by_pk() {
          return new FieldNode(
            schema.menu,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_person() {
          return new FieldNode(
            schema.mind_person_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.mind_person_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_person_by_pk() {
          return new FieldNode(
            schema.mind_person,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_grupo_trabajo() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.mind_rh_grupo_trabajo_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_grupo_trabajo_by_pk() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_grupo_trabajo_usuario() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.mind_rh_grupo_trabajo_usuario_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_grupo_trabajo_usuario_by_pk() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_igr() {
          return new FieldNode(
            schema.mind_rh_igr_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.mind_rh_igr_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_igr_by_pk() {
          return new FieldNode(
            schema.mind_rh_igr,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.smallint, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_meta_individual() {
          return new FieldNode(
            schema.mind_rh_meta_individual_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.mind_rh_meta_individual_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_meta_individual_by_pk() {
          return new FieldNode(
            schema.mind_rh_meta_individual,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_meta_institucional() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.mind_rh_meta_institucional_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_meta_institucional_by_pk() {
          return new FieldNode(
            schema.mind_rh_meta_institucional,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_pnd() {
          return new FieldNode(
            schema.mind_rh_pnd_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.mind_rh_pnd_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_pnd_by_pk() {
          return new FieldNode(
            schema.mind_rh_pnd,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.smallint, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_tipo_meta() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.mind_rh_tipo_meta_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_tipo_meta_by_pk() {
          return new FieldNode(
            schema.mind_rh_tipo_meta,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.smallint, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_unidad_medida() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.mind_rh_unidad_medida_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_unidad_medida_by_pk() {
          return new FieldNode(
            schema.mind_rh_unidad_medida,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.smallint, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_usuario() {
          return new FieldNode(
            schema.mind_rh_usuario_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.mind_rh_usuario_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_mind_rh_usuario_by_pk() {
          return new FieldNode(
            schema.mind_rh_usuario,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_nivelEscolaridad() {
          return new FieldNode(
            schema.nivelEscolaridad_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.nivelEscolaridad_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_nivelEscolaridad_by_pk() {
          return new FieldNode(
            schema.nivelEscolaridad,
            new Arguments(
              {
                get idNivelEscolaridad() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_nivelPuesto() {
          return new FieldNode(
            schema.nivelPuesto_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.nivelPuesto_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_nivelPuesto_by_pk() {
          return new FieldNode(
            schema.nivelPuesto,
            new Arguments(
              {
                get idNivelPuesto() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_pais() {
          return new FieldNode(
            schema.pais_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.pais_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_pais_by_pk() {
          return new FieldNode(
            schema.pais,
            new Arguments(
              {
                get idPais() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_perfil() {
          return new FieldNode(
            schema.perfil_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.perfil_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_perfil_by_pk() {
          return new FieldNode(
            schema.perfil,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
                get id_trabajaen() {
                  return new ArgumentsField(schema.String, false);
                },
                get user() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_puesto_generos() {
          return new FieldNode(
            schema.puesto_generos_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.puesto_generos_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_puesto_generos_by_pk() {
          return new FieldNode(
            schema.puesto_generos,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_puestos_generos() {
          return new FieldNode(
            schema.puestos_generos_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.puestos_generos_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_puestos_generos_by_pk() {
          return new FieldNode(
            schema.puestos_generos,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_sfp_reactivos_queretaro() {
          return new FieldNode(
            schema.sfp_reactivos_queretaro_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.sfp_reactivos_queretaro_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_situacionpuestocat() {
          return new FieldNode(
            schema.situacionpuestocat_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.situacionpuestocat_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_situacionpuestocat_by_pk() {
          return new FieldNode(
            schema.situacionpuestocat,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_std_country() {
          return new FieldNode(
            schema.std_country_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.std_country_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_std_country_by_pk() {
          return new FieldNode(
            schema.std_country,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_std_geo_div() {
          return new FieldNode(
            schema.std_geo_div_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.std_geo_div_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_std_geo_div_by_pk() {
          return new FieldNode(
            schema.std_geo_div,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_std_geo_place() {
          return new FieldNode(
            schema.std_geo_place_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.std_geo_place_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_std_geo_place_by_pk() {
          return new FieldNode(
            schema.std_geo_place,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_std_lu_edu_diploma() {
          return new FieldNode(
            schema.std_lu_edu_diploma_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.std_lu_edu_diploma_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_std_lu_edu_diploma_by_pk() {
          return new FieldNode(
            schema.std_lu_edu_diploma,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_std_sub_geo_div() {
          return new FieldNode(
            schema.std_sub_geo_div_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.std_sub_geo_div_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_std_sub_geo_div_by_pk() {
          return new FieldNode(
            schema.std_sub_geo_div,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_std_work_unit() {
          return new FieldNode(
            schema.std_work_unit_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.std_work_unit_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_std_work_unit_by_pk() {
          return new FieldNode(
            schema.std_work_unit,
            new Arguments(
              {
                get id_organization() {
                  return new ArgumentsField(schema.String, false);
                },
                get std_id_work_unit() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_strapi_administrator() {
          return new FieldNode(
            schema.strapi_administrator_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.strapi_administrator_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_strapi_administrator_by_pk() {
          return new FieldNode(
            schema.strapi_administrator,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_strapi_webhooks() {
          return new FieldNode(
            schema.strapi_webhooks_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.strapi_webhooks_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_strapi_webhooks_by_pk() {
          return new FieldNode(
            schema.strapi_webhooks,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_temario() {
          return new FieldNode(
            schema.temario_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.temario_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_temario_by_pk() {
          return new FieldNode(
            schema.temario,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_unidad_administrativas() {
          return new FieldNode(
            schema.unidad_administrativas_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.unidad_administrativas_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_unidad_administrativas_by_pk() {
          return new FieldNode(
            schema.unidad_administrativas,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_upload_file() {
          return new FieldNode(
            schema.upload_file_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.upload_file_bool_exp, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_upload_file_by_pk() {
          return new FieldNode(
            schema.upload_file,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get delete_upload_file_morph() {
          return new FieldNode(
            schema.upload_file_morph_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.upload_file_morph_bool_exp,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get delete_upload_file_morph_by_pk() {
          return new FieldNode(
            schema.upload_file_morph,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get insert_PARTICIPANTES() {
          return new FieldNode(
            schema.PARTICIPANTES_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.PARTICIPANTES_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.PARTICIPANTES_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_PARTICIPANTES_one() {
          return new FieldNode(
            schema.PARTICIPANTES,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.PARTICIPANTES_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.PARTICIPANTES_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_areaGeneralEstudios() {
          return new FieldNode(
            schema.areaGeneralEstudios_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralEstudios_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.areaGeneralEstudios_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_areaGeneralEstudios_one() {
          return new FieldNode(
            schema.areaGeneralEstudios,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.areaGeneralEstudios_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.areaGeneralEstudios_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_areaGeneralExperiencia() {
          return new FieldNode(
            schema.areaGeneralExperiencia_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.areaGeneralExperiencia_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.areaGeneralExperiencia_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_areaGeneralExperiencia_one() {
          return new FieldNode(
            schema.areaGeneralExperiencia,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.areaGeneralExperiencia_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.areaGeneralExperiencia_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_calificaciones() {
          return new FieldNode(
            schema.calificaciones_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.calificaciones_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.calificaciones_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_calificaciones_one() {
          return new FieldNode(
            schema.calificaciones,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.calificaciones_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.calificaciones_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_carreraGenerica() {
          return new FieldNode(
            schema.carreraGenerica_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.carreraGenerica_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_carreraGenerica_one() {
          return new FieldNode(
            schema.carreraGenerica,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.carreraGenerica_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.carreraGenerica_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_catalogo_idiomas() {
          return new FieldNode(
            schema.catalogo_idiomas_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.catalogo_idiomas_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.catalogo_idiomas_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_catalogo_idiomas_one() {
          return new FieldNode(
            schema.catalogo_idiomas,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.catalogo_idiomas_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.catalogo_idiomas_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_cliks() {
          return new FieldNode(
            schema.cliks_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.cliks_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.cliks_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_cliks_one() {
          return new FieldNode(
            schema.cliks,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.cliks_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.cliks_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_convocatoriagenero() {
          return new FieldNode(
            schema.convocatoriagenero_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.convocatoriagenero_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_convocatoriagenero_one() {
          return new FieldNode(
            schema.convocatoriagenero,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.convocatoriagenero_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.convocatoriagenero_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_convocatoriageneronospc() {
          return new FieldNode(
            schema.convocatoriageneronospc_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_convocatoriageneronospc_one() {
          return new FieldNode(
            schema.convocatoriageneronospc,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_core_store() {
          return new FieldNode(
            schema.core_store_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.core_store_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.core_store_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_core_store_one() {
          return new FieldNode(
            schema.core_store,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.core_store_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.core_store_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_curriculum() {
          return new FieldNode(
            schema.curriculum_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.curriculum_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_curriculum_one() {
          return new FieldNode(
            schema.curriculum,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.curriculum_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.curriculum_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_curso() {
          return new FieldNode(
            schema.curso_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.curso_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.curso_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_curso_one() {
          return new FieldNode(
            schema.curso,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.curso_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.curso_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_dependencia() {
          return new FieldNode(
            schema.dependencia_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencia_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.dependencia_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_dependencia_one() {
          return new FieldNode(
            schema.dependencia,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.dependencia_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.dependencia_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_dependencias() {
          return new FieldNode(
            schema.dependencias_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencias_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.dependencias_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_dependencias_one() {
          return new FieldNode(
            schema.dependencias,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.dependencias_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.dependencias_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_encuesta() {
          return new FieldNode(
            schema.encuesta_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.encuesta_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.encuesta_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_encuesta_one() {
          return new FieldNode(
            schema.encuesta,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.encuesta_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.encuesta_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_entidadFederativa() {
          return new FieldNode(
            schema.entidadFederativa_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.entidadFederativa_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_entidadFederativa_one() {
          return new FieldNode(
            schema.entidadFederativa,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.entidadFederativa_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.entidadFederativa_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_estadopuesto() {
          return new FieldNode(
            schema.estadopuesto_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.estadopuesto_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.estadopuesto_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_estadopuesto_one() {
          return new FieldNode(
            schema.estadopuesto,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.estadopuesto_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.estadopuesto_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_grupoExperiencia() {
          return new FieldNode(
            schema.grupoExperiencia_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.grupoExperiencia_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.grupoExperiencia_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_grupoExperiencia_one() {
          return new FieldNode(
            schema.grupoExperiencia,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.grupoExperiencia_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.grupoExperiencia_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_client() {
          return new FieldNode(
            schema.hydra_client_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_client_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_client_migration() {
          return new FieldNode(
            schema.hydra_client_migration_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_client_migration_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_client_migration_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_client_migration_one() {
          return new FieldNode(
            schema.hydra_client_migration,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_client_migration_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_client_migration_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_client_one() {
          return new FieldNode(
            schema.hydra_client,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_client_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_client_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_jwk() {
          return new FieldNode(
            schema.hydra_jwk_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.hydra_jwk_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_hydra_jwk_migration() {
          return new FieldNode(
            schema.hydra_jwk_migration_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_migration_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_jwk_migration_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_jwk_migration_one() {
          return new FieldNode(
            schema.hydra_jwk_migration,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_jwk_migration_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_jwk_migration_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_jwk_one() {
          return new FieldNode(
            schema.hydra_jwk,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.hydra_jwk_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.hydra_jwk_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_access() {
          return new FieldNode(
            schema.hydra_oauth2_access_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_access_one() {
          return new FieldNode(
            schema.hydra_oauth2_access,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_authentication_consent_migration() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_consent_migration_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_consent_migration_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_consent_migration_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_authentication_consent_migration_one() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_consent_migration,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_consent_migration_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_consent_migration_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_authentication_request() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_authentication_request_handled() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_authentication_request_handled_one() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_authentication_request_one() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_authentication_session() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_session_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_session_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_authentication_session_one() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_session_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_session_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_code() {
          return new FieldNode(
            schema.hydra_oauth2_code_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_code_one() {
          return new FieldNode(
            schema.hydra_oauth2_code,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_consent_request() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_consent_request_handled() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_consent_request_handled_one() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_consent_request_one() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_logout_request() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_logout_request_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_logout_request_one() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_logout_request_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_logout_request_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_migration() {
          return new FieldNode(
            schema.hydra_oauth2_migration_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_migration_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_migration_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_migration_one() {
          return new FieldNode(
            schema.hydra_oauth2_migration,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_migration_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_migration_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_obfuscated_authentication_session() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_obfuscated_authentication_session_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_obfuscated_authentication_session_one() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_obfuscated_authentication_session_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_obfuscated_authentication_session_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_oidc() {
          return new FieldNode(
            schema.hydra_oauth2_oidc_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_oidc_one() {
          return new FieldNode(
            schema.hydra_oauth2_oidc,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_pkce() {
          return new FieldNode(
            schema.hydra_oauth2_pkce_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_pkce_one() {
          return new FieldNode(
            schema.hydra_oauth2_pkce,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_refresh() {
          return new FieldNode(
            schema.hydra_oauth2_refresh_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_refresh_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_hydra_oauth2_refresh_one() {
          return new FieldNode(
            schema.hydra_oauth2_refresh,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_keycloak_realm_smtp_config() {
          return new FieldNode(
            schema.keycloak_realm_smtp_config_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_realm_smtp_config_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.keycloak_realm_smtp_config_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_keycloak_realm_smtp_config_one() {
          return new FieldNode(
            schema.keycloak_realm_smtp_config,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.keycloak_realm_smtp_config_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.keycloak_realm_smtp_config_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_keycloak_user_role_mapping() {
          return new FieldNode(
            schema.keycloak_user_role_mapping_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_user_role_mapping_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.keycloak_user_role_mapping_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_keycloak_user_role_mapping_one() {
          return new FieldNode(
            schema.keycloak_user_role_mapping,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.keycloak_user_role_mapping_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.keycloak_user_role_mapping_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_m4cfp_area_general() {
          return new FieldNode(
            schema.m4cfp_area_general_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_general_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.m4cfp_area_general_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_m4cfp_area_general_one() {
          return new FieldNode(
            schema.m4cfp_area_general,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.m4cfp_area_general_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.m4cfp_area_general_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_m4cfp_area_gral_ex() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_gral_ex_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.m4cfp_area_gral_ex_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_m4cfp_area_gral_ex_one() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.m4cfp_area_gral_ex_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.m4cfp_area_gral_ex_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_m4cfp_carreras_ge() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_carreras_ge_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.m4cfp_carreras_ge_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_m4cfp_carreras_ge_one() {
          return new FieldNode(
            schema.m4cfp_carreras_ge,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.m4cfp_carreras_ge_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.m4cfp_carreras_ge_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_m4cfp_gpo_experien() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_gpo_experien_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.m4cfp_gpo_experien_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_m4cfp_gpo_experien_one() {
          return new FieldNode(
            schema.m4cfp_gpo_experien,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.m4cfp_gpo_experien_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.m4cfp_gpo_experien_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_m4rch_organization2() {
          return new FieldNode(
            schema.m4rch_organization2_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4rch_organization2_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.m4rch_organization2_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_m4rch_organization2_one() {
          return new FieldNode(
            schema.m4rch_organization2,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.m4rch_organization2_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.m4rch_organization2_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_menu() {
          return new FieldNode(
            schema.menu_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.menu_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.menu_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_menu_one() {
          return new FieldNode(
            schema.menu,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.menu_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.menu_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_mind_person() {
          return new FieldNode(
            schema.mind_person_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_person_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.mind_person_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_mind_person_one() {
          return new FieldNode(
            schema.mind_person,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.mind_person_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.mind_person_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_mind_rh_grupo_trabajo() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_mind_rh_grupo_trabajo_one() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_mind_rh_grupo_trabajo_usuario() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_mind_rh_grupo_trabajo_usuario_one() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_mind_rh_igr() {
          return new FieldNode(
            schema.mind_rh_igr_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_igr_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.mind_rh_igr_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_mind_rh_igr_one() {
          return new FieldNode(
            schema.mind_rh_igr,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.mind_rh_igr_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.mind_rh_igr_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_mind_rh_meta_individual() {
          return new FieldNode(
            schema.mind_rh_meta_individual_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_individual_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_mind_rh_meta_individual_one() {
          return new FieldNode(
            schema.mind_rh_meta_individual,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_mind_rh_meta_institucional() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_mind_rh_meta_institucional_one() {
          return new FieldNode(
            schema.mind_rh_meta_institucional,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_mind_rh_pnd() {
          return new FieldNode(
            schema.mind_rh_pnd_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_pnd_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.mind_rh_pnd_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_mind_rh_pnd_one() {
          return new FieldNode(
            schema.mind_rh_pnd,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.mind_rh_pnd_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.mind_rh_pnd_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_mind_rh_tipo_meta() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_tipo_meta_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_tipo_meta_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_mind_rh_tipo_meta_one() {
          return new FieldNode(
            schema.mind_rh_tipo_meta,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.mind_rh_tipo_meta_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_tipo_meta_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_mind_rh_unidad_medida() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_unidad_medida_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_unidad_medida_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_mind_rh_unidad_medida_one() {
          return new FieldNode(
            schema.mind_rh_unidad_medida,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.mind_rh_unidad_medida_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_unidad_medida_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_mind_rh_usuario() {
          return new FieldNode(
            schema.mind_rh_usuario_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_usuario_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_usuario_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_mind_rh_usuario_one() {
          return new FieldNode(
            schema.mind_rh_usuario,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.mind_rh_usuario_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.mind_rh_usuario_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_nivelEscolaridad() {
          return new FieldNode(
            schema.nivelEscolaridad_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelEscolaridad_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.nivelEscolaridad_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_nivelEscolaridad_one() {
          return new FieldNode(
            schema.nivelEscolaridad,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.nivelEscolaridad_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.nivelEscolaridad_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_nivelPuesto() {
          return new FieldNode(
            schema.nivelPuesto_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelPuesto_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.nivelPuesto_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_nivelPuesto_one() {
          return new FieldNode(
            schema.nivelPuesto,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.nivelPuesto_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.nivelPuesto_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_pais() {
          return new FieldNode(
            schema.pais_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.pais_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.pais_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_pais_one() {
          return new FieldNode(
            schema.pais,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.pais_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.pais_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_perfil() {
          return new FieldNode(
            schema.perfil_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.perfil_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.perfil_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_perfil_one() {
          return new FieldNode(
            schema.perfil,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.perfil_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.perfil_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_puesto_generos() {
          return new FieldNode(
            schema.puesto_generos_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.puesto_generos_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.puesto_generos_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_puesto_generos_one() {
          return new FieldNode(
            schema.puesto_generos,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.puesto_generos_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.puesto_generos_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_puestos_generos() {
          return new FieldNode(
            schema.puestos_generos_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_generos_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.puestos_generos_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_puestos_generos_one() {
          return new FieldNode(
            schema.puestos_generos,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.puestos_generos_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.puestos_generos_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_sfp_reactivos_queretaro() {
          return new FieldNode(
            schema.sfp_reactivos_queretaro_mutation_response,
            new Arguments(
              {
                get objects() {
                  return new ArgumentsField(
                    new ArrayNode(
                      schema.sfp_reactivos_queretaro_insert_input,
                      false
                    ),
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get insert_sfp_reactivos_queretaro_one() {
          return new FieldNode(
            schema.sfp_reactivos_queretaro,
            new Arguments(
              {
                get object() {
                  return new ArgumentsField(
                    schema.sfp_reactivos_queretaro_insert_input,
                    false
                  );
                }
              },
              true
            ),
            true
          );
        },
        get insert_situacionpuestocat() {
          return new FieldNode(
            schema.situacionpuestocat_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.situacionpuestocat_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.situacionpuestocat_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_situacionpuestocat_one() {
          return new FieldNode(
            schema.situacionpuestocat,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.situacionpuestocat_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.situacionpuestocat_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_std_country() {
          return new FieldNode(
            schema.std_country_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_country_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.std_country_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_std_country_one() {
          return new FieldNode(
            schema.std_country,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.std_country_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.std_country_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_std_geo_div() {
          return new FieldNode(
            schema.std_geo_div_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_div_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.std_geo_div_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_std_geo_div_one() {
          return new FieldNode(
            schema.std_geo_div,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.std_geo_div_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.std_geo_div_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_std_geo_place() {
          return new FieldNode(
            schema.std_geo_place_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_place_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.std_geo_place_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_std_geo_place_one() {
          return new FieldNode(
            schema.std_geo_place,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.std_geo_place_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.std_geo_place_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_std_lu_edu_diploma() {
          return new FieldNode(
            schema.std_lu_edu_diploma_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_lu_edu_diploma_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.std_lu_edu_diploma_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_std_lu_edu_diploma_one() {
          return new FieldNode(
            schema.std_lu_edu_diploma,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.std_lu_edu_diploma_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.std_lu_edu_diploma_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_std_sub_geo_div() {
          return new FieldNode(
            schema.std_sub_geo_div_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_sub_geo_div_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.std_sub_geo_div_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_std_sub_geo_div_one() {
          return new FieldNode(
            schema.std_sub_geo_div,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.std_sub_geo_div_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.std_sub_geo_div_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_std_work_unit() {
          return new FieldNode(
            schema.std_work_unit_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_work_unit_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.std_work_unit_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_std_work_unit_one() {
          return new FieldNode(
            schema.std_work_unit,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.std_work_unit_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.std_work_unit_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_strapi_administrator() {
          return new FieldNode(
            schema.strapi_administrator_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.strapi_administrator_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.strapi_administrator_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_strapi_administrator_one() {
          return new FieldNode(
            schema.strapi_administrator,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.strapi_administrator_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.strapi_administrator_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_strapi_webhooks() {
          return new FieldNode(
            schema.strapi_webhooks_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_webhooks_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.strapi_webhooks_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_strapi_webhooks_one() {
          return new FieldNode(
            schema.strapi_webhooks,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.strapi_webhooks_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.strapi_webhooks_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_temario() {
          return new FieldNode(
            schema.temario_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.temario_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.temario_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_temario_one() {
          return new FieldNode(
            schema.temario,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.temario_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.temario_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_unidad_administrativas() {
          return new FieldNode(
            schema.unidad_administrativas_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.unidad_administrativas_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.unidad_administrativas_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_unidad_administrativas_one() {
          return new FieldNode(
            schema.unidad_administrativas,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.unidad_administrativas_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.unidad_administrativas_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_upload_file() {
          return new FieldNode(
            schema.upload_file_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.upload_file_on_conflict, true);
              }
            }),
            true
          );
        },
        get insert_upload_file_morph() {
          return new FieldNode(
            schema.upload_file_morph_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_morph_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.upload_file_morph_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_upload_file_morph_one() {
          return new FieldNode(
            schema.upload_file_morph,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.upload_file_morph_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.upload_file_morph_on_conflict,
                  true
                );
              }
            }),
            true
          );
        },
        get insert_upload_file_one() {
          return new FieldNode(
            schema.upload_file,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.upload_file_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.upload_file_on_conflict, true);
              }
            }),
            true
          );
        },
        get update_PARTICIPANTES() {
          return new FieldNode(
            schema.PARTICIPANTES_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.PARTICIPANTES_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.PARTICIPANTES_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.PARTICIPANTES_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_PARTICIPANTES_by_pk() {
          return new FieldNode(
            schema.PARTICIPANTES,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.PARTICIPANTES_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.PARTICIPANTES_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.PARTICIPANTES_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_areaGeneralEstudios() {
          return new FieldNode(
            schema.areaGeneralEstudios_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.areaGeneralEstudios_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.areaGeneralEstudios_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_areaGeneralEstudios_by_pk() {
          return new FieldNode(
            schema.areaGeneralEstudios,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.areaGeneralEstudios_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.areaGeneralEstudios_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_areaGeneralExperiencia() {
          return new FieldNode(
            schema.areaGeneralExperiencia_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.areaGeneralExperiencia_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.areaGeneralExperiencia_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_areaGeneralExperiencia_by_pk() {
          return new FieldNode(
            schema.areaGeneralExperiencia,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.areaGeneralExperiencia_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.areaGeneralExperiencia_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_calificaciones() {
          return new FieldNode(
            schema.calificaciones_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.calificaciones_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.calificaciones_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.calificaciones_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_calificaciones_by_pk() {
          return new FieldNode(
            schema.calificaciones,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.calificaciones_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.calificaciones_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.calificaciones_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_carreraGenerica() {
          return new FieldNode(
            schema.carreraGenerica_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.carreraGenerica_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.carreraGenerica_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_carreraGenerica_by_pk() {
          return new FieldNode(
            schema.carreraGenerica,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.carreraGenerica_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.carreraGenerica_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_catalogo_idiomas() {
          return new FieldNode(
            schema.catalogo_idiomas_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.catalogo_idiomas_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.catalogo_idiomas_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.catalogo_idiomas_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_catalogo_idiomas_by_pk() {
          return new FieldNode(
            schema.catalogo_idiomas,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.catalogo_idiomas_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.catalogo_idiomas_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.catalogo_idiomas_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_cliks() {
          return new FieldNode(
            schema.cliks_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.cliks_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.cliks_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.cliks_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_cliks_by_pk() {
          return new FieldNode(
            schema.cliks,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.cliks_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.cliks_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(schema.cliks_pk_columns_input, false);
              }
            }),
            true
          );
        },
        get update_convocatoriagenero() {
          return new FieldNode(
            schema.convocatoriagenero_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.convocatoriagenero_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.convocatoriagenero_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_convocatoriagenero_by_pk() {
          return new FieldNode(
            schema.convocatoriagenero,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.convocatoriagenero_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.convocatoriagenero_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.convocatoriagenero_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_convocatoriageneronospc() {
          return new FieldNode(
            schema.convocatoriageneronospc_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_convocatoriageneronospc_by_pk() {
          return new FieldNode(
            schema.convocatoriageneronospc,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_core_store() {
          return new FieldNode(
            schema.core_store_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.core_store_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.core_store_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.core_store_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_core_store_by_pk() {
          return new FieldNode(
            schema.core_store,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.core_store_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.core_store_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.core_store_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_curriculum() {
          return new FieldNode(
            schema.curriculum_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.curriculum_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.curriculum_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.curriculum_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_curriculum_by_pk() {
          return new FieldNode(
            schema.curriculum,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.curriculum_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.curriculum_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.curriculum_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_curso() {
          return new FieldNode(
            schema.curso_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.curso_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.curso_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.curso_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_curso_by_pk() {
          return new FieldNode(
            schema.curso,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.curso_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.curso_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(schema.curso_pk_columns_input, false);
              }
            }),
            true
          );
        },
        get update_dependencia() {
          return new FieldNode(
            schema.dependencia_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(schema.dependencia_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.dependencia_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_dependencia_by_pk() {
          return new FieldNode(
            schema.dependencia,
            new Arguments({
              get _set() {
                return new ArgumentsField(schema.dependencia_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.dependencia_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_dependencias() {
          return new FieldNode(
            schema.dependencias_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.dependencias_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.dependencias_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.dependencias_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_dependencias_by_pk() {
          return new FieldNode(
            schema.dependencias,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.dependencias_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.dependencias_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.dependencias_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_encuesta() {
          return new FieldNode(
            schema.encuesta_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(schema.encuesta_append_input, true);
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.encuesta_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.encuesta_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.encuesta_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(schema.encuesta_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(schema.encuesta_prepend_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.encuesta_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.encuesta_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_encuesta_by_pk() {
          return new FieldNode(
            schema.encuesta,
            new Arguments({
              get _append() {
                return new ArgumentsField(schema.encuesta_append_input, true);
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.encuesta_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.encuesta_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.encuesta_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(schema.encuesta_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(schema.encuesta_prepend_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.encuesta_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.encuesta_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_entidadFederativa() {
          return new FieldNode(
            schema.entidadFederativa_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.entidadFederativa_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.entidadFederativa_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_entidadFederativa_by_pk() {
          return new FieldNode(
            schema.entidadFederativa,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.entidadFederativa_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.entidadFederativa_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_estadopuesto() {
          return new FieldNode(
            schema.estadopuesto_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.estadopuesto_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.estadopuesto_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.estadopuesto_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_estadopuesto_by_pk() {
          return new FieldNode(
            schema.estadopuesto,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.estadopuesto_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.estadopuesto_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.estadopuesto_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_grupoExperiencia() {
          return new FieldNode(
            schema.grupoExperiencia_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.grupoExperiencia_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.grupoExperiencia_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_grupoExperiencia_by_pk() {
          return new FieldNode(
            schema.grupoExperiencia,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.grupoExperiencia_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.grupoExperiencia_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_client() {
          return new FieldNode(
            schema.hydra_client_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.hydra_client_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.hydra_client_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.hydra_client_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_hydra_client_by_pk() {
          return new FieldNode(
            schema.hydra_client,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.hydra_client_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.hydra_client_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_client_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_client_migration() {
          return new FieldNode(
            schema.hydra_client_migration_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_client_migration_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_client_migration_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_client_migration_by_pk() {
          return new FieldNode(
            schema.hydra_client_migration,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_client_migration_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_client_migration_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_jwk() {
          return new FieldNode(
            schema.hydra_jwk_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.hydra_jwk_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.hydra_jwk_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.hydra_jwk_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_hydra_jwk_by_pk() {
          return new FieldNode(
            schema.hydra_jwk,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.hydra_jwk_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.hydra_jwk_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_jwk_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_jwk_migration() {
          return new FieldNode(
            schema.hydra_jwk_migration_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_jwk_migration_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_jwk_migration_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_jwk_migration_by_pk() {
          return new FieldNode(
            schema.hydra_jwk_migration,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_jwk_migration_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_jwk_migration_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_access() {
          return new FieldNode(
            schema.hydra_oauth2_access_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_access_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_access,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_authentication_consent_migration() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_consent_migration_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_consent_migration_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_consent_migration_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_authentication_consent_migration_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_consent_migration,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_consent_migration_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_consent_migration_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_authentication_request() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_authentication_request_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_authentication_request_handled() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_authentication_request_handled_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_authentication_session() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_session_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_session_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_authentication_session_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_session_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_session_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_code() {
          return new FieldNode(
            schema.hydra_oauth2_code_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_code_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_code,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_consent_request() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_consent_request_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_consent_request_handled() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_consent_request_handled_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_logout_request() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_logout_request_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_logout_request_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_logout_request_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_logout_request_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_logout_request_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_migration() {
          return new FieldNode(
            schema.hydra_oauth2_migration_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_migration_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_migration_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_migration_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_migration,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_migration_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_migration_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_obfuscated_authentication_session() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_obfuscated_authentication_session_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_obfuscated_authentication_session_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_obfuscated_authentication_session_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_obfuscated_authentication_session_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_obfuscated_authentication_session_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_oidc() {
          return new FieldNode(
            schema.hydra_oauth2_oidc_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_oidc_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_oidc,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_pkce() {
          return new FieldNode(
            schema.hydra_oauth2_pkce_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_pkce_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_pkce,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_refresh() {
          return new FieldNode(
            schema.hydra_oauth2_refresh_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_hydra_oauth2_refresh_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_refresh,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_keycloak_realm_smtp_config() {
          return new FieldNode(
            schema.keycloak_realm_smtp_config_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.keycloak_realm_smtp_config_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.keycloak_realm_smtp_config_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_keycloak_realm_smtp_config_by_pk() {
          return new FieldNode(
            schema.keycloak_realm_smtp_config,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.keycloak_realm_smtp_config_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.keycloak_realm_smtp_config_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_keycloak_user_role_mapping() {
          return new FieldNode(
            schema.keycloak_user_role_mapping_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.keycloak_user_role_mapping_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.keycloak_user_role_mapping_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_keycloak_user_role_mapping_by_pk() {
          return new FieldNode(
            schema.keycloak_user_role_mapping,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.keycloak_user_role_mapping_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.keycloak_user_role_mapping_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_m4cfp_area_general() {
          return new FieldNode(
            schema.m4cfp_area_general_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.m4cfp_area_general_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.m4cfp_area_general_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_area_general_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_m4cfp_area_general_by_pk() {
          return new FieldNode(
            schema.m4cfp_area_general,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.m4cfp_area_general_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.m4cfp_area_general_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.m4cfp_area_general_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_m4cfp_area_gral_ex() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.m4cfp_area_gral_ex_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.m4cfp_area_gral_ex_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_area_gral_ex_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_m4cfp_area_gral_ex_by_pk() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.m4cfp_area_gral_ex_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.m4cfp_area_gral_ex_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.m4cfp_area_gral_ex_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_m4cfp_carreras_ge() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.m4cfp_carreras_ge_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.m4cfp_carreras_ge_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_carreras_ge_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_m4cfp_carreras_ge_by_pk() {
          return new FieldNode(
            schema.m4cfp_carreras_ge,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.m4cfp_carreras_ge_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.m4cfp_carreras_ge_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.m4cfp_carreras_ge_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_m4cfp_gpo_experien() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.m4cfp_gpo_experien_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.m4cfp_gpo_experien_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_gpo_experien_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_m4cfp_gpo_experien_by_pk() {
          return new FieldNode(
            schema.m4cfp_gpo_experien,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.m4cfp_gpo_experien_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.m4cfp_gpo_experien_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.m4cfp_gpo_experien_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_m4rch_organization2() {
          return new FieldNode(
            schema.m4rch_organization2_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.m4rch_organization2_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.m4rch_organization2_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4rch_organization2_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_m4rch_organization2_by_pk() {
          return new FieldNode(
            schema.m4rch_organization2,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.m4rch_organization2_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.m4rch_organization2_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.m4rch_organization2_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_menu() {
          return new FieldNode(
            schema.menu_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.menu_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.menu_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.menu_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_menu_by_pk() {
          return new FieldNode(
            schema.menu,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.menu_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.menu_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(schema.menu_pk_columns_input, false);
              }
            }),
            true
          );
        },
        get update_mind_person() {
          return new FieldNode(
            schema.mind_person_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.mind_person_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.mind_person_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.mind_person_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_mind_person_by_pk() {
          return new FieldNode(
            schema.mind_person,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.mind_person_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.mind_person_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.mind_person_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_grupo_trabajo() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_grupo_trabajo_by_pk() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_grupo_trabajo_usuario() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_grupo_trabajo_usuario_by_pk() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_igr() {
          return new FieldNode(
            schema.mind_rh_igr_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.mind_rh_igr_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.mind_rh_igr_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.mind_rh_igr_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_mind_rh_igr_by_pk() {
          return new FieldNode(
            schema.mind_rh_igr,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.mind_rh_igr_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.mind_rh_igr_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.mind_rh_igr_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_meta_individual() {
          return new FieldNode(
            schema.mind_rh_meta_individual_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_meta_individual_by_pk() {
          return new FieldNode(
            schema.mind_rh_meta_individual,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_meta_institucional() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_meta_institucional_by_pk() {
          return new FieldNode(
            schema.mind_rh_meta_institucional,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_pnd() {
          return new FieldNode(
            schema.mind_rh_pnd_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.mind_rh_pnd_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.mind_rh_pnd_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.mind_rh_pnd_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_mind_rh_pnd_by_pk() {
          return new FieldNode(
            schema.mind_rh_pnd,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.mind_rh_pnd_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.mind_rh_pnd_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.mind_rh_pnd_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_tipo_meta() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_tipo_meta_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_tipo_meta_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_tipo_meta_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_tipo_meta_by_pk() {
          return new FieldNode(
            schema.mind_rh_tipo_meta,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_tipo_meta_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_tipo_meta_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.mind_rh_tipo_meta_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_unidad_medida() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_unidad_medida_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_unidad_medida_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_unidad_medida_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_unidad_medida_by_pk() {
          return new FieldNode(
            schema.mind_rh_unidad_medida,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_unidad_medida_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_unidad_medida_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.mind_rh_unidad_medida_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_usuario() {
          return new FieldNode(
            schema.mind_rh_usuario_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_usuario_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_usuario_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_usuario_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_mind_rh_usuario_by_pk() {
          return new FieldNode(
            schema.mind_rh_usuario,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.mind_rh_usuario_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.mind_rh_usuario_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.mind_rh_usuario_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_nivelEscolaridad() {
          return new FieldNode(
            schema.nivelEscolaridad_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.nivelEscolaridad_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.nivelEscolaridad_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_nivelEscolaridad_by_pk() {
          return new FieldNode(
            schema.nivelEscolaridad,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.nivelEscolaridad_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.nivelEscolaridad_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_nivelPuesto() {
          return new FieldNode(
            schema.nivelPuesto_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(schema.nivelPuesto_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.nivelPuesto_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_nivelPuesto_by_pk() {
          return new FieldNode(
            schema.nivelPuesto,
            new Arguments({
              get _set() {
                return new ArgumentsField(schema.nivelPuesto_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.nivelPuesto_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_pais() {
          return new FieldNode(
            schema.pais_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(schema.pais_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.pais_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_pais_by_pk() {
          return new FieldNode(
            schema.pais,
            new Arguments({
              get _set() {
                return new ArgumentsField(schema.pais_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(schema.pais_pk_columns_input, false);
              }
            }),
            true
          );
        },
        get update_perfil() {
          return new FieldNode(
            schema.perfil_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.perfil_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.perfil_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.perfil_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_perfil_by_pk() {
          return new FieldNode(
            schema.perfil,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.perfil_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.perfil_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.perfil_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_puesto_generos() {
          return new FieldNode(
            schema.puesto_generos_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.puesto_generos_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.puesto_generos_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.puesto_generos_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_puesto_generos_by_pk() {
          return new FieldNode(
            schema.puesto_generos,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.puesto_generos_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.puesto_generos_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.puesto_generos_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_puestos_generos() {
          return new FieldNode(
            schema.puestos_generos_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.puestos_generos_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.puestos_generos_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.puestos_generos_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_puestos_generos_by_pk() {
          return new FieldNode(
            schema.puestos_generos,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.puestos_generos_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.puestos_generos_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.puestos_generos_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_sfp_reactivos_queretaro() {
          return new FieldNode(
            schema.sfp_reactivos_queretaro_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(
                  schema.sfp_reactivos_queretaro_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.sfp_reactivos_queretaro_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_situacionpuestocat() {
          return new FieldNode(
            schema.situacionpuestocat_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.situacionpuestocat_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.situacionpuestocat_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.situacionpuestocat_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_situacionpuestocat_by_pk() {
          return new FieldNode(
            schema.situacionpuestocat,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.situacionpuestocat_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.situacionpuestocat_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.situacionpuestocat_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_std_country() {
          return new FieldNode(
            schema.std_country_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.std_country_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.std_country_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.std_country_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_std_country_by_pk() {
          return new FieldNode(
            schema.std_country,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.std_country_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.std_country_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.std_country_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_std_geo_div() {
          return new FieldNode(
            schema.std_geo_div_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.std_geo_div_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.std_geo_div_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.std_geo_div_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_std_geo_div_by_pk() {
          return new FieldNode(
            schema.std_geo_div,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.std_geo_div_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.std_geo_div_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.std_geo_div_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_std_geo_place() {
          return new FieldNode(
            schema.std_geo_place_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.std_geo_place_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.std_geo_place_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.std_geo_place_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_std_geo_place_by_pk() {
          return new FieldNode(
            schema.std_geo_place,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.std_geo_place_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.std_geo_place_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.std_geo_place_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_std_lu_edu_diploma() {
          return new FieldNode(
            schema.std_lu_edu_diploma_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.std_lu_edu_diploma_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.std_lu_edu_diploma_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.std_lu_edu_diploma_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_std_lu_edu_diploma_by_pk() {
          return new FieldNode(
            schema.std_lu_edu_diploma,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.std_lu_edu_diploma_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.std_lu_edu_diploma_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.std_lu_edu_diploma_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_std_sub_geo_div() {
          return new FieldNode(
            schema.std_sub_geo_div_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.std_sub_geo_div_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.std_sub_geo_div_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.std_sub_geo_div_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_std_sub_geo_div_by_pk() {
          return new FieldNode(
            schema.std_sub_geo_div,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.std_sub_geo_div_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.std_sub_geo_div_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.std_sub_geo_div_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_std_work_unit() {
          return new FieldNode(
            schema.std_work_unit_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.std_work_unit_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.std_work_unit_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.std_work_unit_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_std_work_unit_by_pk() {
          return new FieldNode(
            schema.std_work_unit,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.std_work_unit_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.std_work_unit_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.std_work_unit_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_strapi_administrator() {
          return new FieldNode(
            schema.strapi_administrator_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.strapi_administrator_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.strapi_administrator_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.strapi_administrator_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_strapi_administrator_by_pk() {
          return new FieldNode(
            schema.strapi_administrator,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.strapi_administrator_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.strapi_administrator_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.strapi_administrator_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_strapi_webhooks() {
          return new FieldNode(
            schema.strapi_webhooks_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.strapi_webhooks_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.strapi_webhooks_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.strapi_webhooks_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.strapi_webhooks_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.strapi_webhooks_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.strapi_webhooks_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.strapi_webhooks_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.strapi_webhooks_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_strapi_webhooks_by_pk() {
          return new FieldNode(
            schema.strapi_webhooks,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.strapi_webhooks_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.strapi_webhooks_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.strapi_webhooks_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.strapi_webhooks_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.strapi_webhooks_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.strapi_webhooks_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.strapi_webhooks_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.strapi_webhooks_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_temario() {
          return new FieldNode(
            schema.temario_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.temario_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.temario_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.temario_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_temario_by_pk() {
          return new FieldNode(
            schema.temario,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.temario_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.temario_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.temario_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_unidad_administrativas() {
          return new FieldNode(
            schema.unidad_administrativas_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.unidad_administrativas_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.unidad_administrativas_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.unidad_administrativas_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_unidad_administrativas_by_pk() {
          return new FieldNode(
            schema.unidad_administrativas,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.unidad_administrativas_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.unidad_administrativas_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.unidad_administrativas_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_upload_file() {
          return new FieldNode(
            schema.upload_file_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.upload_file_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.upload_file_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.upload_file_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.upload_file_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(schema.upload_file_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.upload_file_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(schema.upload_file_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.upload_file_bool_exp, false);
              }
            }),
            true
          );
        },
        get update_upload_file_by_pk() {
          return new FieldNode(
            schema.upload_file,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.upload_file_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.upload_file_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.upload_file_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.upload_file_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(schema.upload_file_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.upload_file_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(schema.upload_file_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.upload_file_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        },
        get update_upload_file_morph() {
          return new FieldNode(
            schema.upload_file_morph_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.upload_file_morph_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.upload_file_morph_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.upload_file_morph_bool_exp,
                  false
                );
              }
            }),
            true
          );
        },
        get update_upload_file_morph_by_pk() {
          return new FieldNode(
            schema.upload_file_morph,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.upload_file_morph_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.upload_file_morph_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.upload_file_morph_pk_columns_input,
                  false
                );
              }
            }),
            true
          );
        }
      },
      {
        name: "mutation_root",
        extension: ((extensions as any) || {}).mutation_root
      }
    );
  },
  get nivelEscolaridad() {
    return new ObjectNode(
      {
        get convocatoriageneronospcs() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriageneronospc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospcs_aggregate() {
          return new FieldNode(
            schema.convocatoriageneronospc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriagenero, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros_aggregate() {
          return new FieldNode(
            schema.convocatoriagenero_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get idNivelEscolaridad() {
          return new FieldNode(schema.String, undefined, false);
        },
        get nivelEscolaridad() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "nivelEscolaridad",
        extension: ((extensions as any) || {}).nivelEscolaridad
      }
    );
  },
  get nivelEscolaridad_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.nivelEscolaridad_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.nivelEscolaridad, false),
            undefined,
            false
          );
        }
      },
      {
        name: "nivelEscolaridad_aggregate",
        extension: ((extensions as any) || {}).nivelEscolaridad_aggregate
      }
    );
  },
  get nivelEscolaridad_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelEscolaridad_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.nivelEscolaridad_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.nivelEscolaridad_min_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "nivelEscolaridad_aggregate_fields",
        extension: ((extensions as any) || {}).nivelEscolaridad_aggregate_fields
      }
    );
  },
  get nivelEscolaridad_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.nivelEscolaridad_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.nivelEscolaridad_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.nivelEscolaridad_bool_exp, true),
            true
          );
        },
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_bool_exp,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(schema.convocatoriagenero_bool_exp, true);
        },
        get idNivelEscolaridad() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nivelEscolaridad() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "nivelEscolaridad_bool_exp" }
    );
  },
  get nivelEscolaridad_constraint() {
    return new EnumNode({ name: "nivelEscolaridad_constraint" });
  },
  get nivelEscolaridad_insert_input() {
    return new InputNode(
      {
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_arr_rel_insert_input,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(
            schema.convocatoriagenero_arr_rel_insert_input,
            true
          );
        },
        get idNivelEscolaridad() {
          return new InputNodeField(schema.String, true);
        },
        get nivelEscolaridad() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "nivelEscolaridad_insert_input" }
    );
  },
  get nivelEscolaridad_max_fields() {
    return new ObjectNode(
      {
        get idNivelEscolaridad() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelEscolaridad() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "nivelEscolaridad_max_fields",
        extension: ((extensions as any) || {}).nivelEscolaridad_max_fields
      }
    );
  },
  get nivelEscolaridad_min_fields() {
    return new ObjectNode(
      {
        get idNivelEscolaridad() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelEscolaridad() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "nivelEscolaridad_min_fields",
        extension: ((extensions as any) || {}).nivelEscolaridad_min_fields
      }
    );
  },
  get nivelEscolaridad_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.nivelEscolaridad, false),
            undefined,
            false
          );
        }
      },
      {
        name: "nivelEscolaridad_mutation_response",
        extension: ((extensions as any) || {})
          .nivelEscolaridad_mutation_response
      }
    );
  },
  get nivelEscolaridad_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.nivelEscolaridad_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.nivelEscolaridad_on_conflict, true);
        }
      },
      { name: "nivelEscolaridad_obj_rel_insert_input" }
    );
  },
  get nivelEscolaridad_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.nivelEscolaridad_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.nivelEscolaridad_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.nivelEscolaridad_bool_exp, true);
        }
      },
      { name: "nivelEscolaridad_on_conflict" }
    );
  },
  get nivelEscolaridad_order_by() {
    return new InputNode(
      {
        get convocatoriageneronospcs_aggregate() {
          return new InputNodeField(
            schema.convocatoriageneronospc_aggregate_order_by,
            true
          );
        },
        get convocatoriageneros_aggregate() {
          return new InputNodeField(
            schema.convocatoriagenero_aggregate_order_by,
            true
          );
        },
        get idNivelEscolaridad() {
          return new InputNodeField(schema.order_by, true);
        },
        get nivelEscolaridad() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "nivelEscolaridad_order_by" }
    );
  },
  get nivelEscolaridad_pk_columns_input() {
    return new InputNode(
      {
        get idNivelEscolaridad() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "nivelEscolaridad_pk_columns_input" }
    );
  },
  get nivelEscolaridad_select_column() {
    return new EnumNode({ name: "nivelEscolaridad_select_column" });
  },
  get nivelEscolaridad_set_input() {
    return new InputNode(
      {
        get idNivelEscolaridad() {
          return new InputNodeField(schema.String, true);
        },
        get nivelEscolaridad() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "nivelEscolaridad_set_input" }
    );
  },
  get nivelEscolaridad_update_column() {
    return new EnumNode({ name: "nivelEscolaridad_update_column" });
  },
  get nivelPuesto() {
    return new ObjectNode(
      {
        get idNivelPuesto() {
          return new FieldNode(schema.String, undefined, false);
        },
        get nivelPuesto() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "nivelPuesto",
        extension: ((extensions as any) || {}).nivelPuesto
      }
    );
  },
  get nivelPuesto_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.nivelPuesto_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.nivelPuesto, false),
            undefined,
            false
          );
        }
      },
      {
        name: "nivelPuesto_aggregate",
        extension: ((extensions as any) || {}).nivelPuesto_aggregate
      }
    );
  },
  get nivelPuesto_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelPuesto_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.nivelPuesto_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.nivelPuesto_min_fields, undefined, true);
        }
      },
      {
        name: "nivelPuesto_aggregate_fields",
        extension: ((extensions as any) || {}).nivelPuesto_aggregate_fields
      }
    );
  },
  get nivelPuesto_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.nivelPuesto_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.nivelPuesto_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.nivelPuesto_bool_exp, true),
            true
          );
        },
        get idNivelPuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nivelPuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "nivelPuesto_bool_exp" }
    );
  },
  get nivelPuesto_constraint() {
    return new EnumNode({ name: "nivelPuesto_constraint" });
  },
  get nivelPuesto_insert_input() {
    return new InputNode(
      {
        get idNivelPuesto() {
          return new InputNodeField(schema.String, true);
        },
        get nivelPuesto() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "nivelPuesto_insert_input" }
    );
  },
  get nivelPuesto_max_fields() {
    return new ObjectNode(
      {
        get idNivelPuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelPuesto() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "nivelPuesto_max_fields",
        extension: ((extensions as any) || {}).nivelPuesto_max_fields
      }
    );
  },
  get nivelPuesto_min_fields() {
    return new ObjectNode(
      {
        get idNivelPuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelPuesto() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "nivelPuesto_min_fields",
        extension: ((extensions as any) || {}).nivelPuesto_min_fields
      }
    );
  },
  get nivelPuesto_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.nivelPuesto, false),
            undefined,
            false
          );
        }
      },
      {
        name: "nivelPuesto_mutation_response",
        extension: ((extensions as any) || {}).nivelPuesto_mutation_response
      }
    );
  },
  get nivelPuesto_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.nivelPuesto_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.nivelPuesto_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.nivelPuesto_bool_exp, true);
        }
      },
      { name: "nivelPuesto_on_conflict" }
    );
  },
  get nivelPuesto_order_by() {
    return new InputNode(
      {
        get idNivelPuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nivelPuesto() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "nivelPuesto_order_by" }
    );
  },
  get nivelPuesto_pk_columns_input() {
    return new InputNode(
      {
        get idNivelPuesto() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "nivelPuesto_pk_columns_input" }
    );
  },
  get nivelPuesto_select_column() {
    return new EnumNode({ name: "nivelPuesto_select_column" });
  },
  get nivelPuesto_set_input() {
    return new InputNode(
      {
        get idNivelPuesto() {
          return new InputNodeField(schema.String, true);
        },
        get nivelPuesto() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "nivelPuesto_set_input" }
    );
  },
  get nivelPuesto_update_column() {
    return new EnumNode({ name: "nivelPuesto_update_column" });
  },
  get numeric() {
    return new ScalarNode({
      name: "numeric",
      extension: ((extensions as any) || {}).numeric
    });
  },
  get numeric_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.numeric, true);
        },
        get _gt() {
          return new InputNodeField(schema.numeric, true);
        },
        get _gte() {
          return new InputNodeField(schema.numeric, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.numeric, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.numeric, true);
        },
        get _lte() {
          return new InputNodeField(schema.numeric, true);
        },
        get _neq() {
          return new InputNodeField(schema.numeric, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.numeric, true), true);
        }
      },
      { name: "numeric_comparison_exp" }
    );
  },
  get order_by() {
    return new EnumNode({ name: "order_by" });
  },
  get pais() {
    return new ObjectNode(
      {
        get convocatoriageneronospcs() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriageneronospc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospcs_aggregate() {
          return new FieldNode(
            schema.convocatoriageneronospc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriagenero, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneros_aggregate() {
          return new FieldNode(
            schema.convocatoriagenero_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get entidadFederativas() {
          return new FieldNode(
            new ArrayNode(schema.entidadFederativa, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.entidadFederativa_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get entidadFederativas_aggregate() {
          return new FieldNode(
            schema.entidadFederativa_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.entidadFederativa_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get idPais() {
          return new FieldNode(schema.String, undefined, false);
        },
        get pais() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      { name: "pais", extension: ((extensions as any) || {}).pais }
    );
  },
  get pais_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(schema.pais_aggregate_fields, undefined, true);
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.pais, false),
            undefined,
            false
          );
        }
      },
      {
        name: "pais_aggregate",
        extension: ((extensions as any) || {}).pais_aggregate
      }
    );
  },
  get pais_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.pais_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.pais_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.pais_min_fields, undefined, true);
        }
      },
      {
        name: "pais_aggregate_fields",
        extension: ((extensions as any) || {}).pais_aggregate_fields
      }
    );
  },
  get pais_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.pais_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.pais_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.pais_bool_exp, true),
            true
          );
        },
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_bool_exp,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(schema.convocatoriagenero_bool_exp, true);
        },
        get entidadFederativas() {
          return new InputNodeField(schema.entidadFederativa_bool_exp, true);
        },
        get idPais() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get pais() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "pais_bool_exp" }
    );
  },
  get pais_constraint() {
    return new EnumNode({ name: "pais_constraint" });
  },
  get pais_insert_input() {
    return new InputNode(
      {
        get convocatoriageneronospcs() {
          return new InputNodeField(
            schema.convocatoriageneronospc_arr_rel_insert_input,
            true
          );
        },
        get convocatoriageneros() {
          return new InputNodeField(
            schema.convocatoriagenero_arr_rel_insert_input,
            true
          );
        },
        get entidadFederativas() {
          return new InputNodeField(
            schema.entidadFederativa_arr_rel_insert_input,
            true
          );
        },
        get idPais() {
          return new InputNodeField(schema.String, true);
        },
        get pais() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "pais_insert_input" }
    );
  },
  get pais_max_fields() {
    return new ObjectNode(
      {
        get idPais() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pais() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "pais_max_fields",
        extension: ((extensions as any) || {}).pais_max_fields
      }
    );
  },
  get pais_min_fields() {
    return new ObjectNode(
      {
        get idPais() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pais() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "pais_min_fields",
        extension: ((extensions as any) || {}).pais_min_fields
      }
    );
  },
  get pais_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.pais, false),
            undefined,
            false
          );
        }
      },
      {
        name: "pais_mutation_response",
        extension: ((extensions as any) || {}).pais_mutation_response
      }
    );
  },
  get pais_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.pais_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.pais_on_conflict, true);
        }
      },
      { name: "pais_obj_rel_insert_input" }
    );
  },
  get pais_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.pais_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.pais_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.pais_bool_exp, true);
        }
      },
      { name: "pais_on_conflict" }
    );
  },
  get pais_order_by() {
    return new InputNode(
      {
        get convocatoriageneronospcs_aggregate() {
          return new InputNodeField(
            schema.convocatoriageneronospc_aggregate_order_by,
            true
          );
        },
        get convocatoriageneros_aggregate() {
          return new InputNodeField(
            schema.convocatoriagenero_aggregate_order_by,
            true
          );
        },
        get entidadFederativas_aggregate() {
          return new InputNodeField(
            schema.entidadFederativa_aggregate_order_by,
            true
          );
        },
        get idPais() {
          return new InputNodeField(schema.order_by, true);
        },
        get pais() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "pais_order_by" }
    );
  },
  get pais_pk_columns_input() {
    return new InputNode(
      {
        get idPais() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "pais_pk_columns_input" }
    );
  },
  get pais_select_column() {
    return new EnumNode({ name: "pais_select_column" });
  },
  get pais_set_input() {
    return new InputNode(
      {
        get idPais() {
          return new InputNodeField(schema.String, true);
        },
        get pais() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "pais_set_input" }
    );
  },
  get pais_update_column() {
    return new EnumNode({ name: "pais_update_column" });
  },
  get perfil() {
    return new ObjectNode(
      {
        get curriculums() {
          return new FieldNode(
            new ArrayNode(schema.curriculum, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.curriculum_bool_exp, true);
              }
            }),
            false
          );
        },
        get curriculums_aggregate() {
          return new FieldNode(
            schema.curriculum_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.curriculum_bool_exp, true);
              }
            }),
            false
          );
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get id_trabajaen() {
          return new FieldNode(schema.String, undefined, false);
        },
        get user() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      { name: "perfil", extension: ((extensions as any) || {}).perfil }
    );
  },
  get perfil_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(schema.perfil_aggregate_fields, undefined, true);
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.perfil, false),
            undefined,
            false
          );
        }
      },
      {
        name: "perfil_aggregate",
        extension: ((extensions as any) || {}).perfil_aggregate
      }
    );
  },
  get perfil_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.perfil_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.perfil_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.perfil_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.perfil_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.perfil_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(
            schema.perfil_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.perfil_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.perfil_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.perfil_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.perfil_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.perfil_variance_fields, undefined, true);
        }
      },
      {
        name: "perfil_aggregate_fields",
        extension: ((extensions as any) || {}).perfil_aggregate_fields
      }
    );
  },
  get perfil_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "perfil_avg_fields",
        extension: ((extensions as any) || {}).perfil_avg_fields
      }
    );
  },
  get perfil_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.perfil_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.perfil_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.perfil_bool_exp, true),
            true
          );
        },
        get curriculums() {
          return new InputNodeField(schema.curriculum_bool_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id_trabajaen() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "perfil_bool_exp" }
    );
  },
  get perfil_constraint() {
    return new EnumNode({ name: "perfil_constraint" });
  },
  get perfil_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "perfil_inc_input" }
    );
  },
  get perfil_insert_input() {
    return new InputNode(
      {
        get curriculums() {
          return new InputNodeField(
            schema.curriculum_arr_rel_insert_input,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_trabajaen() {
          return new InputNodeField(schema.String, true);
        },
        get user() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "perfil_insert_input" }
    );
  },
  get perfil_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_trabajaen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get user() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "perfil_max_fields",
        extension: ((extensions as any) || {}).perfil_max_fields
      }
    );
  },
  get perfil_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id_trabajaen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get user() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "perfil_min_fields",
        extension: ((extensions as any) || {}).perfil_min_fields
      }
    );
  },
  get perfil_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.perfil, false),
            undefined,
            false
          );
        }
      },
      {
        name: "perfil_mutation_response",
        extension: ((extensions as any) || {}).perfil_mutation_response
      }
    );
  },
  get perfil_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.perfil_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.perfil_on_conflict, true);
        }
      },
      { name: "perfil_obj_rel_insert_input" }
    );
  },
  get perfil_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.perfil_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.perfil_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.perfil_bool_exp, true);
        }
      },
      { name: "perfil_on_conflict" }
    );
  },
  get perfil_order_by() {
    return new InputNode(
      {
        get curriculums_aggregate() {
          return new InputNodeField(schema.curriculum_aggregate_order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_trabajaen() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "perfil_order_by" }
    );
  },
  get perfil_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
        get id_trabajaen() {
          return new InputNodeField(schema.String, false);
        },
        get user() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "perfil_pk_columns_input" }
    );
  },
  get perfil_select_column() {
    return new EnumNode({ name: "perfil_select_column" });
  },
  get perfil_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get id_trabajaen() {
          return new InputNodeField(schema.String, true);
        },
        get user() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "perfil_set_input" }
    );
  },
  get perfil_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "perfil_stddev_fields",
        extension: ((extensions as any) || {}).perfil_stddev_fields
      }
    );
  },
  get perfil_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "perfil_stddev_pop_fields",
        extension: ((extensions as any) || {}).perfil_stddev_pop_fields
      }
    );
  },
  get perfil_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "perfil_stddev_samp_fields",
        extension: ((extensions as any) || {}).perfil_stddev_samp_fields
      }
    );
  },
  get perfil_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "perfil_sum_fields",
        extension: ((extensions as any) || {}).perfil_sum_fields
      }
    );
  },
  get perfil_update_column() {
    return new EnumNode({ name: "perfil_update_column" });
  },
  get perfil_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "perfil_var_pop_fields",
        extension: ((extensions as any) || {}).perfil_var_pop_fields
      }
    );
  },
  get perfil_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "perfil_var_samp_fields",
        extension: ((extensions as any) || {}).perfil_var_samp_fields
      }
    );
  },
  get perfil_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "perfil_variance_fields",
        extension: ((extensions as any) || {}).perfil_variance_fields
      }
    );
  },
  get puesto_generos() {
    return new ObjectNode(
      {
        get codigoPuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get dependencia() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get nivelPresupuestal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get unidad_administrativa() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        }
      },
      {
        name: "puesto_generos",
        extension: ((extensions as any) || {}).puesto_generos
      }
    );
  },
  get puesto_generos_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.puesto_generos_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.puesto_generos, false),
            undefined,
            false
          );
        }
      },
      {
        name: "puesto_generos_aggregate",
        extension: ((extensions as any) || {}).puesto_generos_aggregate
      }
    );
  },
  get puesto_generos_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.puesto_generos_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.puesto_generos_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.puesto_generos_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.puesto_generos_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.puesto_generos_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.puesto_generos_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.puesto_generos_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.puesto_generos_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.puesto_generos_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.puesto_generos_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.puesto_generos_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "puesto_generos_aggregate_fields",
        extension: ((extensions as any) || {}).puesto_generos_aggregate_fields
      }
    );
  },
  get puesto_generos_avg_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unidad_administrativa() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puesto_generos_avg_fields",
        extension: ((extensions as any) || {}).puesto_generos_avg_fields
      }
    );
  },
  get puesto_generos_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.puesto_generos_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.puesto_generos_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.puesto_generos_bool_exp, true),
            true
          );
        },
        get codigoPuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        },
        get dependencia() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get nivelPresupuestal() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get unidad_administrativa() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        }
      },
      { name: "puesto_generos_bool_exp" }
    );
  },
  get puesto_generos_constraint() {
    return new EnumNode({ name: "puesto_generos_constraint" });
  },
  get puesto_generos_inc_input() {
    return new InputNode(
      {
        get dependencia() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get unidad_administrativa() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "puesto_generos_inc_input" }
    );
  },
  get puesto_generos_insert_input() {
    return new InputNode(
      {
        get codigoPuesto() {
          return new InputNodeField(schema.String, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get dependencia() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get nivelPresupuestal() {
          return new InputNodeField(schema.String, true);
        },
        get unidad_administrativa() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz, true);
        }
      },
      { name: "puesto_generos_insert_input" }
    );
  },
  get puesto_generos_max_fields() {
    return new ObjectNode(
      {
        get codigoPuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get dependencia() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get nivelPresupuestal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get unidad_administrativa() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        }
      },
      {
        name: "puesto_generos_max_fields",
        extension: ((extensions as any) || {}).puesto_generos_max_fields
      }
    );
  },
  get puesto_generos_min_fields() {
    return new ObjectNode(
      {
        get codigoPuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get dependencia() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get nivelPresupuestal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get unidad_administrativa() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        }
      },
      {
        name: "puesto_generos_min_fields",
        extension: ((extensions as any) || {}).puesto_generos_min_fields
      }
    );
  },
  get puesto_generos_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.puesto_generos, false),
            undefined,
            false
          );
        }
      },
      {
        name: "puesto_generos_mutation_response",
        extension: ((extensions as any) || {}).puesto_generos_mutation_response
      }
    );
  },
  get puesto_generos_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.puesto_generos_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.puesto_generos_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.puesto_generos_bool_exp, true);
        }
      },
      { name: "puesto_generos_on_conflict" }
    );
  },
  get puesto_generos_order_by() {
    return new InputNode(
      {
        get codigoPuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get created_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get dependencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get nivelPresupuestal() {
          return new InputNodeField(schema.order_by, true);
        },
        get unidad_administrativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "puesto_generos_order_by" }
    );
  },
  get puesto_generos_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "puesto_generos_pk_columns_input" }
    );
  },
  get puesto_generos_select_column() {
    return new EnumNode({ name: "puesto_generos_select_column" });
  },
  get puesto_generos_set_input() {
    return new InputNode(
      {
        get codigoPuesto() {
          return new InputNodeField(schema.String, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get dependencia() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get nivelPresupuestal() {
          return new InputNodeField(schema.String, true);
        },
        get unidad_administrativa() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz, true);
        }
      },
      { name: "puesto_generos_set_input" }
    );
  },
  get puesto_generos_stddev_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unidad_administrativa() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puesto_generos_stddev_fields",
        extension: ((extensions as any) || {}).puesto_generos_stddev_fields
      }
    );
  },
  get puesto_generos_stddev_pop_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unidad_administrativa() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puesto_generos_stddev_pop_fields",
        extension: ((extensions as any) || {}).puesto_generos_stddev_pop_fields
      }
    );
  },
  get puesto_generos_stddev_samp_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unidad_administrativa() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puesto_generos_stddev_samp_fields",
        extension: ((extensions as any) || {}).puesto_generos_stddev_samp_fields
      }
    );
  },
  get puesto_generos_sum_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unidad_administrativa() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "puesto_generos_sum_fields",
        extension: ((extensions as any) || {}).puesto_generos_sum_fields
      }
    );
  },
  get puesto_generos_update_column() {
    return new EnumNode({ name: "puesto_generos_update_column" });
  },
  get puesto_generos_var_pop_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unidad_administrativa() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puesto_generos_var_pop_fields",
        extension: ((extensions as any) || {}).puesto_generos_var_pop_fields
      }
    );
  },
  get puesto_generos_var_samp_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unidad_administrativa() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puesto_generos_var_samp_fields",
        extension: ((extensions as any) || {}).puesto_generos_var_samp_fields
      }
    );
  },
  get puesto_generos_variance_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unidad_administrativa() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puesto_generos_variance_fields",
        extension: ((extensions as any) || {}).puesto_generos_variance_fields
      }
    );
  },
  get puestos_genero() {
    return new ObjectNode(
      {
        get areaGeneralEstudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get areaGeneralExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get carreraGenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get codigopostal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get codigopuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get colonia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get dependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion1() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion2() {
          return new FieldNode(schema.String, undefined, true);
        },
        get entidadFederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fechafinconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechafinpublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainicioconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainiciopublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fin() {
          return new FieldNode(schema.date, undefined, true);
        },
        get genero() {
          return new FieldNode(schema.String, undefined, true);
        },
        get grupoExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idareageneralestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idareageneralexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idcarreragenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get iddependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get identidadfederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idgrupoexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelsalarial() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idpais() {
          return new FieldNode(schema.String, undefined, true);
        },
        get iduapadre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inicio() {
          return new FieldNode(schema.date, undefined, true);
        },
        get moneda() {
          return new FieldNode(schema.String, undefined, true);
        },
        get municipio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelEscolaridad() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelPuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreconvocatoria() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombrepuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreunidadadministrativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get wicon() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "puestos_genero",
        extension: ((extensions as any) || {}).puestos_genero
      }
    );
  },
  get puestos_genero_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.puestos_genero_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.puestos_genero, false),
            undefined,
            false
          );
        }
      },
      {
        name: "puestos_genero_aggregate",
        extension: ((extensions as any) || {}).puestos_genero_aggregate
      }
    );
  },
  get puestos_genero_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.puestos_genero_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_genero_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.puestos_genero_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.puestos_genero_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.puestos_genero_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.puestos_genero_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.puestos_genero_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.puestos_genero_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.puestos_genero_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.puestos_genero_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.puestos_genero_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "puestos_genero_aggregate_fields",
        extension: ((extensions as any) || {}).puestos_genero_aggregate_fields
      }
    );
  },
  get puestos_genero_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_genero_avg_fields",
        extension: ((extensions as any) || {}).puestos_genero_avg_fields
      }
    );
  },
  get puestos_genero_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.puestos_genero_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.puestos_genero_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.puestos_genero_bool_exp, true),
            true
          );
        },
        get areaGeneralEstudios() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get areaGeneralExperiencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get carreraGenerica() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get codigopostal() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get colonia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get dependencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get direccion1() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get direccion2() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get entidadFederativa() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get fin() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get genero() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get grupoExperiencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idpais() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get inicio() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get moneda() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get municipio() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nivelEscolaridad() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nivelPuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nivelpuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get sueldo() {
          return new InputNodeField(schema.numeric_comparison_exp, true);
        },
        get ur() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get wicon() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "puestos_genero_bool_exp" }
    );
  },
  get puestos_genero_max_fields() {
    return new ObjectNode(
      {
        get areaGeneralEstudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get areaGeneralExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get carreraGenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get codigopostal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get codigopuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get colonia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get dependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion1() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion2() {
          return new FieldNode(schema.String, undefined, true);
        },
        get entidadFederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fechafinconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechafinpublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainicioconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainiciopublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fin() {
          return new FieldNode(schema.date, undefined, true);
        },
        get genero() {
          return new FieldNode(schema.String, undefined, true);
        },
        get grupoExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idareageneralestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idareageneralexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idcarreragenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get iddependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get identidadfederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idgrupoexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelsalarial() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idpais() {
          return new FieldNode(schema.String, undefined, true);
        },
        get iduapadre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inicio() {
          return new FieldNode(schema.date, undefined, true);
        },
        get moneda() {
          return new FieldNode(schema.String, undefined, true);
        },
        get municipio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelEscolaridad() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelPuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreconvocatoria() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombrepuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreunidadadministrativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get wicon() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "puestos_genero_max_fields",
        extension: ((extensions as any) || {}).puestos_genero_max_fields
      }
    );
  },
  get puestos_genero_min_fields() {
    return new ObjectNode(
      {
        get areaGeneralEstudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get areaGeneralExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get carreraGenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get codigopostal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get codigopuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get colonia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get dependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion1() {
          return new FieldNode(schema.String, undefined, true);
        },
        get direccion2() {
          return new FieldNode(schema.String, undefined, true);
        },
        get entidadFederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fechafinconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechafinpublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainicioconvocatoria() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fechainiciopublicacion() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fin() {
          return new FieldNode(schema.date, undefined, true);
        },
        get genero() {
          return new FieldNode(schema.String, undefined, true);
        },
        get grupoExperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idareageneralestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idareageneralexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idcarreragenerica() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get iddependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get identidadfederativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idgrupoexperiencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelestudios() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idnivelsalarial() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idpais() {
          return new FieldNode(schema.String, undefined, true);
        },
        get iduapadre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inicio() {
          return new FieldNode(schema.date, undefined, true);
        },
        get moneda() {
          return new FieldNode(schema.String, undefined, true);
        },
        get municipio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelEscolaridad() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelPuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nivelpuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreconvocatoria() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombrepuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombreunidadadministrativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get ur() {
          return new FieldNode(schema.String, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get wicon() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "puestos_genero_min_fields",
        extension: ((extensions as any) || {}).puestos_genero_min_fields
      }
    );
  },
  get puestos_genero_order_by() {
    return new InputNode(
      {
        get areaGeneralEstudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get areaGeneralExperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get carreraGenerica() {
          return new InputNodeField(schema.order_by, true);
        },
        get codigopostal() {
          return new InputNodeField(schema.order_by, true);
        },
        get codigopuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get colonia() {
          return new InputNodeField(schema.order_by, true);
        },
        get dependencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get direccion1() {
          return new InputNodeField(schema.order_by, true);
        },
        get direccion2() {
          return new InputNodeField(schema.order_by, true);
        },
        get entidadFederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechafinconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechafinpublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainicioconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get fechainiciopublicacion() {
          return new InputNodeField(schema.order_by, true);
        },
        get fin() {
          return new InputNodeField(schema.order_by, true);
        },
        get genero() {
          return new InputNodeField(schema.order_by, true);
        },
        get grupoExperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idareageneralexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idcarreragenerica() {
          return new InputNodeField(schema.order_by, true);
        },
        get idconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get iddependencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get identidadfederativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get idgrupoexperiencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelestudios() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get idnivelsalarial() {
          return new InputNodeField(schema.order_by, true);
        },
        get idpais() {
          return new InputNodeField(schema.order_by, true);
        },
        get iduapadre() {
          return new InputNodeField(schema.order_by, true);
        },
        get inicio() {
          return new InputNodeField(schema.order_by, true);
        },
        get moneda() {
          return new InputNodeField(schema.order_by, true);
        },
        get municipio() {
          return new InputNodeField(schema.order_by, true);
        },
        get nivelEscolaridad() {
          return new InputNodeField(schema.order_by, true);
        },
        get nivelPuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nivelpuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreconvocatoria() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombrepuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombreunidadadministrativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get numerovacantes() {
          return new InputNodeField(schema.order_by, true);
        },
        get sueldo() {
          return new InputNodeField(schema.order_by, true);
        },
        get ur() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get wicon() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "puestos_genero_order_by" }
    );
  },
  get puestos_genero_select_column() {
    return new EnumNode({ name: "puestos_genero_select_column" });
  },
  get puestos_genero_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_genero_stddev_fields",
        extension: ((extensions as any) || {}).puestos_genero_stddev_fields
      }
    );
  },
  get puestos_genero_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_genero_stddev_pop_fields",
        extension: ((extensions as any) || {}).puestos_genero_stddev_pop_fields
      }
    );
  },
  get puestos_genero_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_genero_stddev_samp_fields",
        extension: ((extensions as any) || {}).puestos_genero_stddev_samp_fields
      }
    );
  },
  get puestos_genero_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.numeric, undefined, true);
        }
      },
      {
        name: "puestos_genero_sum_fields",
        extension: ((extensions as any) || {}).puestos_genero_sum_fields
      }
    );
  },
  get puestos_genero_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_genero_var_pop_fields",
        extension: ((extensions as any) || {}).puestos_genero_var_pop_fields
      }
    );
  },
  get puestos_genero_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_genero_var_samp_fields",
        extension: ((extensions as any) || {}).puestos_genero_var_samp_fields
      }
    );
  },
  get puestos_genero_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get idconvocatoria() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get numerovacantes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sueldo() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_genero_variance_fields",
        extension: ((extensions as any) || {}).puestos_genero_variance_fields
      }
    );
  },
  get puestos_generos() {
    return new ObjectNode(
      {
        get codigoPuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        }
      },
      {
        name: "puestos_generos",
        extension: ((extensions as any) || {}).puestos_generos
      }
    );
  },
  get puestos_generos_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.puestos_generos_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.puestos_generos, false),
            undefined,
            false
          );
        }
      },
      {
        name: "puestos_generos_aggregate",
        extension: ((extensions as any) || {}).puestos_generos_aggregate
      }
    );
  },
  get puestos_generos_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.puestos_generos_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_generos_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.puestos_generos_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.puestos_generos_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.puestos_generos_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.puestos_generos_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.puestos_generos_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.puestos_generos_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.puestos_generos_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.puestos_generos_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.puestos_generos_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "puestos_generos_aggregate_fields",
        extension: ((extensions as any) || {}).puestos_generos_aggregate_fields
      }
    );
  },
  get puestos_generos_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_generos_avg_fields",
        extension: ((extensions as any) || {}).puestos_generos_avg_fields
      }
    );
  },
  get puestos_generos_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.puestos_generos_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.puestos_generos_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.puestos_generos_bool_exp, true),
            true
          );
        },
        get codigoPuesto() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        }
      },
      { name: "puestos_generos_bool_exp" }
    );
  },
  get puestos_generos_constraint() {
    return new EnumNode({ name: "puestos_generos_constraint" });
  },
  get puestos_generos_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "puestos_generos_inc_input" }
    );
  },
  get puestos_generos_insert_input() {
    return new InputNode(
      {
        get codigoPuesto() {
          return new InputNodeField(schema.String, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz, true);
        }
      },
      { name: "puestos_generos_insert_input" }
    );
  },
  get puestos_generos_max_fields() {
    return new ObjectNode(
      {
        get codigoPuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        }
      },
      {
        name: "puestos_generos_max_fields",
        extension: ((extensions as any) || {}).puestos_generos_max_fields
      }
    );
  },
  get puestos_generos_min_fields() {
    return new ObjectNode(
      {
        get codigoPuesto() {
          return new FieldNode(schema.String, undefined, true);
        },
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        }
      },
      {
        name: "puestos_generos_min_fields",
        extension: ((extensions as any) || {}).puestos_generos_min_fields
      }
    );
  },
  get puestos_generos_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.puestos_generos, false),
            undefined,
            false
          );
        }
      },
      {
        name: "puestos_generos_mutation_response",
        extension: ((extensions as any) || {}).puestos_generos_mutation_response
      }
    );
  },
  get puestos_generos_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.puestos_generos_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.puestos_generos_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.puestos_generos_bool_exp, true);
        }
      },
      { name: "puestos_generos_on_conflict" }
    );
  },
  get puestos_generos_order_by() {
    return new InputNode(
      {
        get codigoPuesto() {
          return new InputNodeField(schema.order_by, true);
        },
        get created_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "puestos_generos_order_by" }
    );
  },
  get puestos_generos_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "puestos_generos_pk_columns_input" }
    );
  },
  get puestos_generos_select_column() {
    return new EnumNode({ name: "puestos_generos_select_column" });
  },
  get puestos_generos_set_input() {
    return new InputNode(
      {
        get codigoPuesto() {
          return new InputNodeField(schema.String, true);
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz, true);
        }
      },
      { name: "puestos_generos_set_input" }
    );
  },
  get puestos_generos_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_generos_stddev_fields",
        extension: ((extensions as any) || {}).puestos_generos_stddev_fields
      }
    );
  },
  get puestos_generos_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_generos_stddev_pop_fields",
        extension: ((extensions as any) || {}).puestos_generos_stddev_pop_fields
      }
    );
  },
  get puestos_generos_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_generos_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .puestos_generos_stddev_samp_fields
      }
    );
  },
  get puestos_generos_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "puestos_generos_sum_fields",
        extension: ((extensions as any) || {}).puestos_generos_sum_fields
      }
    );
  },
  get puestos_generos_update_column() {
    return new EnumNode({ name: "puestos_generos_update_column" });
  },
  get puestos_generos_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_generos_var_pop_fields",
        extension: ((extensions as any) || {}).puestos_generos_var_pop_fields
      }
    );
  },
  get puestos_generos_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_generos_var_samp_fields",
        extension: ((extensions as any) || {}).puestos_generos_var_samp_fields
      }
    );
  },
  get puestos_generos_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "puestos_generos_variance_fields",
        extension: ((extensions as any) || {}).puestos_generos_variance_fields
      }
    );
  },
  get query_root() {
    return new ObjectNode(
      {
        get PARTICIPANTES() {
          return new FieldNode(
            new ArrayNode(schema.PARTICIPANTES, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.PARTICIPANTES_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.PARTICIPANTES_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.PARTICIPANTES_bool_exp, true);
              }
            }),
            false
          );
        },
        get PARTICIPANTES_aggregate() {
          return new FieldNode(
            schema.PARTICIPANTES_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.PARTICIPANTES_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.PARTICIPANTES_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.PARTICIPANTES_bool_exp, true);
              }
            }),
            false
          );
        },
        get PARTICIPANTES_by_pk() {
          return new FieldNode(
            schema.PARTICIPANTES,
            new Arguments(
              {
                get ID() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get areaGeneralEstudios() {
          return new FieldNode(
            new ArrayNode(schema.areaGeneralEstudios, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralEstudios_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralEstudios_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.areaGeneralEstudios_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get areaGeneralEstudios_aggregate() {
          return new FieldNode(
            schema.areaGeneralEstudios_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralEstudios_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralEstudios_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.areaGeneralEstudios_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get areaGeneralEstudios_by_pk() {
          return new FieldNode(
            schema.areaGeneralEstudios,
            new Arguments(
              {
                get idAreaGeneralEstudios() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get areaGeneralExperiencia() {
          return new FieldNode(
            new ArrayNode(schema.areaGeneralExperiencia, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.areaGeneralExperiencia_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralExperiencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.areaGeneralExperiencia_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get areaGeneralExperiencia_aggregate() {
          return new FieldNode(
            schema.areaGeneralExperiencia_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.areaGeneralExperiencia_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralExperiencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.areaGeneralExperiencia_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get areaGeneralExperiencia_by_pk() {
          return new FieldNode(
            schema.areaGeneralExperiencia,
            new Arguments(
              {
                get idAreaGeneralExperiencia() {
                  return new ArgumentsField(schema.String, false);
                },
                get idGrupoExperiencia() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get busquedaPorActivos() {
          return new FieldNode(
            new ArrayNode(schema.Activos, true),
            new Arguments({
              get anio() {
                return new ArgumentsField(schema.String, true);
              },
              get curp() {
                return new ArgumentsField(schema.String, true);
              },
              get id_sp() {
                return new ArgumentsField(schema.Int, true);
              },
              get mes() {
                return new ArgumentsField(schema.Mes, true);
              },
              get periodo() {
                return new ArgumentsField(schema.Periodo, true);
              },
              get posicionInicial() {
                return new ArgumentsField(schema.Int, true);
              },
              get rfc() {
                return new ArgumentsField(schema.String, true);
              },
              get tipo() {
                return new ArgumentsField(
                  new ArrayNode(schema.Omex, true),
                  true
                );
              }
            }),
            true
          );
        },
        get busquedaPorQuincena() {
          return new FieldNode(
            new ArrayNode(schema.SP, true),
            new Arguments({
              get posicionInicial() {
                return new ArgumentsField(schema.Int, true);
              },
              get quincena() {
                return new ArgumentsField(schema.String, true);
              },
              get ramo() {
                return new ArgumentsField(schema.Int, true);
              },
              get tipo() {
                return new ArgumentsField(schema.Types, false);
              },
              get tipoOmex() {
                return new ArgumentsField(
                  new ArrayNode(schema.Omex, true),
                  true
                );
              },
              get ur() {
                return new ArgumentsField(schema.String, true);
              }
            }),
            true
          );
        },
        get busquedaPorSp() {
          return new FieldNode(
            schema.SP,
            new Arguments({
              get curp() {
                return new ArgumentsField(schema.String, true);
              },
              get id_sp() {
                return new ArgumentsField(schema.Int, true);
              },
              get tipoOmex() {
                return new ArgumentsField(
                  new ArrayNode(schema.Omex, true),
                  true
                );
              }
            }),
            true
          );
        },
        get busquedaPorTipo() {
          return new FieldNode(
            schema.SP,
            new Arguments({
              get id_sp() {
                return new ArgumentsField(schema.Int, false);
              },
              get tipo() {
                return new ArgumentsField(schema.Type, false);
              },
              get tipoOmex() {
                return new ArgumentsField(
                  new ArrayNode(schema.Omex, true),
                  true
                );
              }
            }),
            true
          );
        },
        get calificaciones() {
          return new FieldNode(
            new ArrayNode(schema.calificaciones, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.calificaciones_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.calificaciones_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.calificaciones_bool_exp, true);
              }
            }),
            false
          );
        },
        get calificaciones_aggregate() {
          return new FieldNode(
            schema.calificaciones_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.calificaciones_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.calificaciones_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.calificaciones_bool_exp, true);
              }
            }),
            false
          );
        },
        get calificaciones_by_pk() {
          return new FieldNode(
            schema.calificaciones,
            new Arguments(
              {
                get uid() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get carreraGenerica() {
          return new FieldNode(
            new ArrayNode(schema.carreraGenerica, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.carreraGenerica_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get carreraGenerica_aggregate() {
          return new FieldNode(
            schema.carreraGenerica_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.carreraGenerica_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get carreraGenerica_by_pk() {
          return new FieldNode(
            schema.carreraGenerica,
            new Arguments(
              {
                get idAreaGeneralEstudios() {
                  return new ArgumentsField(schema.String, false);
                },
                get idCarreraGenerica() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get catalogo_idiomas() {
          return new FieldNode(
            new ArrayNode(schema.catalogo_idiomas, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.catalogo_idiomas_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.catalogo_idiomas_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.catalogo_idiomas_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get catalogo_idiomas_aggregate() {
          return new FieldNode(
            schema.catalogo_idiomas_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.catalogo_idiomas_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.catalogo_idiomas_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.catalogo_idiomas_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get catalogo_idiomas_by_pk() {
          return new FieldNode(
            schema.catalogo_idiomas,
            new Arguments(
              {
                get id_idioma() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get cliks() {
          return new FieldNode(
            new ArrayNode(schema.cliks, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.cliks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.cliks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.cliks_bool_exp, true);
              }
            }),
            false
          );
        },
        get cliks_aggregate() {
          return new FieldNode(
            schema.cliks_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.cliks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.cliks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.cliks_bool_exp, true);
              }
            }),
            false
          );
        },
        get cliks_by_pk() {
          return new FieldNode(
            schema.cliks,
            new Arguments(
              {
                get id_clik() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get convocatoriagenero() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriagenero, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriagenero_aggregate() {
          return new FieldNode(
            schema.convocatoriagenero_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriagenero_by_pk() {
          return new FieldNode(
            schema.convocatoriagenero,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get convocatoriageneronospc() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriageneronospc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospc_aggregate() {
          return new FieldNode(
            schema.convocatoriageneronospc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospc_by_pk() {
          return new FieldNode(
            schema.convocatoriageneronospc,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get core_store() {
          return new FieldNode(
            new ArrayNode(schema.core_store, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.core_store_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.core_store_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.core_store_bool_exp, true);
              }
            }),
            false
          );
        },
        get core_store_aggregate() {
          return new FieldNode(
            schema.core_store_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.core_store_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.core_store_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.core_store_bool_exp, true);
              }
            }),
            false
          );
        },
        get core_store_by_pk() {
          return new FieldNode(
            schema.core_store,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get curriculum() {
          return new FieldNode(
            new ArrayNode(schema.curriculum, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.curriculum_bool_exp, true);
              }
            }),
            false
          );
        },
        get curriculum_aggregate() {
          return new FieldNode(
            schema.curriculum_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.curriculum_bool_exp, true);
              }
            }),
            false
          );
        },
        get curriculum_by_pk() {
          return new FieldNode(
            schema.curriculum,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get curso() {
          return new FieldNode(
            new ArrayNode(schema.curso, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.curso_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.curso_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.curso_bool_exp, true);
              }
            }),
            false
          );
        },
        get curso_aggregate() {
          return new FieldNode(
            schema.curso_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.curso_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.curso_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.curso_bool_exp, true);
              }
            }),
            false
          );
        },
        get curso_by_pk() {
          return new FieldNode(
            schema.curso,
            new Arguments(
              {
                get uid() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get dependencia() {
          return new FieldNode(
            new ArrayNode(schema.dependencia, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencia_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.dependencia_bool_exp, true);
              }
            }),
            false
          );
        },
        get dependencia_aggregate() {
          return new FieldNode(
            schema.dependencia_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencia_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.dependencia_bool_exp, true);
              }
            }),
            false
          );
        },
        get dependencia_by_pk() {
          return new FieldNode(
            schema.dependencia,
            new Arguments(
              {
                get idDependencia() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get dependencias() {
          return new FieldNode(
            new ArrayNode(schema.dependencias, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencias_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencias_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.dependencias_bool_exp, true);
              }
            }),
            false
          );
        },
        get dependencias_aggregate() {
          return new FieldNode(
            schema.dependencias_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencias_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencias_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.dependencias_bool_exp, true);
              }
            }),
            false
          );
        },
        get dependencias_by_pk() {
          return new FieldNode(
            schema.dependencias,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get empleado() {
          return new FieldNode(
            schema.Empleado,
            new Arguments({
              get curp() {
                return new ArgumentsField(schema.String, true);
              },
              get email() {
                return new ArgumentsField(schema.String, true);
              },
              get numero_credencial() {
                return new ArgumentsField(schema.ID, true);
              }
            }),
            true
          );
        },
        get empleados() {
          return new FieldNode(
            new ArrayNode(schema.Empleado, false),
            new Arguments({
              get first() {
                return new ArgumentsField(schema.Int, true);
              },
              get skip() {
                return new ArgumentsField(schema.Int, true);
              },
              get unidad_administrativa_id() {
                return new ArgumentsField(schema.String, true);
              }
            }),
            false
          );
        },
        get empleados_count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get unidad_administrativa_id() {
                return new ArgumentsField(schema.String, true);
              }
            }),
            false
          );
        },
        get encuesta() {
          return new FieldNode(
            new ArrayNode(schema.encuesta, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.encuesta_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.encuesta_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.encuesta_bool_exp, true);
              }
            }),
            false
          );
        },
        get encuesta_aggregate() {
          return new FieldNode(
            schema.encuesta_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.encuesta_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.encuesta_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.encuesta_bool_exp, true);
              }
            }),
            false
          );
        },
        get encuesta_by_pk() {
          return new FieldNode(
            schema.encuesta,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get entidadFederativa() {
          return new FieldNode(
            new ArrayNode(schema.entidadFederativa, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.entidadFederativa_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get entidadFederativa_aggregate() {
          return new FieldNode(
            schema.entidadFederativa_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.entidadFederativa_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get entidadFederativa_by_pk() {
          return new FieldNode(
            schema.entidadFederativa,
            new Arguments(
              {
                get idEntidadFederativa() {
                  return new ArgumentsField(schema.String, false);
                },
                get idPais() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get estadopuesto() {
          return new FieldNode(
            new ArrayNode(schema.estadopuesto, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.estadopuesto_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.estadopuesto_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.estadopuesto_bool_exp, true);
              }
            }),
            false
          );
        },
        get estadopuesto_aggregate() {
          return new FieldNode(
            schema.estadopuesto_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.estadopuesto_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.estadopuesto_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.estadopuesto_bool_exp, true);
              }
            }),
            false
          );
        },
        get estadopuesto_by_pk() {
          return new FieldNode(
            schema.estadopuesto,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get grupoExperiencia() {
          return new FieldNode(
            new ArrayNode(schema.grupoExperiencia, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.grupoExperiencia_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.grupoExperiencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.grupoExperiencia_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get grupoExperiencia_aggregate() {
          return new FieldNode(
            schema.grupoExperiencia_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.grupoExperiencia_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.grupoExperiencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.grupoExperiencia_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get grupoExperiencia_by_pk() {
          return new FieldNode(
            schema.grupoExperiencia,
            new Arguments(
              {
                get idGrupoExperiencia() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_client() {
          return new FieldNode(
            new ArrayNode(schema.hydra_client, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.hydra_client_bool_exp, true);
              }
            }),
            false
          );
        },
        get hydra_client_aggregate() {
          return new FieldNode(
            schema.hydra_client_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.hydra_client_bool_exp, true);
              }
            }),
            false
          );
        },
        get hydra_client_by_pk() {
          return new FieldNode(
            schema.hydra_client,
            new Arguments(
              {
                get pk() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_client_migration() {
          return new FieldNode(
            new ArrayNode(schema.hydra_client_migration, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_client_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_client_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_client_migration_aggregate() {
          return new FieldNode(
            schema.hydra_client_migration_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_client_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_client_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_client_migration_by_pk() {
          return new FieldNode(
            schema.hydra_client_migration,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_jwk() {
          return new FieldNode(
            new ArrayNode(schema.hydra_jwk, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.hydra_jwk_bool_exp, true);
              }
            }),
            false
          );
        },
        get hydra_jwk_aggregate() {
          return new FieldNode(
            schema.hydra_jwk_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.hydra_jwk_bool_exp, true);
              }
            }),
            false
          );
        },
        get hydra_jwk_by_pk() {
          return new FieldNode(
            schema.hydra_jwk,
            new Arguments(
              {
                get pk() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_jwk_migration() {
          return new FieldNode(
            new ArrayNode(schema.hydra_jwk_migration, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_migration_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_jwk_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_jwk_migration_aggregate() {
          return new FieldNode(
            schema.hydra_jwk_migration_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_migration_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_jwk_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_jwk_migration_by_pk() {
          return new FieldNode(
            schema.hydra_jwk_migration,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_access() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_access, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_access_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_access_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_access_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_access,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_authentication_consent_migration() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_authentication_consent_migration,
              false
            ),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_consent_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_consent_migration_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_consent_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_consent_migration_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_consent_migration_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_consent_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_consent_migration_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_consent_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_consent_migration_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_consent_migration,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_authentication_request() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_authentication_request, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_request_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_request_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_authentication_request_handled() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_authentication_request_handled,
              false
            ),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_request_handled_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_request_handled_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_authentication_session() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_authentication_session, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_session_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_session_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_session_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_session_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_session_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_session_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_session_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_session_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_code() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_code, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_code_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_code_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_code_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_code,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_consent_request() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_consent_request, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_request_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_request_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_consent_request_handled() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_consent_request_handled, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_request_handled_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_request_handled_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_logout_request() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_logout_request, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_logout_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_logout_request_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_logout_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_logout_request_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_migration() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_migration, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_migration_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_migration_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_migration_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_migration,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_obfuscated_authentication_session() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_obfuscated_authentication_session,
              false
            ),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_obfuscated_authentication_session_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_obfuscated_authentication_session_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_obfuscated_authentication_session_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_obfuscated_authentication_session_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session,
            new Arguments(
              {
                get client_id() {
                  return new ArgumentsField(schema.String, false);
                },
                get subject() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_oidc() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_oidc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_oidc_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_oidc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_oidc_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_oidc,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_pkce() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_pkce, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_pkce_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_pkce_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_pkce_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_pkce,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_refresh() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_refresh, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_refresh_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_refresh_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_refresh_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_refresh_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_refresh_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_refresh_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_refresh_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_refresh,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get jefeInmediato() {
          return new FieldNode(
            new ArrayNode(schema.SP, true),
            new Arguments(
              {
                get codPuesto() {
                  return new ArgumentsField(schema.Int, false);
                },
                get ramo() {
                  return new ArgumentsField(schema.Int, false);
                },
                get ur() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get keycloak_realm_smtp_config() {
          return new FieldNode(
            new ArrayNode(schema.keycloak_realm_smtp_config, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_realm_smtp_config_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_realm_smtp_config_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.keycloak_realm_smtp_config_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get keycloak_realm_smtp_config_aggregate() {
          return new FieldNode(
            schema.keycloak_realm_smtp_config_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_realm_smtp_config_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_realm_smtp_config_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.keycloak_realm_smtp_config_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get keycloak_realm_smtp_config_by_pk() {
          return new FieldNode(
            schema.keycloak_realm_smtp_config,
            new Arguments(
              {
                get name() {
                  return new ArgumentsField(schema.String, false);
                },
                get realm_id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get keycloak_user_role_mapping() {
          return new FieldNode(
            new ArrayNode(schema.keycloak_user_role_mapping, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_user_role_mapping_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_user_role_mapping_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.keycloak_user_role_mapping_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get keycloak_user_role_mapping_aggregate() {
          return new FieldNode(
            schema.keycloak_user_role_mapping_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_user_role_mapping_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_user_role_mapping_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.keycloak_user_role_mapping_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get keycloak_user_role_mapping_by_pk() {
          return new FieldNode(
            schema.keycloak_user_role_mapping,
            new Arguments(
              {
                get role_id() {
                  return new ArgumentsField(schema.String, false);
                },
                get user_id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get m4cfp_area_general() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_area_general, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_general_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_general_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_area_general_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_area_general_aggregate() {
          return new FieldNode(
            schema.m4cfp_area_general_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_general_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_general_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_area_general_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_area_general_by_pk() {
          return new FieldNode(
            schema.m4cfp_area_general,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get m4cfp_area_gral_ex() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_area_gral_ex, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_gral_ex_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_gral_ex_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_area_gral_ex_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_area_gral_ex_aggregate() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_gral_ex_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_gral_ex_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_area_gral_ex_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_area_gral_ex_by_pk() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get m4cfp_carreras_ge() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_carreras_ge, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_carreras_ge_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_carreras_ge_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_carreras_ge_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_carreras_ge_aggregate() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_carreras_ge_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_carreras_ge_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_carreras_ge_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_carreras_ge_by_pk() {
          return new FieldNode(
            schema.m4cfp_carreras_ge,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get m4cfp_gpo_experien() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_gpo_experien, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_gpo_experien_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_gpo_experien_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_gpo_experien_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_gpo_experien_aggregate() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_gpo_experien_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_gpo_experien_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_gpo_experien_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_gpo_experien_by_pk() {
          return new FieldNode(
            schema.m4cfp_gpo_experien,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get m4rch_organization2() {
          return new FieldNode(
            new ArrayNode(schema.m4rch_organization2, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4rch_organization2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4rch_organization2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4rch_organization2_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4rch_organization2_aggregate() {
          return new FieldNode(
            schema.m4rch_organization2_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4rch_organization2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4rch_organization2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4rch_organization2_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4rch_organization2_by_pk() {
          return new FieldNode(
            schema.m4rch_organization2,
            new Arguments(
              {
                get id_organization() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get me() {
          return new FieldNode(schema.Empleado, undefined, true);
        },
        get menu() {
          return new FieldNode(
            new ArrayNode(schema.menu, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.menu_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.menu_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.menu_bool_exp, true);
              }
            }),
            false
          );
        },
        get menu_aggregate() {
          return new FieldNode(
            schema.menu_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.menu_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.menu_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.menu_bool_exp, true);
              }
            }),
            false
          );
        },
        get menu_by_pk() {
          return new FieldNode(
            schema.menu,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_person() {
          return new FieldNode(
            new ArrayNode(schema.mind_person, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_person_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_person_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.mind_person_bool_exp, true);
              }
            }),
            false
          );
        },
        get mind_person_aggregate() {
          return new FieldNode(
            schema.mind_person_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_person_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_person_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.mind_person_bool_exp, true);
              }
            }),
            false
          );
        },
        get mind_person_by_pk() {
          return new FieldNode(
            schema.mind_person,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_grupo_trabajo() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_grupo_trabajo, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_grupo_trabajo_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_grupo_trabajo_aggregate() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_grupo_trabajo_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_grupo_trabajo_by_pk() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_grupo_trabajo_usuario() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_grupo_trabajo_usuario, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_grupo_trabajo_usuario_aggregate() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_grupo_trabajo_usuario_by_pk() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_igr() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_igr, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_igr_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_igr_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.mind_rh_igr_bool_exp, true);
              }
            }),
            false
          );
        },
        get mind_rh_igr_aggregate() {
          return new FieldNode(
            schema.mind_rh_igr_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_igr_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_igr_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.mind_rh_igr_bool_exp, true);
              }
            }),
            false
          );
        },
        get mind_rh_igr_by_pk() {
          return new FieldNode(
            schema.mind_rh_igr,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.smallint, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_meta_individual() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_meta_individual, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_individual_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_meta_individual_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_meta_individual_aggregate() {
          return new FieldNode(
            schema.mind_rh_meta_individual_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_individual_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_meta_individual_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_meta_individual_by_pk() {
          return new FieldNode(
            schema.mind_rh_meta_individual,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_meta_institucional() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_meta_institucional, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_meta_institucional_aggregate() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_meta_institucional_by_pk() {
          return new FieldNode(
            schema.mind_rh_meta_institucional,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_pnd() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_pnd, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_pnd_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_pnd_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.mind_rh_pnd_bool_exp, true);
              }
            }),
            false
          );
        },
        get mind_rh_pnd_aggregate() {
          return new FieldNode(
            schema.mind_rh_pnd_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_pnd_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_pnd_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.mind_rh_pnd_bool_exp, true);
              }
            }),
            false
          );
        },
        get mind_rh_pnd_by_pk() {
          return new FieldNode(
            schema.mind_rh_pnd,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.smallint, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_tipo_meta() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_tipo_meta, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_tipo_meta_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_tipo_meta_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_tipo_meta_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_tipo_meta_aggregate() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_tipo_meta_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_tipo_meta_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_tipo_meta_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_tipo_meta_by_pk() {
          return new FieldNode(
            schema.mind_rh_tipo_meta,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.smallint, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_unidad_medida() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_unidad_medida, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_unidad_medida_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_unidad_medida_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_unidad_medida_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_unidad_medida_aggregate() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_unidad_medida_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_unidad_medida_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_unidad_medida_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_unidad_medida_by_pk() {
          return new FieldNode(
            schema.mind_rh_unidad_medida,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.smallint, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_usuario() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_usuario, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_usuario_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_usuario_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_usuario_aggregate() {
          return new FieldNode(
            schema.mind_rh_usuario_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_usuario_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_usuario_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_usuario_by_pk() {
          return new FieldNode(
            schema.mind_rh_usuario,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get nivelEscolaridad() {
          return new FieldNode(
            new ArrayNode(schema.nivelEscolaridad, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelEscolaridad_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelEscolaridad_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.nivelEscolaridad_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get nivelEscolaridad_aggregate() {
          return new FieldNode(
            schema.nivelEscolaridad_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelEscolaridad_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelEscolaridad_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.nivelEscolaridad_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get nivelEscolaridad_by_pk() {
          return new FieldNode(
            schema.nivelEscolaridad,
            new Arguments(
              {
                get idNivelEscolaridad() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get nivelPuesto() {
          return new FieldNode(
            new ArrayNode(schema.nivelPuesto, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelPuesto_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelPuesto_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.nivelPuesto_bool_exp, true);
              }
            }),
            false
          );
        },
        get nivelPuesto_aggregate() {
          return new FieldNode(
            schema.nivelPuesto_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelPuesto_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelPuesto_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.nivelPuesto_bool_exp, true);
              }
            }),
            false
          );
        },
        get nivelPuesto_by_pk() {
          return new FieldNode(
            schema.nivelPuesto,
            new Arguments(
              {
                get idNivelPuesto() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get pais() {
          return new FieldNode(
            new ArrayNode(schema.pais, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.pais_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.pais_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.pais_bool_exp, true);
              }
            }),
            false
          );
        },
        get pais_aggregate() {
          return new FieldNode(
            schema.pais_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.pais_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.pais_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.pais_bool_exp, true);
              }
            }),
            false
          );
        },
        get pais_by_pk() {
          return new FieldNode(
            schema.pais,
            new Arguments(
              {
                get idPais() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get perfil() {
          return new FieldNode(
            new ArrayNode(schema.perfil, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.perfil_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.perfil_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.perfil_bool_exp, true);
              }
            }),
            false
          );
        },
        get perfil_aggregate() {
          return new FieldNode(
            schema.perfil_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.perfil_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.perfil_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.perfil_bool_exp, true);
              }
            }),
            false
          );
        },
        get perfil_by_pk() {
          return new FieldNode(
            schema.perfil,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
                get id_trabajaen() {
                  return new ArgumentsField(schema.String, false);
                },
                get user() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get puesto_generos() {
          return new FieldNode(
            new ArrayNode(schema.puesto_generos, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.puesto_generos_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.puesto_generos_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.puesto_generos_bool_exp, true);
              }
            }),
            false
          );
        },
        get puesto_generos_aggregate() {
          return new FieldNode(
            schema.puesto_generos_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.puesto_generos_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.puesto_generos_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.puesto_generos_bool_exp, true);
              }
            }),
            false
          );
        },
        get puesto_generos_by_pk() {
          return new FieldNode(
            schema.puesto_generos,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get puestos_genero() {
          return new FieldNode(
            new ArrayNode(schema.puestos_genero, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_genero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_genero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.puestos_genero_bool_exp, true);
              }
            }),
            false
          );
        },
        get puestos_genero_aggregate() {
          return new FieldNode(
            schema.puestos_genero_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_genero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_genero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.puestos_genero_bool_exp, true);
              }
            }),
            false
          );
        },
        get puestos_generos() {
          return new FieldNode(
            new ArrayNode(schema.puestos_generos, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_generos_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_generos_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.puestos_generos_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get puestos_generos_aggregate() {
          return new FieldNode(
            schema.puestos_generos_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_generos_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_generos_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.puestos_generos_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get puestos_generos_by_pk() {
          return new FieldNode(
            schema.puestos_generos,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get sfp_reactivos_queretaro() {
          return new FieldNode(
            new ArrayNode(schema.sfp_reactivos_queretaro, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.sfp_reactivos_queretaro_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.sfp_reactivos_queretaro_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.sfp_reactivos_queretaro_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get sfp_reactivos_queretaro_aggregate() {
          return new FieldNode(
            schema.sfp_reactivos_queretaro_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.sfp_reactivos_queretaro_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.sfp_reactivos_queretaro_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.sfp_reactivos_queretaro_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get situacionpuestocat() {
          return new FieldNode(
            new ArrayNode(schema.situacionpuestocat, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.situacionpuestocat_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.situacionpuestocat_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.situacionpuestocat_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get situacionpuestocat_aggregate() {
          return new FieldNode(
            schema.situacionpuestocat_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.situacionpuestocat_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.situacionpuestocat_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.situacionpuestocat_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get situacionpuestocat_by_pk() {
          return new FieldNode(
            schema.situacionpuestocat,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get std_country() {
          return new FieldNode(
            new ArrayNode(schema.std_country, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_country_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_country_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_country_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_country_aggregate() {
          return new FieldNode(
            schema.std_country_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_country_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_country_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_country_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_country_by_pk() {
          return new FieldNode(
            schema.std_country,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get std_geo_div() {
          return new FieldNode(
            new ArrayNode(schema.std_geo_div, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_div_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_div_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_geo_div_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_geo_div_aggregate() {
          return new FieldNode(
            schema.std_geo_div_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_div_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_div_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_geo_div_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_geo_div_by_pk() {
          return new FieldNode(
            schema.std_geo_div,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get std_geo_place() {
          return new FieldNode(
            new ArrayNode(schema.std_geo_place, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_place_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_place_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_geo_place_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_geo_place_aggregate() {
          return new FieldNode(
            schema.std_geo_place_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_place_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_place_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_geo_place_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_geo_place_by_pk() {
          return new FieldNode(
            schema.std_geo_place,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get std_lu_edu_diploma() {
          return new FieldNode(
            new ArrayNode(schema.std_lu_edu_diploma, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_lu_edu_diploma_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_lu_edu_diploma_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.std_lu_edu_diploma_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get std_lu_edu_diploma_aggregate() {
          return new FieldNode(
            schema.std_lu_edu_diploma_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_lu_edu_diploma_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_lu_edu_diploma_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.std_lu_edu_diploma_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get std_lu_edu_diploma_by_pk() {
          return new FieldNode(
            schema.std_lu_edu_diploma,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get std_sub_geo_div() {
          return new FieldNode(
            new ArrayNode(schema.std_sub_geo_div, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_sub_geo_div_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_sub_geo_div_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.std_sub_geo_div_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get std_sub_geo_div_aggregate() {
          return new FieldNode(
            schema.std_sub_geo_div_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_sub_geo_div_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_sub_geo_div_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.std_sub_geo_div_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get std_sub_geo_div_by_pk() {
          return new FieldNode(
            schema.std_sub_geo_div,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get std_work_unit() {
          return new FieldNode(
            new ArrayNode(schema.std_work_unit, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_work_unit_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_work_unit_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_work_unit_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_work_unit_aggregate() {
          return new FieldNode(
            schema.std_work_unit_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_work_unit_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_work_unit_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_work_unit_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_work_unit_by_pk() {
          return new FieldNode(
            schema.std_work_unit,
            new Arguments(
              {
                get id_organization() {
                  return new ArgumentsField(schema.String, false);
                },
                get std_id_work_unit() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get strapi_administrator() {
          return new FieldNode(
            new ArrayNode(schema.strapi_administrator, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.strapi_administrator_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_administrator_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.strapi_administrator_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get strapi_administrator_aggregate() {
          return new FieldNode(
            schema.strapi_administrator_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.strapi_administrator_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_administrator_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.strapi_administrator_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get strapi_administrator_by_pk() {
          return new FieldNode(
            schema.strapi_administrator,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get strapi_webhooks() {
          return new FieldNode(
            new ArrayNode(schema.strapi_webhooks, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_webhooks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_webhooks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.strapi_webhooks_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get strapi_webhooks_aggregate() {
          return new FieldNode(
            schema.strapi_webhooks_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_webhooks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_webhooks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.strapi_webhooks_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get strapi_webhooks_by_pk() {
          return new FieldNode(
            schema.strapi_webhooks,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get temario() {
          return new FieldNode(
            new ArrayNode(schema.temario, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.temario_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.temario_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.temario_bool_exp, true);
              }
            }),
            false
          );
        },
        get temario_aggregate() {
          return new FieldNode(
            schema.temario_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.temario_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.temario_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.temario_bool_exp, true);
              }
            }),
            false
          );
        },
        get temario_by_pk() {
          return new FieldNode(
            schema.temario,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get totalActivos() {
          return new FieldNode(
            schema.Total,
            new Arguments({
              get anio() {
                return new ArgumentsField(schema.String, true);
              },
              get curp() {
                return new ArgumentsField(schema.String, true);
              },
              get id_sp() {
                return new ArgumentsField(schema.Int, true);
              },
              get mes() {
                return new ArgumentsField(schema.Mes, true);
              },
              get periodo() {
                return new ArgumentsField(schema.Periodo, true);
              },
              get tipo() {
                return new ArgumentsField(
                  new ArrayNode(schema.Omex, true),
                  true
                );
              }
            }),
            true
          );
        },
        get totalQuincena() {
          return new FieldNode(
            schema.Total,
            new Arguments({
              get quincena() {
                return new ArgumentsField(schema.String, true);
              },
              get ramo() {
                return new ArgumentsField(schema.Int, true);
              },
              get tipo() {
                return new ArgumentsField(schema.Types, false);
              },
              get tipoOmex() {
                return new ArgumentsField(
                  new ArrayNode(schema.Omex, true),
                  true
                );
              },
              get ur() {
                return new ArgumentsField(schema.String, true);
              }
            }),
            true
          );
        },
        get unidad_administrativa() {
          return new FieldNode(
            schema.UnidadAdministrativa,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.ID, false);
                }
              },
              true
            ),
            true
          );
        },
        get unidad_administrativas() {
          return new FieldNode(
            new ArrayNode(schema.unidad_administrativas, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.unidad_administrativas_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.unidad_administrativas_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.unidad_administrativas_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get unidad_administrativas_aggregate() {
          return new FieldNode(
            schema.unidad_administrativas_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.unidad_administrativas_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.unidad_administrativas_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.unidad_administrativas_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get unidad_administrativas_by_pk() {
          return new FieldNode(
            schema.unidad_administrativas,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get unidades_administrativas() {
          return new FieldNode(
            new ArrayNode(schema.UnidadAdministrativa, false),
            new Arguments({
              get first() {
                return new ArgumentsField(schema.Int, true);
              },
              get skip() {
                return new ArgumentsField(schema.Int, true);
              }
            }),
            false
          );
        },
        get unidades_administrativas_count() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get upload_file() {
          return new FieldNode(
            new ArrayNode(schema.upload_file, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.upload_file_bool_exp, true);
              }
            }),
            false
          );
        },
        get upload_file_aggregate() {
          return new FieldNode(
            schema.upload_file_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.upload_file_bool_exp, true);
              }
            }),
            false
          );
        },
        get upload_file_by_pk() {
          return new FieldNode(
            schema.upload_file,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get upload_file_morph() {
          return new FieldNode(
            new ArrayNode(schema.upload_file_morph, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_morph_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_morph_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.upload_file_morph_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get upload_file_morph_aggregate() {
          return new FieldNode(
            schema.upload_file_morph_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_morph_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_morph_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.upload_file_morph_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get upload_file_morph_by_pk() {
          return new FieldNode(
            schema.upload_file_morph,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        }
      },
      { name: "query_root", extension: ((extensions as any) || {}).query_root }
    );
  },
  get sfp_reactivos_queretaro() {
    return new ObjectNode(
      {
        get data() {
          return new FieldNode(
            schema.json,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              }
            }),
            true
          );
        }
      },
      {
        name: "sfp_reactivos_queretaro",
        extension: ((extensions as any) || {}).sfp_reactivos_queretaro
      }
    );
  },
  get sfp_reactivos_queretaro_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.sfp_reactivos_queretaro_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.sfp_reactivos_queretaro, false),
            undefined,
            false
          );
        }
      },
      {
        name: "sfp_reactivos_queretaro_aggregate",
        extension: ((extensions as any) || {}).sfp_reactivos_queretaro_aggregate
      }
    );
  },
  get sfp_reactivos_queretaro_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.sfp_reactivos_queretaro_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        }
      },
      {
        name: "sfp_reactivos_queretaro_aggregate_fields",
        extension: ((extensions as any) || {})
          .sfp_reactivos_queretaro_aggregate_fields
      }
    );
  },
  get sfp_reactivos_queretaro_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.sfp_reactivos_queretaro_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.sfp_reactivos_queretaro_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.sfp_reactivos_queretaro_bool_exp, true),
            true
          );
        },
        get data() {
          return new InputNodeField(schema.json_comparison_exp, true);
        }
      },
      { name: "sfp_reactivos_queretaro_bool_exp" }
    );
  },
  get sfp_reactivos_queretaro_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.json, true);
        }
      },
      { name: "sfp_reactivos_queretaro_insert_input" }
    );
  },
  get sfp_reactivos_queretaro_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.sfp_reactivos_queretaro, false),
            undefined,
            false
          );
        }
      },
      {
        name: "sfp_reactivos_queretaro_mutation_response",
        extension: ((extensions as any) || {})
          .sfp_reactivos_queretaro_mutation_response
      }
    );
  },
  get sfp_reactivos_queretaro_order_by() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "sfp_reactivos_queretaro_order_by" }
    );
  },
  get sfp_reactivos_queretaro_select_column() {
    return new EnumNode({ name: "sfp_reactivos_queretaro_select_column" });
  },
  get sfp_reactivos_queretaro_set_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.json, true);
        }
      },
      { name: "sfp_reactivos_queretaro_set_input" }
    );
  },
  get situacionpuestocat() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get situacion() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "situacionpuestocat",
        extension: ((extensions as any) || {}).situacionpuestocat
      }
    );
  },
  get situacionpuestocat_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.situacionpuestocat_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.situacionpuestocat, false),
            undefined,
            false
          );
        }
      },
      {
        name: "situacionpuestocat_aggregate",
        extension: ((extensions as any) || {}).situacionpuestocat_aggregate
      }
    );
  },
  get situacionpuestocat_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.situacionpuestocat_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.situacionpuestocat_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.situacionpuestocat_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.situacionpuestocat_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.situacionpuestocat_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.situacionpuestocat_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.situacionpuestocat_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.situacionpuestocat_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.situacionpuestocat_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.situacionpuestocat_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.situacionpuestocat_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "situacionpuestocat_aggregate_fields",
        extension: ((extensions as any) || {})
          .situacionpuestocat_aggregate_fields
      }
    );
  },
  get situacionpuestocat_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "situacionpuestocat_avg_fields",
        extension: ((extensions as any) || {}).situacionpuestocat_avg_fields
      }
    );
  },
  get situacionpuestocat_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.situacionpuestocat_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.situacionpuestocat_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.situacionpuestocat_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get situacion() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "situacionpuestocat_bool_exp" }
    );
  },
  get situacionpuestocat_constraint() {
    return new EnumNode({ name: "situacionpuestocat_constraint" });
  },
  get situacionpuestocat_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "situacionpuestocat_inc_input" }
    );
  },
  get situacionpuestocat_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get situacion() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "situacionpuestocat_insert_input" }
    );
  },
  get situacionpuestocat_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get situacion() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "situacionpuestocat_max_fields",
        extension: ((extensions as any) || {}).situacionpuestocat_max_fields
      }
    );
  },
  get situacionpuestocat_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get situacion() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "situacionpuestocat_min_fields",
        extension: ((extensions as any) || {}).situacionpuestocat_min_fields
      }
    );
  },
  get situacionpuestocat_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.situacionpuestocat, false),
            undefined,
            false
          );
        }
      },
      {
        name: "situacionpuestocat_mutation_response",
        extension: ((extensions as any) || {})
          .situacionpuestocat_mutation_response
      }
    );
  },
  get situacionpuestocat_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.situacionpuestocat_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.situacionpuestocat_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.situacionpuestocat_bool_exp, true);
        }
      },
      { name: "situacionpuestocat_on_conflict" }
    );
  },
  get situacionpuestocat_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get situacion() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "situacionpuestocat_order_by" }
    );
  },
  get situacionpuestocat_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "situacionpuestocat_pk_columns_input" }
    );
  },
  get situacionpuestocat_select_column() {
    return new EnumNode({ name: "situacionpuestocat_select_column" });
  },
  get situacionpuestocat_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get situacion() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "situacionpuestocat_set_input" }
    );
  },
  get situacionpuestocat_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "situacionpuestocat_stddev_fields",
        extension: ((extensions as any) || {}).situacionpuestocat_stddev_fields
      }
    );
  },
  get situacionpuestocat_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "situacionpuestocat_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .situacionpuestocat_stddev_pop_fields
      }
    );
  },
  get situacionpuestocat_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "situacionpuestocat_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .situacionpuestocat_stddev_samp_fields
      }
    );
  },
  get situacionpuestocat_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "situacionpuestocat_sum_fields",
        extension: ((extensions as any) || {}).situacionpuestocat_sum_fields
      }
    );
  },
  get situacionpuestocat_update_column() {
    return new EnumNode({ name: "situacionpuestocat_update_column" });
  },
  get situacionpuestocat_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "situacionpuestocat_var_pop_fields",
        extension: ((extensions as any) || {}).situacionpuestocat_var_pop_fields
      }
    );
  },
  get situacionpuestocat_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "situacionpuestocat_var_samp_fields",
        extension: ((extensions as any) || {})
          .situacionpuestocat_var_samp_fields
      }
    );
  },
  get situacionpuestocat_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "situacionpuestocat_variance_fields",
        extension: ((extensions as any) || {})
          .situacionpuestocat_variance_fields
      }
    );
  },
  get smallint() {
    return new ScalarNode({
      name: "smallint",
      extension: ((extensions as any) || {}).smallint
    });
  },
  get smallint_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.smallint, true);
        },
        get _gt() {
          return new InputNodeField(schema.smallint, true);
        },
        get _gte() {
          return new InputNodeField(schema.smallint, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.smallint, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.smallint, true);
        },
        get _lte() {
          return new InputNodeField(schema.smallint, true);
        },
        get _neq() {
          return new InputNodeField(schema.smallint, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.smallint, true), true);
        }
      },
      { name: "smallint_comparison_exp" }
    );
  },
  get std_country() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get std_id_country() {
          return new FieldNode(schema.String, undefined, false);
        },
        get std_id_nacionality() {
          return new FieldNode(schema.String, undefined, false);
        },
        get std_n_countryesp() {
          return new FieldNode(schema.String, undefined, false);
        },
        get std_n_nacionalesp() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "std_country",
        extension: ((extensions as any) || {}).std_country
      }
    );
  },
  get std_country_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.std_country_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.std_country, false),
            undefined,
            false
          );
        }
      },
      {
        name: "std_country_aggregate",
        extension: ((extensions as any) || {}).std_country_aggregate
      }
    );
  },
  get std_country_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.std_country_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_country_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.std_country_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.std_country_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.std_country_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.std_country_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.std_country_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.std_country_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.std_country_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.std_country_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.std_country_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "std_country_aggregate_fields",
        extension: ((extensions as any) || {}).std_country_aggregate_fields
      }
    );
  },
  get std_country_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_country_avg_fields",
        extension: ((extensions as any) || {}).std_country_avg_fields
      }
    );
  },
  get std_country_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.std_country_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.std_country_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.std_country_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_id_nacionality() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_n_countryesp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_n_nacionalesp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "std_country_bool_exp" }
    );
  },
  get std_country_constraint() {
    return new EnumNode({ name: "std_country_constraint" });
  },
  get std_country_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "std_country_inc_input" }
    );
  },
  get std_country_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_nacionality() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_countryesp() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_nacionalesp() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "std_country_insert_input" }
    );
  },
  get std_country_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_id_country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_nacionality() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_countryesp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_nacionalesp() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "std_country_max_fields",
        extension: ((extensions as any) || {}).std_country_max_fields
      }
    );
  },
  get std_country_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_id_country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_nacionality() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_countryesp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_nacionalesp() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "std_country_min_fields",
        extension: ((extensions as any) || {}).std_country_min_fields
      }
    );
  },
  get std_country_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.std_country, false),
            undefined,
            false
          );
        }
      },
      {
        name: "std_country_mutation_response",
        extension: ((extensions as any) || {}).std_country_mutation_response
      }
    );
  },
  get std_country_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.std_country_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.std_country_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.std_country_bool_exp, true);
        }
      },
      { name: "std_country_on_conflict" }
    );
  },
  get std_country_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_nacionality() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_n_countryesp() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_n_nacionalesp() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "std_country_order_by" }
    );
  },
  get std_country_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "std_country_pk_columns_input" }
    );
  },
  get std_country_select_column() {
    return new EnumNode({ name: "std_country_select_column" });
  },
  get std_country_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_nacionality() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_countryesp() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_nacionalesp() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "std_country_set_input" }
    );
  },
  get std_country_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_country_stddev_fields",
        extension: ((extensions as any) || {}).std_country_stddev_fields
      }
    );
  },
  get std_country_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_country_stddev_pop_fields",
        extension: ((extensions as any) || {}).std_country_stddev_pop_fields
      }
    );
  },
  get std_country_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_country_stddev_samp_fields",
        extension: ((extensions as any) || {}).std_country_stddev_samp_fields
      }
    );
  },
  get std_country_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "std_country_sum_fields",
        extension: ((extensions as any) || {}).std_country_sum_fields
      }
    );
  },
  get std_country_update_column() {
    return new EnumNode({ name: "std_country_update_column" });
  },
  get std_country_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_country_var_pop_fields",
        extension: ((extensions as any) || {}).std_country_var_pop_fields
      }
    );
  },
  get std_country_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_country_var_samp_fields",
        extension: ((extensions as any) || {}).std_country_var_samp_fields
      }
    );
  },
  get std_country_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_country_variance_fields",
        extension: ((extensions as any) || {}).std_country_variance_fields
      }
    );
  },
  get std_geo_div() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get sme_id_curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_countryid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_id_country() {
          return new FieldNode(schema.String, undefined, false);
        },
        get std_id_geo_div() {
          return new FieldNode(schema.String, undefined, false);
        },
        get std_n_geo_divesp() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "std_geo_div",
        extension: ((extensions as any) || {}).std_geo_div
      }
    );
  },
  get std_geo_div_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.std_geo_div_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.std_geo_div, false),
            undefined,
            false
          );
        }
      },
      {
        name: "std_geo_div_aggregate",
        extension: ((extensions as any) || {}).std_geo_div_aggregate
      }
    );
  },
  get std_geo_div_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.std_geo_div_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_div_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.std_geo_div_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.std_geo_div_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.std_geo_div_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.std_geo_div_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.std_geo_div_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.std_geo_div_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.std_geo_div_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.std_geo_div_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.std_geo_div_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "std_geo_div_aggregate_fields",
        extension: ((extensions as any) || {}).std_geo_div_aggregate_fields
      }
    );
  },
  get std_geo_div_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_countryid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_div_avg_fields",
        extension: ((extensions as any) || {}).std_geo_div_avg_fields
      }
    );
  },
  get std_geo_div_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.std_geo_div_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.std_geo_div_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.std_geo_div_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get sme_id_curp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_countryid() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_id_geo_div() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_n_geo_divesp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "std_geo_div_bool_exp" }
    );
  },
  get std_geo_div_constraint() {
    return new EnumNode({ name: "std_geo_div_constraint" });
  },
  get std_geo_div_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get std_countryid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "std_geo_div_inc_input" }
    );
  },
  get std_geo_div_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get sme_id_curp() {
          return new InputNodeField(schema.String, true);
        },
        get std_countryid() {
          return new InputNodeField(schema.Int, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_geo_div() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_geo_divesp() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "std_geo_div_insert_input" }
    );
  },
  get std_geo_div_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sme_id_curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_countryid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_id_country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_geo_div() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_geo_divesp() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "std_geo_div_max_fields",
        extension: ((extensions as any) || {}).std_geo_div_max_fields
      }
    );
  },
  get std_geo_div_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sme_id_curp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_countryid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_id_country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_geo_div() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_geo_divesp() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "std_geo_div_min_fields",
        extension: ((extensions as any) || {}).std_geo_div_min_fields
      }
    );
  },
  get std_geo_div_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.std_geo_div, false),
            undefined,
            false
          );
        }
      },
      {
        name: "std_geo_div_mutation_response",
        extension: ((extensions as any) || {}).std_geo_div_mutation_response
      }
    );
  },
  get std_geo_div_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.std_geo_div_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.std_geo_div_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.std_geo_div_bool_exp, true);
        }
      },
      { name: "std_geo_div_on_conflict" }
    );
  },
  get std_geo_div_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sme_id_curp() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_countryid() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_geo_div() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_n_geo_divesp() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "std_geo_div_order_by" }
    );
  },
  get std_geo_div_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "std_geo_div_pk_columns_input" }
    );
  },
  get std_geo_div_select_column() {
    return new EnumNode({ name: "std_geo_div_select_column" });
  },
  get std_geo_div_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get sme_id_curp() {
          return new InputNodeField(schema.String, true);
        },
        get std_countryid() {
          return new InputNodeField(schema.Int, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_geo_div() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_geo_divesp() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "std_geo_div_set_input" }
    );
  },
  get std_geo_div_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_countryid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_div_stddev_fields",
        extension: ((extensions as any) || {}).std_geo_div_stddev_fields
      }
    );
  },
  get std_geo_div_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_countryid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_div_stddev_pop_fields",
        extension: ((extensions as any) || {}).std_geo_div_stddev_pop_fields
      }
    );
  },
  get std_geo_div_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_countryid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_div_stddev_samp_fields",
        extension: ((extensions as any) || {}).std_geo_div_stddev_samp_fields
      }
    );
  },
  get std_geo_div_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_countryid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "std_geo_div_sum_fields",
        extension: ((extensions as any) || {}).std_geo_div_sum_fields
      }
    );
  },
  get std_geo_div_update_column() {
    return new EnumNode({ name: "std_geo_div_update_column" });
  },
  get std_geo_div_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_countryid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_div_var_pop_fields",
        extension: ((extensions as any) || {}).std_geo_div_var_pop_fields
      }
    );
  },
  get std_geo_div_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_countryid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_div_var_samp_fields",
        extension: ((extensions as any) || {}).std_geo_div_var_samp_fields
      }
    );
  },
  get std_geo_div_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_countryid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_div_variance_fields",
        extension: ((extensions as any) || {}).std_geo_div_variance_fields
      }
    );
  },
  get std_geo_place() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get std_id_country() {
          return new FieldNode(schema.String, undefined, false);
        },
        get std_id_geo_div() {
          return new FieldNode(schema.String, undefined, false);
        },
        get std_id_geo_place() {
          return new FieldNode(schema.String, undefined, false);
        },
        get std_id_sub_geo_div() {
          return new FieldNode(schema.String, undefined, false);
        },
        get std_n_geo_placesp() {
          return new FieldNode(schema.String, undefined, false);
        },
        get std_sub_geo_divid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "std_geo_place",
        extension: ((extensions as any) || {}).std_geo_place
      }
    );
  },
  get std_geo_place_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.std_geo_place_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.std_geo_place, false),
            undefined,
            false
          );
        }
      },
      {
        name: "std_geo_place_aggregate",
        extension: ((extensions as any) || {}).std_geo_place_aggregate
      }
    );
  },
  get std_geo_place_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.std_geo_place_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_place_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.std_geo_place_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.std_geo_place_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.std_geo_place_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.std_geo_place_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.std_geo_place_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.std_geo_place_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.std_geo_place_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.std_geo_place_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.std_geo_place_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "std_geo_place_aggregate_fields",
        extension: ((extensions as any) || {}).std_geo_place_aggregate_fields
      }
    );
  },
  get std_geo_place_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_sub_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_place_avg_fields",
        extension: ((extensions as any) || {}).std_geo_place_avg_fields
      }
    );
  },
  get std_geo_place_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.std_geo_place_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.std_geo_place_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.std_geo_place_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_id_geo_div() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_id_geo_place() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_id_sub_geo_div() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_n_geo_placesp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_sub_geo_divid() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        }
      },
      { name: "std_geo_place_bool_exp" }
    );
  },
  get std_geo_place_constraint() {
    return new EnumNode({ name: "std_geo_place_constraint" });
  },
  get std_geo_place_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get std_sub_geo_divid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "std_geo_place_inc_input" }
    );
  },
  get std_geo_place_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_geo_div() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_geo_place() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_sub_geo_div() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_geo_placesp() {
          return new InputNodeField(schema.String, true);
        },
        get std_sub_geo_divid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "std_geo_place_insert_input" }
    );
  },
  get std_geo_place_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_id_country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_geo_div() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_geo_place() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_sub_geo_div() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_geo_placesp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_sub_geo_divid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "std_geo_place_max_fields",
        extension: ((extensions as any) || {}).std_geo_place_max_fields
      }
    );
  },
  get std_geo_place_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_id_country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_geo_div() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_geo_place() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_sub_geo_div() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_geo_placesp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_sub_geo_divid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "std_geo_place_min_fields",
        extension: ((extensions as any) || {}).std_geo_place_min_fields
      }
    );
  },
  get std_geo_place_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.std_geo_place, false),
            undefined,
            false
          );
        }
      },
      {
        name: "std_geo_place_mutation_response",
        extension: ((extensions as any) || {}).std_geo_place_mutation_response
      }
    );
  },
  get std_geo_place_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.std_geo_place_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.std_geo_place_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.std_geo_place_bool_exp, true);
        }
      },
      { name: "std_geo_place_on_conflict" }
    );
  },
  get std_geo_place_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_geo_div() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_geo_place() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_sub_geo_div() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_n_geo_placesp() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_sub_geo_divid() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "std_geo_place_order_by" }
    );
  },
  get std_geo_place_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "std_geo_place_pk_columns_input" }
    );
  },
  get std_geo_place_select_column() {
    return new EnumNode({ name: "std_geo_place_select_column" });
  },
  get std_geo_place_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_geo_div() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_geo_place() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_sub_geo_div() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_geo_placesp() {
          return new InputNodeField(schema.String, true);
        },
        get std_sub_geo_divid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "std_geo_place_set_input" }
    );
  },
  get std_geo_place_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_sub_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_place_stddev_fields",
        extension: ((extensions as any) || {}).std_geo_place_stddev_fields
      }
    );
  },
  get std_geo_place_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_sub_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_place_stddev_pop_fields",
        extension: ((extensions as any) || {}).std_geo_place_stddev_pop_fields
      }
    );
  },
  get std_geo_place_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_sub_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_place_stddev_samp_fields",
        extension: ((extensions as any) || {}).std_geo_place_stddev_samp_fields
      }
    );
  },
  get std_geo_place_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_sub_geo_divid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "std_geo_place_sum_fields",
        extension: ((extensions as any) || {}).std_geo_place_sum_fields
      }
    );
  },
  get std_geo_place_update_column() {
    return new EnumNode({ name: "std_geo_place_update_column" });
  },
  get std_geo_place_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_sub_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_place_var_pop_fields",
        extension: ((extensions as any) || {}).std_geo_place_var_pop_fields
      }
    );
  },
  get std_geo_place_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_sub_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_place_var_samp_fields",
        extension: ((extensions as any) || {}).std_geo_place_var_samp_fields
      }
    );
  },
  get std_geo_place_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_sub_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_geo_place_variance_fields",
        extension: ((extensions as any) || {}).std_geo_place_variance_fields
      }
    );
  },
  get std_lu_edu_diploma() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get std_id_diploma() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_diplomaesp() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "std_lu_edu_diploma",
        extension: ((extensions as any) || {}).std_lu_edu_diploma
      }
    );
  },
  get std_lu_edu_diploma_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.std_lu_edu_diploma_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.std_lu_edu_diploma, false),
            undefined,
            false
          );
        }
      },
      {
        name: "std_lu_edu_diploma_aggregate",
        extension: ((extensions as any) || {}).std_lu_edu_diploma_aggregate
      }
    );
  },
  get std_lu_edu_diploma_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.std_lu_edu_diploma_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_lu_edu_diploma_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.std_lu_edu_diploma_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.std_lu_edu_diploma_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.std_lu_edu_diploma_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.std_lu_edu_diploma_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.std_lu_edu_diploma_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.std_lu_edu_diploma_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.std_lu_edu_diploma_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.std_lu_edu_diploma_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.std_lu_edu_diploma_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "std_lu_edu_diploma_aggregate_fields",
        extension: ((extensions as any) || {})
          .std_lu_edu_diploma_aggregate_fields
      }
    );
  },
  get std_lu_edu_diploma_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_lu_edu_diploma_avg_fields",
        extension: ((extensions as any) || {}).std_lu_edu_diploma_avg_fields
      }
    );
  },
  get std_lu_edu_diploma_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.std_lu_edu_diploma_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.std_lu_edu_diploma_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.std_lu_edu_diploma_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get std_id_diploma() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_n_diplomaesp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "std_lu_edu_diploma_bool_exp" }
    );
  },
  get std_lu_edu_diploma_constraint() {
    return new EnumNode({ name: "std_lu_edu_diploma_constraint" });
  },
  get std_lu_edu_diploma_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "std_lu_edu_diploma_inc_input" }
    );
  },
  get std_lu_edu_diploma_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get std_id_diploma() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_diplomaesp() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "std_lu_edu_diploma_insert_input" }
    );
  },
  get std_lu_edu_diploma_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_id_diploma() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_diplomaesp() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "std_lu_edu_diploma_max_fields",
        extension: ((extensions as any) || {}).std_lu_edu_diploma_max_fields
      }
    );
  },
  get std_lu_edu_diploma_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_id_diploma() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_diplomaesp() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "std_lu_edu_diploma_min_fields",
        extension: ((extensions as any) || {}).std_lu_edu_diploma_min_fields
      }
    );
  },
  get std_lu_edu_diploma_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.std_lu_edu_diploma, false),
            undefined,
            false
          );
        }
      },
      {
        name: "std_lu_edu_diploma_mutation_response",
        extension: ((extensions as any) || {})
          .std_lu_edu_diploma_mutation_response
      }
    );
  },
  get std_lu_edu_diploma_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.std_lu_edu_diploma_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.std_lu_edu_diploma_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.std_lu_edu_diploma_bool_exp, true);
        }
      },
      { name: "std_lu_edu_diploma_on_conflict" }
    );
  },
  get std_lu_edu_diploma_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_diploma() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_n_diplomaesp() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "std_lu_edu_diploma_order_by" }
    );
  },
  get std_lu_edu_diploma_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "std_lu_edu_diploma_pk_columns_input" }
    );
  },
  get std_lu_edu_diploma_select_column() {
    return new EnumNode({ name: "std_lu_edu_diploma_select_column" });
  },
  get std_lu_edu_diploma_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get std_id_diploma() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_diplomaesp() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "std_lu_edu_diploma_set_input" }
    );
  },
  get std_lu_edu_diploma_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_lu_edu_diploma_stddev_fields",
        extension: ((extensions as any) || {}).std_lu_edu_diploma_stddev_fields
      }
    );
  },
  get std_lu_edu_diploma_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_lu_edu_diploma_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .std_lu_edu_diploma_stddev_pop_fields
      }
    );
  },
  get std_lu_edu_diploma_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_lu_edu_diploma_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .std_lu_edu_diploma_stddev_samp_fields
      }
    );
  },
  get std_lu_edu_diploma_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "std_lu_edu_diploma_sum_fields",
        extension: ((extensions as any) || {}).std_lu_edu_diploma_sum_fields
      }
    );
  },
  get std_lu_edu_diploma_update_column() {
    return new EnumNode({ name: "std_lu_edu_diploma_update_column" });
  },
  get std_lu_edu_diploma_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_lu_edu_diploma_var_pop_fields",
        extension: ((extensions as any) || {}).std_lu_edu_diploma_var_pop_fields
      }
    );
  },
  get std_lu_edu_diploma_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_lu_edu_diploma_var_samp_fields",
        extension: ((extensions as any) || {})
          .std_lu_edu_diploma_var_samp_fields
      }
    );
  },
  get std_lu_edu_diploma_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_lu_edu_diploma_variance_fields",
        extension: ((extensions as any) || {})
          .std_lu_edu_diploma_variance_fields
      }
    );
  },
  get std_sub_geo_div() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get std_geo_divid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_id_country() {
          return new FieldNode(schema.String, undefined, false);
        },
        get std_id_geo_div() {
          return new FieldNode(schema.String, undefined, false);
        },
        get std_id_sub_geo_div() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_sub_geo_esp() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "std_sub_geo_div",
        extension: ((extensions as any) || {}).std_sub_geo_div
      }
    );
  },
  get std_sub_geo_div_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.std_sub_geo_div_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.std_sub_geo_div, false),
            undefined,
            false
          );
        }
      },
      {
        name: "std_sub_geo_div_aggregate",
        extension: ((extensions as any) || {}).std_sub_geo_div_aggregate
      }
    );
  },
  get std_sub_geo_div_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.std_sub_geo_div_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_sub_geo_div_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.std_sub_geo_div_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.std_sub_geo_div_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.std_sub_geo_div_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.std_sub_geo_div_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.std_sub_geo_div_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.std_sub_geo_div_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.std_sub_geo_div_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.std_sub_geo_div_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.std_sub_geo_div_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "std_sub_geo_div_aggregate_fields",
        extension: ((extensions as any) || {}).std_sub_geo_div_aggregate_fields
      }
    );
  },
  get std_sub_geo_div_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_sub_geo_div_avg_fields",
        extension: ((extensions as any) || {}).std_sub_geo_div_avg_fields
      }
    );
  },
  get std_sub_geo_div_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.std_sub_geo_div_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.std_sub_geo_div_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.std_sub_geo_div_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get std_geo_divid() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_id_geo_div() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_id_sub_geo_div() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_n_sub_geo_esp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "std_sub_geo_div_bool_exp" }
    );
  },
  get std_sub_geo_div_constraint() {
    return new EnumNode({ name: "std_sub_geo_div_constraint" });
  },
  get std_sub_geo_div_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get std_geo_divid() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "std_sub_geo_div_inc_input" }
    );
  },
  get std_sub_geo_div_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get std_geo_divid() {
          return new InputNodeField(schema.Int, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_geo_div() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_sub_geo_div() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_sub_geo_esp() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "std_sub_geo_div_insert_input" }
    );
  },
  get std_sub_geo_div_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_geo_divid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_id_country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_geo_div() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_sub_geo_div() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_sub_geo_esp() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "std_sub_geo_div_max_fields",
        extension: ((extensions as any) || {}).std_sub_geo_div_max_fields
      }
    );
  },
  get std_sub_geo_div_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_geo_divid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_id_country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_geo_div() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_sub_geo_div() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_sub_geo_esp() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "std_sub_geo_div_min_fields",
        extension: ((extensions as any) || {}).std_sub_geo_div_min_fields
      }
    );
  },
  get std_sub_geo_div_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.std_sub_geo_div, false),
            undefined,
            false
          );
        }
      },
      {
        name: "std_sub_geo_div_mutation_response",
        extension: ((extensions as any) || {}).std_sub_geo_div_mutation_response
      }
    );
  },
  get std_sub_geo_div_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.std_sub_geo_div_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.std_sub_geo_div_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.std_sub_geo_div_bool_exp, true);
        }
      },
      { name: "std_sub_geo_div_on_conflict" }
    );
  },
  get std_sub_geo_div_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_geo_divid() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_geo_div() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_sub_geo_div() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_n_sub_geo_esp() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "std_sub_geo_div_order_by" }
    );
  },
  get std_sub_geo_div_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "std_sub_geo_div_pk_columns_input" }
    );
  },
  get std_sub_geo_div_select_column() {
    return new EnumNode({ name: "std_sub_geo_div_select_column" });
  },
  get std_sub_geo_div_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get std_geo_divid() {
          return new InputNodeField(schema.Int, true);
        },
        get std_id_country() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_geo_div() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_sub_geo_div() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_sub_geo_esp() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "std_sub_geo_div_set_input" }
    );
  },
  get std_sub_geo_div_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_sub_geo_div_stddev_fields",
        extension: ((extensions as any) || {}).std_sub_geo_div_stddev_fields
      }
    );
  },
  get std_sub_geo_div_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_sub_geo_div_stddev_pop_fields",
        extension: ((extensions as any) || {}).std_sub_geo_div_stddev_pop_fields
      }
    );
  },
  get std_sub_geo_div_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_sub_geo_div_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .std_sub_geo_div_stddev_samp_fields
      }
    );
  },
  get std_sub_geo_div_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get std_geo_divid() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "std_sub_geo_div_sum_fields",
        extension: ((extensions as any) || {}).std_sub_geo_div_sum_fields
      }
    );
  },
  get std_sub_geo_div_update_column() {
    return new EnumNode({ name: "std_sub_geo_div_update_column" });
  },
  get std_sub_geo_div_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_sub_geo_div_var_pop_fields",
        extension: ((extensions as any) || {}).std_sub_geo_div_var_pop_fields
      }
    );
  },
  get std_sub_geo_div_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_sub_geo_div_var_samp_fields",
        extension: ((extensions as any) || {}).std_sub_geo_div_var_samp_fields
      }
    );
  },
  get std_sub_geo_div_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get std_geo_divid() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_sub_geo_div_variance_fields",
        extension: ((extensions as any) || {}).std_sub_geo_div_variance_fields
      }
    );
  },
  get std_work_unit() {
    return new ObjectNode(
      {
        get cfp_ck_aplica_spc() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_transicion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_id_mot_baja() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_id_tp_ins() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_id_tp_organo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_principal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_tp_gab_apoy() {
          return new FieldNode(schema.String, undefined, true);
        },
        get dt_last_update() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id_approle() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_organization() {
          return new FieldNode(schema.String, undefined, false);
        },
        get id_secuser() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sco_is_root() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get sco_path_video() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sco_wu_icon() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_dt_end() {
          return new FieldNode(schema.date, undefined, true);
        },
        get std_dt_start() {
          return new FieldNode(schema.date, undefined, true);
        },
        get std_id_work_unit() {
          return new FieldNode(schema.String, undefined, false);
        },
        get std_id_wu_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitbra() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_uniteng() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitesp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitfra() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitgen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitger() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitita() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_objectives() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "std_work_unit",
        extension: ((extensions as any) || {}).std_work_unit
      }
    );
  },
  get std_work_unit_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.std_work_unit_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.std_work_unit, false),
            undefined,
            false
          );
        }
      },
      {
        name: "std_work_unit_aggregate",
        extension: ((extensions as any) || {}).std_work_unit_aggregate
      }
    );
  },
  get std_work_unit_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.std_work_unit_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_work_unit_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.std_work_unit_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.std_work_unit_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.std_work_unit_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.std_work_unit_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.std_work_unit_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.std_work_unit_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.std_work_unit_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.std_work_unit_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.std_work_unit_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "std_work_unit_aggregate_fields",
        extension: ((extensions as any) || {}).std_work_unit_aggregate_fields
      }
    );
  },
  get std_work_unit_avg_fields() {
    return new ObjectNode(
      {
        get sco_is_root() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_work_unit_avg_fields",
        extension: ((extensions as any) || {}).std_work_unit_avg_fields
      }
    );
  },
  get std_work_unit_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.std_work_unit_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.std_work_unit_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.std_work_unit_bool_exp, true),
            true
          );
        },
        get cfp_ck_aplica_spc() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cfp_transicion() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cme_id_mot_baja() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cme_id_tp_ins() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cme_id_tp_organo() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cme_principal() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cme_tp_gab_apoy() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get dt_last_update() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get id_approle() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id_organization() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id_secuser() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get sco_is_root() {
          return new InputNodeField(schema.numeric_comparison_exp, true);
        },
        get sco_path_video() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get sco_wu_icon() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_dt_end() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get std_dt_start() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get std_id_work_unit() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_id_wu_type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_n_work_unitbra() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_n_work_uniteng() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_n_work_unitesp() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_n_work_unitfra() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_n_work_unitgen() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_n_work_unitger() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_n_work_unitita() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get std_objectives() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "std_work_unit_bool_exp" }
    );
  },
  get std_work_unit_constraint() {
    return new EnumNode({ name: "std_work_unit_constraint" });
  },
  get std_work_unit_inc_input() {
    return new InputNode(
      {
        get sco_is_root() {
          return new InputNodeField(schema.numeric, true);
        }
      },
      { name: "std_work_unit_inc_input" }
    );
  },
  get std_work_unit_insert_input() {
    return new InputNode(
      {
        get cfp_ck_aplica_spc() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_transicion() {
          return new InputNodeField(schema.String, true);
        },
        get cme_id_mot_baja() {
          return new InputNodeField(schema.String, true);
        },
        get cme_id_tp_ins() {
          return new InputNodeField(schema.String, true);
        },
        get cme_id_tp_organo() {
          return new InputNodeField(schema.String, true);
        },
        get cme_principal() {
          return new InputNodeField(schema.String, true);
        },
        get cme_tp_gab_apoy() {
          return new InputNodeField(schema.String, true);
        },
        get dt_last_update() {
          return new InputNodeField(schema.date, true);
        },
        get id_approle() {
          return new InputNodeField(schema.String, true);
        },
        get id_organization() {
          return new InputNodeField(schema.String, true);
        },
        get id_secuser() {
          return new InputNodeField(schema.String, true);
        },
        get sco_is_root() {
          return new InputNodeField(schema.numeric, true);
        },
        get sco_path_video() {
          return new InputNodeField(schema.String, true);
        },
        get sco_wu_icon() {
          return new InputNodeField(schema.String, true);
        },
        get std_description() {
          return new InputNodeField(schema.String, true);
        },
        get std_dt_end() {
          return new InputNodeField(schema.date, true);
        },
        get std_dt_start() {
          return new InputNodeField(schema.date, true);
        },
        get std_id_work_unit() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_wu_type() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_unitbra() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_uniteng() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_unitesp() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_unitfra() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_unitgen() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_unitger() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_unitita() {
          return new InputNodeField(schema.String, true);
        },
        get std_objectives() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "std_work_unit_insert_input" }
    );
  },
  get std_work_unit_max_fields() {
    return new ObjectNode(
      {
        get cfp_ck_aplica_spc() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_transicion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_id_mot_baja() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_id_tp_ins() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_id_tp_organo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_principal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_tp_gab_apoy() {
          return new FieldNode(schema.String, undefined, true);
        },
        get dt_last_update() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id_approle() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_organization() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_secuser() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sco_is_root() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get sco_path_video() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sco_wu_icon() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_dt_end() {
          return new FieldNode(schema.date, undefined, true);
        },
        get std_dt_start() {
          return new FieldNode(schema.date, undefined, true);
        },
        get std_id_work_unit() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_wu_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitbra() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_uniteng() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitesp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitfra() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitgen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitger() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitita() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_objectives() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "std_work_unit_max_fields",
        extension: ((extensions as any) || {}).std_work_unit_max_fields
      }
    );
  },
  get std_work_unit_min_fields() {
    return new ObjectNode(
      {
        get cfp_ck_aplica_spc() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cfp_transicion() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_id_mot_baja() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_id_tp_ins() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_id_tp_organo() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_principal() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cme_tp_gab_apoy() {
          return new FieldNode(schema.String, undefined, true);
        },
        get dt_last_update() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id_approle() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_organization() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id_secuser() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sco_is_root() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get sco_path_video() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sco_wu_icon() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_dt_end() {
          return new FieldNode(schema.date, undefined, true);
        },
        get std_dt_start() {
          return new FieldNode(schema.date, undefined, true);
        },
        get std_id_work_unit() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_id_wu_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitbra() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_uniteng() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitesp() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitfra() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitgen() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitger() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_n_work_unitita() {
          return new FieldNode(schema.String, undefined, true);
        },
        get std_objectives() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "std_work_unit_min_fields",
        extension: ((extensions as any) || {}).std_work_unit_min_fields
      }
    );
  },
  get std_work_unit_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.std_work_unit, false),
            undefined,
            false
          );
        }
      },
      {
        name: "std_work_unit_mutation_response",
        extension: ((extensions as any) || {}).std_work_unit_mutation_response
      }
    );
  },
  get std_work_unit_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.std_work_unit_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.std_work_unit_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.std_work_unit_bool_exp, true);
        }
      },
      { name: "std_work_unit_on_conflict" }
    );
  },
  get std_work_unit_order_by() {
    return new InputNode(
      {
        get cfp_ck_aplica_spc() {
          return new InputNodeField(schema.order_by, true);
        },
        get cfp_transicion() {
          return new InputNodeField(schema.order_by, true);
        },
        get cme_id_mot_baja() {
          return new InputNodeField(schema.order_by, true);
        },
        get cme_id_tp_ins() {
          return new InputNodeField(schema.order_by, true);
        },
        get cme_id_tp_organo() {
          return new InputNodeField(schema.order_by, true);
        },
        get cme_principal() {
          return new InputNodeField(schema.order_by, true);
        },
        get cme_tp_gab_apoy() {
          return new InputNodeField(schema.order_by, true);
        },
        get dt_last_update() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_approle() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_organization() {
          return new InputNodeField(schema.order_by, true);
        },
        get id_secuser() {
          return new InputNodeField(schema.order_by, true);
        },
        get sco_is_root() {
          return new InputNodeField(schema.order_by, true);
        },
        get sco_path_video() {
          return new InputNodeField(schema.order_by, true);
        },
        get sco_wu_icon() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_description() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_dt_end() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_dt_start() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_work_unit() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_id_wu_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_n_work_unitbra() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_n_work_uniteng() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_n_work_unitesp() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_n_work_unitfra() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_n_work_unitgen() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_n_work_unitger() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_n_work_unitita() {
          return new InputNodeField(schema.order_by, true);
        },
        get std_objectives() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "std_work_unit_order_by" }
    );
  },
  get std_work_unit_pk_columns_input() {
    return new InputNode(
      {
        get id_organization() {
          return new InputNodeField(schema.String, false);
        },
        get std_id_work_unit() {
          return new InputNodeField(schema.String, false);
        }
      },
      { name: "std_work_unit_pk_columns_input" }
    );
  },
  get std_work_unit_select_column() {
    return new EnumNode({ name: "std_work_unit_select_column" });
  },
  get std_work_unit_set_input() {
    return new InputNode(
      {
        get cfp_ck_aplica_spc() {
          return new InputNodeField(schema.String, true);
        },
        get cfp_transicion() {
          return new InputNodeField(schema.String, true);
        },
        get cme_id_mot_baja() {
          return new InputNodeField(schema.String, true);
        },
        get cme_id_tp_ins() {
          return new InputNodeField(schema.String, true);
        },
        get cme_id_tp_organo() {
          return new InputNodeField(schema.String, true);
        },
        get cme_principal() {
          return new InputNodeField(schema.String, true);
        },
        get cme_tp_gab_apoy() {
          return new InputNodeField(schema.String, true);
        },
        get dt_last_update() {
          return new InputNodeField(schema.date, true);
        },
        get id_approle() {
          return new InputNodeField(schema.String, true);
        },
        get id_organization() {
          return new InputNodeField(schema.String, true);
        },
        get id_secuser() {
          return new InputNodeField(schema.String, true);
        },
        get sco_is_root() {
          return new InputNodeField(schema.numeric, true);
        },
        get sco_path_video() {
          return new InputNodeField(schema.String, true);
        },
        get sco_wu_icon() {
          return new InputNodeField(schema.String, true);
        },
        get std_description() {
          return new InputNodeField(schema.String, true);
        },
        get std_dt_end() {
          return new InputNodeField(schema.date, true);
        },
        get std_dt_start() {
          return new InputNodeField(schema.date, true);
        },
        get std_id_work_unit() {
          return new InputNodeField(schema.String, true);
        },
        get std_id_wu_type() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_unitbra() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_uniteng() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_unitesp() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_unitfra() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_unitgen() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_unitger() {
          return new InputNodeField(schema.String, true);
        },
        get std_n_work_unitita() {
          return new InputNodeField(schema.String, true);
        },
        get std_objectives() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "std_work_unit_set_input" }
    );
  },
  get std_work_unit_stddev_fields() {
    return new ObjectNode(
      {
        get sco_is_root() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_work_unit_stddev_fields",
        extension: ((extensions as any) || {}).std_work_unit_stddev_fields
      }
    );
  },
  get std_work_unit_stddev_pop_fields() {
    return new ObjectNode(
      {
        get sco_is_root() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_work_unit_stddev_pop_fields",
        extension: ((extensions as any) || {}).std_work_unit_stddev_pop_fields
      }
    );
  },
  get std_work_unit_stddev_samp_fields() {
    return new ObjectNode(
      {
        get sco_is_root() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_work_unit_stddev_samp_fields",
        extension: ((extensions as any) || {}).std_work_unit_stddev_samp_fields
      }
    );
  },
  get std_work_unit_sum_fields() {
    return new ObjectNode(
      {
        get sco_is_root() {
          return new FieldNode(schema.numeric, undefined, true);
        }
      },
      {
        name: "std_work_unit_sum_fields",
        extension: ((extensions as any) || {}).std_work_unit_sum_fields
      }
    );
  },
  get std_work_unit_update_column() {
    return new EnumNode({ name: "std_work_unit_update_column" });
  },
  get std_work_unit_var_pop_fields() {
    return new ObjectNode(
      {
        get sco_is_root() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_work_unit_var_pop_fields",
        extension: ((extensions as any) || {}).std_work_unit_var_pop_fields
      }
    );
  },
  get std_work_unit_var_samp_fields() {
    return new ObjectNode(
      {
        get sco_is_root() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_work_unit_var_samp_fields",
        extension: ((extensions as any) || {}).std_work_unit_var_samp_fields
      }
    );
  },
  get std_work_unit_variance_fields() {
    return new ObjectNode(
      {
        get sco_is_root() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "std_work_unit_variance_fields",
        extension: ((extensions as any) || {}).std_work_unit_variance_fields
      }
    );
  },
  get strapi_administrator() {
    return new ObjectNode(
      {
        get blocked() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get email() {
          return new FieldNode(schema.String, undefined, false);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get password() {
          return new FieldNode(schema.String, undefined, false);
        },
        get resetPasswordToken() {
          return new FieldNode(schema.String, undefined, true);
        },
        get username() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "strapi_administrator",
        extension: ((extensions as any) || {}).strapi_administrator
      }
    );
  },
  get strapi_administrator_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.strapi_administrator_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.strapi_administrator, false),
            undefined,
            false
          );
        }
      },
      {
        name: "strapi_administrator_aggregate",
        extension: ((extensions as any) || {}).strapi_administrator_aggregate
      }
    );
  },
  get strapi_administrator_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.strapi_administrator_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.strapi_administrator_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.strapi_administrator_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.strapi_administrator_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.strapi_administrator_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.strapi_administrator_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.strapi_administrator_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.strapi_administrator_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.strapi_administrator_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.strapi_administrator_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.strapi_administrator_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "strapi_administrator_aggregate_fields",
        extension: ((extensions as any) || {})
          .strapi_administrator_aggregate_fields
      }
    );
  },
  get strapi_administrator_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_administrator_avg_fields",
        extension: ((extensions as any) || {}).strapi_administrator_avg_fields
      }
    );
  },
  get strapi_administrator_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.strapi_administrator_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.strapi_administrator_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.strapi_administrator_bool_exp, true),
            true
          );
        },
        get blocked() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get email() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get password() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get resetPasswordToken() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get username() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "strapi_administrator_bool_exp" }
    );
  },
  get strapi_administrator_constraint() {
    return new EnumNode({ name: "strapi_administrator_constraint" });
  },
  get strapi_administrator_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "strapi_administrator_inc_input" }
    );
  },
  get strapi_administrator_insert_input() {
    return new InputNode(
      {
        get blocked() {
          return new InputNodeField(schema.Boolean, true);
        },
        get email() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get password() {
          return new InputNodeField(schema.String, true);
        },
        get resetPasswordToken() {
          return new InputNodeField(schema.String, true);
        },
        get username() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "strapi_administrator_insert_input" }
    );
  },
  get strapi_administrator_max_fields() {
    return new ObjectNode(
      {
        get email() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get password() {
          return new FieldNode(schema.String, undefined, true);
        },
        get resetPasswordToken() {
          return new FieldNode(schema.String, undefined, true);
        },
        get username() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "strapi_administrator_max_fields",
        extension: ((extensions as any) || {}).strapi_administrator_max_fields
      }
    );
  },
  get strapi_administrator_min_fields() {
    return new ObjectNode(
      {
        get email() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get password() {
          return new FieldNode(schema.String, undefined, true);
        },
        get resetPasswordToken() {
          return new FieldNode(schema.String, undefined, true);
        },
        get username() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "strapi_administrator_min_fields",
        extension: ((extensions as any) || {}).strapi_administrator_min_fields
      }
    );
  },
  get strapi_administrator_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.strapi_administrator, false),
            undefined,
            false
          );
        }
      },
      {
        name: "strapi_administrator_mutation_response",
        extension: ((extensions as any) || {})
          .strapi_administrator_mutation_response
      }
    );
  },
  get strapi_administrator_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.strapi_administrator_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.strapi_administrator_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.strapi_administrator_bool_exp, true);
        }
      },
      { name: "strapi_administrator_on_conflict" }
    );
  },
  get strapi_administrator_order_by() {
    return new InputNode(
      {
        get blocked() {
          return new InputNodeField(schema.order_by, true);
        },
        get email() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get password() {
          return new InputNodeField(schema.order_by, true);
        },
        get resetPasswordToken() {
          return new InputNodeField(schema.order_by, true);
        },
        get username() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "strapi_administrator_order_by" }
    );
  },
  get strapi_administrator_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "strapi_administrator_pk_columns_input" }
    );
  },
  get strapi_administrator_select_column() {
    return new EnumNode({ name: "strapi_administrator_select_column" });
  },
  get strapi_administrator_set_input() {
    return new InputNode(
      {
        get blocked() {
          return new InputNodeField(schema.Boolean, true);
        },
        get email() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get password() {
          return new InputNodeField(schema.String, true);
        },
        get resetPasswordToken() {
          return new InputNodeField(schema.String, true);
        },
        get username() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "strapi_administrator_set_input" }
    );
  },
  get strapi_administrator_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_administrator_stddev_fields",
        extension: ((extensions as any) || {})
          .strapi_administrator_stddev_fields
      }
    );
  },
  get strapi_administrator_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_administrator_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .strapi_administrator_stddev_pop_fields
      }
    );
  },
  get strapi_administrator_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_administrator_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .strapi_administrator_stddev_samp_fields
      }
    );
  },
  get strapi_administrator_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "strapi_administrator_sum_fields",
        extension: ((extensions as any) || {}).strapi_administrator_sum_fields
      }
    );
  },
  get strapi_administrator_update_column() {
    return new EnumNode({ name: "strapi_administrator_update_column" });
  },
  get strapi_administrator_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_administrator_var_pop_fields",
        extension: ((extensions as any) || {})
          .strapi_administrator_var_pop_fields
      }
    );
  },
  get strapi_administrator_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_administrator_var_samp_fields",
        extension: ((extensions as any) || {})
          .strapi_administrator_var_samp_fields
      }
    );
  },
  get strapi_administrator_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_administrator_variance_fields",
        extension: ((extensions as any) || {})
          .strapi_administrator_variance_fields
      }
    );
  },
  get strapi_webhooks() {
    return new ObjectNode(
      {
        get enabled() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get events() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              }
            }),
            true
          );
        },
        get headers() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              }
            }),
            true
          );
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "strapi_webhooks",
        extension: ((extensions as any) || {}).strapi_webhooks
      }
    );
  },
  get strapi_webhooks_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.strapi_webhooks_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.strapi_webhooks, false),
            undefined,
            false
          );
        }
      },
      {
        name: "strapi_webhooks_aggregate",
        extension: ((extensions as any) || {}).strapi_webhooks_aggregate
      }
    );
  },
  get strapi_webhooks_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.strapi_webhooks_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_webhooks_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.strapi_webhooks_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.strapi_webhooks_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.strapi_webhooks_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.strapi_webhooks_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.strapi_webhooks_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.strapi_webhooks_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.strapi_webhooks_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.strapi_webhooks_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.strapi_webhooks_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "strapi_webhooks_aggregate_fields",
        extension: ((extensions as any) || {}).strapi_webhooks_aggregate_fields
      }
    );
  },
  get strapi_webhooks_append_input() {
    return new InputNode(
      {
        get events() {
          return new InputNodeField(schema.jsonb, true);
        },
        get headers() {
          return new InputNodeField(schema.jsonb, true);
        }
      },
      { name: "strapi_webhooks_append_input" }
    );
  },
  get strapi_webhooks_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_webhooks_avg_fields",
        extension: ((extensions as any) || {}).strapi_webhooks_avg_fields
      }
    );
  },
  get strapi_webhooks_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.strapi_webhooks_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.strapi_webhooks_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.strapi_webhooks_bool_exp, true),
            true
          );
        },
        get enabled() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get events() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get headers() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "strapi_webhooks_bool_exp" }
    );
  },
  get strapi_webhooks_constraint() {
    return new EnumNode({ name: "strapi_webhooks_constraint" });
  },
  get strapi_webhooks_delete_at_path_input() {
    return new InputNode(
      {
        get events() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
        get headers() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        }
      },
      { name: "strapi_webhooks_delete_at_path_input" }
    );
  },
  get strapi_webhooks_delete_elem_input() {
    return new InputNode(
      {
        get events() {
          return new InputNodeField(schema.Int, true);
        },
        get headers() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "strapi_webhooks_delete_elem_input" }
    );
  },
  get strapi_webhooks_delete_key_input() {
    return new InputNode(
      {
        get events() {
          return new InputNodeField(schema.String, true);
        },
        get headers() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "strapi_webhooks_delete_key_input" }
    );
  },
  get strapi_webhooks_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "strapi_webhooks_inc_input" }
    );
  },
  get strapi_webhooks_insert_input() {
    return new InputNode(
      {
        get enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get events() {
          return new InputNodeField(schema.jsonb, true);
        },
        get headers() {
          return new InputNodeField(schema.jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "strapi_webhooks_insert_input" }
    );
  },
  get strapi_webhooks_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "strapi_webhooks_max_fields",
        extension: ((extensions as any) || {}).strapi_webhooks_max_fields
      }
    );
  },
  get strapi_webhooks_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "strapi_webhooks_min_fields",
        extension: ((extensions as any) || {}).strapi_webhooks_min_fields
      }
    );
  },
  get strapi_webhooks_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.strapi_webhooks, false),
            undefined,
            false
          );
        }
      },
      {
        name: "strapi_webhooks_mutation_response",
        extension: ((extensions as any) || {}).strapi_webhooks_mutation_response
      }
    );
  },
  get strapi_webhooks_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.strapi_webhooks_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.strapi_webhooks_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.strapi_webhooks_bool_exp, true);
        }
      },
      { name: "strapi_webhooks_on_conflict" }
    );
  },
  get strapi_webhooks_order_by() {
    return new InputNode(
      {
        get enabled() {
          return new InputNodeField(schema.order_by, true);
        },
        get events() {
          return new InputNodeField(schema.order_by, true);
        },
        get headers() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "strapi_webhooks_order_by" }
    );
  },
  get strapi_webhooks_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "strapi_webhooks_pk_columns_input" }
    );
  },
  get strapi_webhooks_prepend_input() {
    return new InputNode(
      {
        get events() {
          return new InputNodeField(schema.jsonb, true);
        },
        get headers() {
          return new InputNodeField(schema.jsonb, true);
        }
      },
      { name: "strapi_webhooks_prepend_input" }
    );
  },
  get strapi_webhooks_select_column() {
    return new EnumNode({ name: "strapi_webhooks_select_column" });
  },
  get strapi_webhooks_set_input() {
    return new InputNode(
      {
        get enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get events() {
          return new InputNodeField(schema.jsonb, true);
        },
        get headers() {
          return new InputNodeField(schema.jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "strapi_webhooks_set_input" }
    );
  },
  get strapi_webhooks_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_webhooks_stddev_fields",
        extension: ((extensions as any) || {}).strapi_webhooks_stddev_fields
      }
    );
  },
  get strapi_webhooks_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_webhooks_stddev_pop_fields",
        extension: ((extensions as any) || {}).strapi_webhooks_stddev_pop_fields
      }
    );
  },
  get strapi_webhooks_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_webhooks_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .strapi_webhooks_stddev_samp_fields
      }
    );
  },
  get strapi_webhooks_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "strapi_webhooks_sum_fields",
        extension: ((extensions as any) || {}).strapi_webhooks_sum_fields
      }
    );
  },
  get strapi_webhooks_update_column() {
    return new EnumNode({ name: "strapi_webhooks_update_column" });
  },
  get strapi_webhooks_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_webhooks_var_pop_fields",
        extension: ((extensions as any) || {}).strapi_webhooks_var_pop_fields
      }
    );
  },
  get strapi_webhooks_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_webhooks_var_samp_fields",
        extension: ((extensions as any) || {}).strapi_webhooks_var_samp_fields
      }
    );
  },
  get strapi_webhooks_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "strapi_webhooks_variance_fields",
        extension: ((extensions as any) || {}).strapi_webhooks_variance_fields
      }
    );
  },
  get subscription_root() {
    return new ObjectNode(
      {
        get PARTICIPANTES() {
          return new FieldNode(
            new ArrayNode(schema.PARTICIPANTES, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.PARTICIPANTES_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.PARTICIPANTES_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.PARTICIPANTES_bool_exp, true);
              }
            }),
            false
          );
        },
        get PARTICIPANTES_aggregate() {
          return new FieldNode(
            schema.PARTICIPANTES_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.PARTICIPANTES_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.PARTICIPANTES_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.PARTICIPANTES_bool_exp, true);
              }
            }),
            false
          );
        },
        get PARTICIPANTES_by_pk() {
          return new FieldNode(
            schema.PARTICIPANTES,
            new Arguments(
              {
                get ID() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get areaGeneralEstudios() {
          return new FieldNode(
            new ArrayNode(schema.areaGeneralEstudios, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralEstudios_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralEstudios_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.areaGeneralEstudios_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get areaGeneralEstudios_aggregate() {
          return new FieldNode(
            schema.areaGeneralEstudios_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralEstudios_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralEstudios_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.areaGeneralEstudios_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get areaGeneralEstudios_by_pk() {
          return new FieldNode(
            schema.areaGeneralEstudios,
            new Arguments(
              {
                get idAreaGeneralEstudios() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get areaGeneralExperiencia() {
          return new FieldNode(
            new ArrayNode(schema.areaGeneralExperiencia, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.areaGeneralExperiencia_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralExperiencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.areaGeneralExperiencia_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get areaGeneralExperiencia_aggregate() {
          return new FieldNode(
            schema.areaGeneralExperiencia_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.areaGeneralExperiencia_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.areaGeneralExperiencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.areaGeneralExperiencia_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get areaGeneralExperiencia_by_pk() {
          return new FieldNode(
            schema.areaGeneralExperiencia,
            new Arguments(
              {
                get idAreaGeneralExperiencia() {
                  return new ArgumentsField(schema.String, false);
                },
                get idGrupoExperiencia() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get calificaciones() {
          return new FieldNode(
            new ArrayNode(schema.calificaciones, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.calificaciones_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.calificaciones_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.calificaciones_bool_exp, true);
              }
            }),
            false
          );
        },
        get calificaciones_aggregate() {
          return new FieldNode(
            schema.calificaciones_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.calificaciones_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.calificaciones_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.calificaciones_bool_exp, true);
              }
            }),
            false
          );
        },
        get calificaciones_by_pk() {
          return new FieldNode(
            schema.calificaciones,
            new Arguments(
              {
                get uid() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get carreraGenerica() {
          return new FieldNode(
            new ArrayNode(schema.carreraGenerica, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.carreraGenerica_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get carreraGenerica_aggregate() {
          return new FieldNode(
            schema.carreraGenerica_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.carreraGenerica_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.carreraGenerica_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get carreraGenerica_by_pk() {
          return new FieldNode(
            schema.carreraGenerica,
            new Arguments(
              {
                get idAreaGeneralEstudios() {
                  return new ArgumentsField(schema.String, false);
                },
                get idCarreraGenerica() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get catalogo_idiomas() {
          return new FieldNode(
            new ArrayNode(schema.catalogo_idiomas, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.catalogo_idiomas_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.catalogo_idiomas_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.catalogo_idiomas_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get catalogo_idiomas_aggregate() {
          return new FieldNode(
            schema.catalogo_idiomas_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.catalogo_idiomas_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.catalogo_idiomas_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.catalogo_idiomas_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get catalogo_idiomas_by_pk() {
          return new FieldNode(
            schema.catalogo_idiomas,
            new Arguments(
              {
                get id_idioma() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get cliks() {
          return new FieldNode(
            new ArrayNode(schema.cliks, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.cliks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.cliks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.cliks_bool_exp, true);
              }
            }),
            false
          );
        },
        get cliks_aggregate() {
          return new FieldNode(
            schema.cliks_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.cliks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.cliks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.cliks_bool_exp, true);
              }
            }),
            false
          );
        },
        get cliks_by_pk() {
          return new FieldNode(
            schema.cliks,
            new Arguments(
              {
                get id_clik() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get convocatoriagenero() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriagenero, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriagenero_aggregate() {
          return new FieldNode(
            schema.convocatoriagenero_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriagenero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriagenero_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriagenero_by_pk() {
          return new FieldNode(
            schema.convocatoriagenero,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get convocatoriageneronospc() {
          return new FieldNode(
            new ArrayNode(schema.convocatoriageneronospc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospc_aggregate() {
          return new FieldNode(
            schema.convocatoriageneronospc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.convocatoriageneronospc_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.convocatoriageneronospc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.convocatoriageneronospc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get convocatoriageneronospc_by_pk() {
          return new FieldNode(
            schema.convocatoriageneronospc,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get core_store() {
          return new FieldNode(
            new ArrayNode(schema.core_store, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.core_store_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.core_store_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.core_store_bool_exp, true);
              }
            }),
            false
          );
        },
        get core_store_aggregate() {
          return new FieldNode(
            schema.core_store_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.core_store_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.core_store_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.core_store_bool_exp, true);
              }
            }),
            false
          );
        },
        get core_store_by_pk() {
          return new FieldNode(
            schema.core_store,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get curriculum() {
          return new FieldNode(
            new ArrayNode(schema.curriculum, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.curriculum_bool_exp, true);
              }
            }),
            false
          );
        },
        get curriculum_aggregate() {
          return new FieldNode(
            schema.curriculum_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.curriculum_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.curriculum_bool_exp, true);
              }
            }),
            false
          );
        },
        get curriculum_by_pk() {
          return new FieldNode(
            schema.curriculum,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get curso() {
          return new FieldNode(
            new ArrayNode(schema.curso, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.curso_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.curso_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.curso_bool_exp, true);
              }
            }),
            false
          );
        },
        get curso_aggregate() {
          return new FieldNode(
            schema.curso_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.curso_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.curso_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.curso_bool_exp, true);
              }
            }),
            false
          );
        },
        get curso_by_pk() {
          return new FieldNode(
            schema.curso,
            new Arguments(
              {
                get uid() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get dependencia() {
          return new FieldNode(
            new ArrayNode(schema.dependencia, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencia_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.dependencia_bool_exp, true);
              }
            }),
            false
          );
        },
        get dependencia_aggregate() {
          return new FieldNode(
            schema.dependencia_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencia_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.dependencia_bool_exp, true);
              }
            }),
            false
          );
        },
        get dependencia_by_pk() {
          return new FieldNode(
            schema.dependencia,
            new Arguments(
              {
                get idDependencia() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get dependencias() {
          return new FieldNode(
            new ArrayNode(schema.dependencias, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencias_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencias_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.dependencias_bool_exp, true);
              }
            }),
            false
          );
        },
        get dependencias_aggregate() {
          return new FieldNode(
            schema.dependencias_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencias_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.dependencias_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.dependencias_bool_exp, true);
              }
            }),
            false
          );
        },
        get dependencias_by_pk() {
          return new FieldNode(
            schema.dependencias,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get encuesta() {
          return new FieldNode(
            new ArrayNode(schema.encuesta, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.encuesta_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.encuesta_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.encuesta_bool_exp, true);
              }
            }),
            false
          );
        },
        get encuesta_aggregate() {
          return new FieldNode(
            schema.encuesta_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.encuesta_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.encuesta_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.encuesta_bool_exp, true);
              }
            }),
            false
          );
        },
        get encuesta_by_pk() {
          return new FieldNode(
            schema.encuesta,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get entidadFederativa() {
          return new FieldNode(
            new ArrayNode(schema.entidadFederativa, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.entidadFederativa_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get entidadFederativa_aggregate() {
          return new FieldNode(
            schema.entidadFederativa_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.entidadFederativa_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.entidadFederativa_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get entidadFederativa_by_pk() {
          return new FieldNode(
            schema.entidadFederativa,
            new Arguments(
              {
                get idEntidadFederativa() {
                  return new ArgumentsField(schema.String, false);
                },
                get idPais() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get estadopuesto() {
          return new FieldNode(
            new ArrayNode(schema.estadopuesto, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.estadopuesto_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.estadopuesto_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.estadopuesto_bool_exp, true);
              }
            }),
            false
          );
        },
        get estadopuesto_aggregate() {
          return new FieldNode(
            schema.estadopuesto_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.estadopuesto_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.estadopuesto_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.estadopuesto_bool_exp, true);
              }
            }),
            false
          );
        },
        get estadopuesto_by_pk() {
          return new FieldNode(
            schema.estadopuesto,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get grupoExperiencia() {
          return new FieldNode(
            new ArrayNode(schema.grupoExperiencia, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.grupoExperiencia_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.grupoExperiencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.grupoExperiencia_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get grupoExperiencia_aggregate() {
          return new FieldNode(
            schema.grupoExperiencia_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.grupoExperiencia_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.grupoExperiencia_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.grupoExperiencia_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get grupoExperiencia_by_pk() {
          return new FieldNode(
            schema.grupoExperiencia,
            new Arguments(
              {
                get idGrupoExperiencia() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_client() {
          return new FieldNode(
            new ArrayNode(schema.hydra_client, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.hydra_client_bool_exp, true);
              }
            }),
            false
          );
        },
        get hydra_client_aggregate() {
          return new FieldNode(
            schema.hydra_client_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.hydra_client_bool_exp, true);
              }
            }),
            false
          );
        },
        get hydra_client_by_pk() {
          return new FieldNode(
            schema.hydra_client,
            new Arguments(
              {
                get pk() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_client_migration() {
          return new FieldNode(
            new ArrayNode(schema.hydra_client_migration, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_client_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_client_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_client_migration_aggregate() {
          return new FieldNode(
            schema.hydra_client_migration_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_client_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_client_migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_client_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_client_migration_by_pk() {
          return new FieldNode(
            schema.hydra_client_migration,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_jwk() {
          return new FieldNode(
            new ArrayNode(schema.hydra_jwk, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.hydra_jwk_bool_exp, true);
              }
            }),
            false
          );
        },
        get hydra_jwk_aggregate() {
          return new FieldNode(
            schema.hydra_jwk_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.hydra_jwk_bool_exp, true);
              }
            }),
            false
          );
        },
        get hydra_jwk_by_pk() {
          return new FieldNode(
            schema.hydra_jwk,
            new Arguments(
              {
                get pk() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_jwk_migration() {
          return new FieldNode(
            new ArrayNode(schema.hydra_jwk_migration, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_migration_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_jwk_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_jwk_migration_aggregate() {
          return new FieldNode(
            schema.hydra_jwk_migration_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_migration_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_jwk_migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_jwk_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_jwk_migration_by_pk() {
          return new FieldNode(
            schema.hydra_jwk_migration,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_access() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_access, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_access_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_access_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_access_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_access_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_access_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_access,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_authentication_consent_migration() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_authentication_consent_migration,
              false
            ),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_consent_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_consent_migration_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_consent_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_consent_migration_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_consent_migration_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_consent_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_consent_migration_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_consent_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_consent_migration_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_consent_migration,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_authentication_request() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_authentication_request, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_request_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_request_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_authentication_request_handled() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_authentication_request_handled,
              false
            ),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_request_handled_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_request_handled_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_request_handled_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_request_handled_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_request_handled,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_authentication_session() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_authentication_session, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_session_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_session_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_session_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_session_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_session_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_authentication_session_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_authentication_session_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_authentication_session_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_authentication_session,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_code() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_code, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_code_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_code_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_code_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_code_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_code_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_code,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_consent_request() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_consent_request, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_request_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_request_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_consent_request_handled() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_consent_request_handled, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_request_handled_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_consent_request_handled_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_consent_request_handled_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_consent_request_handled_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_consent_request_handled,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_logout_request() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_logout_request, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_logout_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_logout_request_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_logout_request_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_logout_request_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_logout_request_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_logout_request,
            new Arguments(
              {
                get challenge() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_migration() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_migration, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_migration_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_migration_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_migration_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_migration_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_migration_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_migration,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_obfuscated_authentication_session() {
          return new FieldNode(
            new ArrayNode(
              schema.hydra_oauth2_obfuscated_authentication_session,
              false
            ),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_obfuscated_authentication_session_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_obfuscated_authentication_session_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_obfuscated_authentication_session_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_obfuscated_authentication_session_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_obfuscated_authentication_session_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_obfuscated_authentication_session,
            new Arguments(
              {
                get client_id() {
                  return new ArgumentsField(schema.String, false);
                },
                get subject() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_oidc() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_oidc, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_oidc_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_oidc_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_oidc_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_oidc_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_oidc_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_oidc,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_pkce() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_pkce, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_pkce_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_pkce_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_pkce_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_pkce_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_pkce_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_pkce,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get hydra_oauth2_refresh() {
          return new FieldNode(
            new ArrayNode(schema.hydra_oauth2_refresh, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_refresh_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_refresh_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_refresh_aggregate() {
          return new FieldNode(
            schema.hydra_oauth2_refresh_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.hydra_oauth2_refresh_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.hydra_oauth2_refresh_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.hydra_oauth2_refresh_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get hydra_oauth2_refresh_by_pk() {
          return new FieldNode(
            schema.hydra_oauth2_refresh,
            new Arguments(
              {
                get signature() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get keycloak_realm_smtp_config() {
          return new FieldNode(
            new ArrayNode(schema.keycloak_realm_smtp_config, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_realm_smtp_config_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_realm_smtp_config_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.keycloak_realm_smtp_config_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get keycloak_realm_smtp_config_aggregate() {
          return new FieldNode(
            schema.keycloak_realm_smtp_config_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_realm_smtp_config_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_realm_smtp_config_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.keycloak_realm_smtp_config_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get keycloak_realm_smtp_config_by_pk() {
          return new FieldNode(
            schema.keycloak_realm_smtp_config,
            new Arguments(
              {
                get name() {
                  return new ArgumentsField(schema.String, false);
                },
                get realm_id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get keycloak_user_role_mapping() {
          return new FieldNode(
            new ArrayNode(schema.keycloak_user_role_mapping, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_user_role_mapping_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_user_role_mapping_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.keycloak_user_role_mapping_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get keycloak_user_role_mapping_aggregate() {
          return new FieldNode(
            schema.keycloak_user_role_mapping_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_user_role_mapping_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.keycloak_user_role_mapping_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.keycloak_user_role_mapping_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get keycloak_user_role_mapping_by_pk() {
          return new FieldNode(
            schema.keycloak_user_role_mapping,
            new Arguments(
              {
                get role_id() {
                  return new ArgumentsField(schema.String, false);
                },
                get user_id() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get m4cfp_area_general() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_area_general, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_general_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_general_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_area_general_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_area_general_aggregate() {
          return new FieldNode(
            schema.m4cfp_area_general_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_general_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_general_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_area_general_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_area_general_by_pk() {
          return new FieldNode(
            schema.m4cfp_area_general,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get m4cfp_area_gral_ex() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_area_gral_ex, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_gral_ex_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_gral_ex_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_area_gral_ex_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_area_gral_ex_aggregate() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_gral_ex_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_area_gral_ex_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_area_gral_ex_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_area_gral_ex_by_pk() {
          return new FieldNode(
            schema.m4cfp_area_gral_ex,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get m4cfp_carreras_ge() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_carreras_ge, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_carreras_ge_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_carreras_ge_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_carreras_ge_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_carreras_ge_aggregate() {
          return new FieldNode(
            schema.m4cfp_carreras_ge_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_carreras_ge_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_carreras_ge_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_carreras_ge_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_carreras_ge_by_pk() {
          return new FieldNode(
            schema.m4cfp_carreras_ge,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get m4cfp_gpo_experien() {
          return new FieldNode(
            new ArrayNode(schema.m4cfp_gpo_experien, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_gpo_experien_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_gpo_experien_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_gpo_experien_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_gpo_experien_aggregate() {
          return new FieldNode(
            schema.m4cfp_gpo_experien_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_gpo_experien_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4cfp_gpo_experien_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4cfp_gpo_experien_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4cfp_gpo_experien_by_pk() {
          return new FieldNode(
            schema.m4cfp_gpo_experien,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get m4rch_organization2() {
          return new FieldNode(
            new ArrayNode(schema.m4rch_organization2, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4rch_organization2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4rch_organization2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4rch_organization2_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4rch_organization2_aggregate() {
          return new FieldNode(
            schema.m4rch_organization2_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4rch_organization2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.m4rch_organization2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.m4rch_organization2_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get m4rch_organization2_by_pk() {
          return new FieldNode(
            schema.m4rch_organization2,
            new Arguments(
              {
                get id_organization() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get menu() {
          return new FieldNode(
            new ArrayNode(schema.menu, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.menu_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.menu_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.menu_bool_exp, true);
              }
            }),
            false
          );
        },
        get menu_aggregate() {
          return new FieldNode(
            schema.menu_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.menu_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.menu_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.menu_bool_exp, true);
              }
            }),
            false
          );
        },
        get menu_by_pk() {
          return new FieldNode(
            schema.menu,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_person() {
          return new FieldNode(
            new ArrayNode(schema.mind_person, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_person_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_person_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.mind_person_bool_exp, true);
              }
            }),
            false
          );
        },
        get mind_person_aggregate() {
          return new FieldNode(
            schema.mind_person_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_person_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_person_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.mind_person_bool_exp, true);
              }
            }),
            false
          );
        },
        get mind_person_by_pk() {
          return new FieldNode(
            schema.mind_person,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_grupo_trabajo() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_grupo_trabajo, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_grupo_trabajo_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_grupo_trabajo_aggregate() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_grupo_trabajo_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_grupo_trabajo_by_pk() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_grupo_trabajo_usuario() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_grupo_trabajo_usuario, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_grupo_trabajo_usuario_aggregate() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_grupo_trabajo_usuario_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_grupo_trabajo_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_grupo_trabajo_usuario_by_pk() {
          return new FieldNode(
            schema.mind_rh_grupo_trabajo_usuario,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_igr() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_igr, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_igr_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_igr_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.mind_rh_igr_bool_exp, true);
              }
            }),
            false
          );
        },
        get mind_rh_igr_aggregate() {
          return new FieldNode(
            schema.mind_rh_igr_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_igr_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_igr_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.mind_rh_igr_bool_exp, true);
              }
            }),
            false
          );
        },
        get mind_rh_igr_by_pk() {
          return new FieldNode(
            schema.mind_rh_igr,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.smallint, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_meta_individual() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_meta_individual, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_individual_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_meta_individual_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_meta_individual_aggregate() {
          return new FieldNode(
            schema.mind_rh_meta_individual_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_individual_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_meta_individual_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_individual_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_meta_individual_by_pk() {
          return new FieldNode(
            schema.mind_rh_meta_individual,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_meta_institucional() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_meta_institucional, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_meta_institucional_aggregate() {
          return new FieldNode(
            schema.mind_rh_meta_institucional_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_meta_institucional_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_meta_institucional_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_meta_institucional_by_pk() {
          return new FieldNode(
            schema.mind_rh_meta_institucional,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_pnd() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_pnd, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_pnd_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_pnd_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.mind_rh_pnd_bool_exp, true);
              }
            }),
            false
          );
        },
        get mind_rh_pnd_aggregate() {
          return new FieldNode(
            schema.mind_rh_pnd_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_pnd_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_pnd_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.mind_rh_pnd_bool_exp, true);
              }
            }),
            false
          );
        },
        get mind_rh_pnd_by_pk() {
          return new FieldNode(
            schema.mind_rh_pnd,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.smallint, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_tipo_meta() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_tipo_meta, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_tipo_meta_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_tipo_meta_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_tipo_meta_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_tipo_meta_aggregate() {
          return new FieldNode(
            schema.mind_rh_tipo_meta_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_tipo_meta_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_tipo_meta_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_tipo_meta_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_tipo_meta_by_pk() {
          return new FieldNode(
            schema.mind_rh_tipo_meta,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.smallint, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_unidad_medida() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_unidad_medida, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_unidad_medida_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_unidad_medida_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_unidad_medida_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_unidad_medida_aggregate() {
          return new FieldNode(
            schema.mind_rh_unidad_medida_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.mind_rh_unidad_medida_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_unidad_medida_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_unidad_medida_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_unidad_medida_by_pk() {
          return new FieldNode(
            schema.mind_rh_unidad_medida,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.smallint, false);
                }
              },
              true
            ),
            true
          );
        },
        get mind_rh_usuario() {
          return new FieldNode(
            new ArrayNode(schema.mind_rh_usuario, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_usuario_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_usuario_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_usuario_aggregate() {
          return new FieldNode(
            schema.mind_rh_usuario_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_usuario_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.mind_rh_usuario_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.mind_rh_usuario_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get mind_rh_usuario_by_pk() {
          return new FieldNode(
            schema.mind_rh_usuario,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get nivelEscolaridad() {
          return new FieldNode(
            new ArrayNode(schema.nivelEscolaridad, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelEscolaridad_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelEscolaridad_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.nivelEscolaridad_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get nivelEscolaridad_aggregate() {
          return new FieldNode(
            schema.nivelEscolaridad_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelEscolaridad_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelEscolaridad_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.nivelEscolaridad_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get nivelEscolaridad_by_pk() {
          return new FieldNode(
            schema.nivelEscolaridad,
            new Arguments(
              {
                get idNivelEscolaridad() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get nivelPuesto() {
          return new FieldNode(
            new ArrayNode(schema.nivelPuesto, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelPuesto_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelPuesto_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.nivelPuesto_bool_exp, true);
              }
            }),
            false
          );
        },
        get nivelPuesto_aggregate() {
          return new FieldNode(
            schema.nivelPuesto_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelPuesto_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.nivelPuesto_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.nivelPuesto_bool_exp, true);
              }
            }),
            false
          );
        },
        get nivelPuesto_by_pk() {
          return new FieldNode(
            schema.nivelPuesto,
            new Arguments(
              {
                get idNivelPuesto() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get pais() {
          return new FieldNode(
            new ArrayNode(schema.pais, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.pais_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.pais_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.pais_bool_exp, true);
              }
            }),
            false
          );
        },
        get pais_aggregate() {
          return new FieldNode(
            schema.pais_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.pais_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.pais_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.pais_bool_exp, true);
              }
            }),
            false
          );
        },
        get pais_by_pk() {
          return new FieldNode(
            schema.pais,
            new Arguments(
              {
                get idPais() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get perfil() {
          return new FieldNode(
            new ArrayNode(schema.perfil, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.perfil_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.perfil_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.perfil_bool_exp, true);
              }
            }),
            false
          );
        },
        get perfil_aggregate() {
          return new FieldNode(
            schema.perfil_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.perfil_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.perfil_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.perfil_bool_exp, true);
              }
            }),
            false
          );
        },
        get perfil_by_pk() {
          return new FieldNode(
            schema.perfil,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
                get id_trabajaen() {
                  return new ArgumentsField(schema.String, false);
                },
                get user() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get puesto_generos() {
          return new FieldNode(
            new ArrayNode(schema.puesto_generos, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.puesto_generos_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.puesto_generos_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.puesto_generos_bool_exp, true);
              }
            }),
            false
          );
        },
        get puesto_generos_aggregate() {
          return new FieldNode(
            schema.puesto_generos_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.puesto_generos_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.puesto_generos_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.puesto_generos_bool_exp, true);
              }
            }),
            false
          );
        },
        get puesto_generos_by_pk() {
          return new FieldNode(
            schema.puesto_generos,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get puestos_genero() {
          return new FieldNode(
            new ArrayNode(schema.puestos_genero, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_genero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_genero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.puestos_genero_bool_exp, true);
              }
            }),
            false
          );
        },
        get puestos_genero_aggregate() {
          return new FieldNode(
            schema.puestos_genero_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_genero_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_genero_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.puestos_genero_bool_exp, true);
              }
            }),
            false
          );
        },
        get puestos_generos() {
          return new FieldNode(
            new ArrayNode(schema.puestos_generos, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_generos_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_generos_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.puestos_generos_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get puestos_generos_aggregate() {
          return new FieldNode(
            schema.puestos_generos_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_generos_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.puestos_generos_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.puestos_generos_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get puestos_generos_by_pk() {
          return new FieldNode(
            schema.puestos_generos,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get sfp_reactivos_queretaro() {
          return new FieldNode(
            new ArrayNode(schema.sfp_reactivos_queretaro, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.sfp_reactivos_queretaro_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.sfp_reactivos_queretaro_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.sfp_reactivos_queretaro_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get sfp_reactivos_queretaro_aggregate() {
          return new FieldNode(
            schema.sfp_reactivos_queretaro_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.sfp_reactivos_queretaro_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.sfp_reactivos_queretaro_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.sfp_reactivos_queretaro_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get situacionpuestocat() {
          return new FieldNode(
            new ArrayNode(schema.situacionpuestocat, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.situacionpuestocat_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.situacionpuestocat_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.situacionpuestocat_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get situacionpuestocat_aggregate() {
          return new FieldNode(
            schema.situacionpuestocat_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.situacionpuestocat_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.situacionpuestocat_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.situacionpuestocat_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get situacionpuestocat_by_pk() {
          return new FieldNode(
            schema.situacionpuestocat,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get std_country() {
          return new FieldNode(
            new ArrayNode(schema.std_country, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_country_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_country_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_country_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_country_aggregate() {
          return new FieldNode(
            schema.std_country_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_country_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_country_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_country_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_country_by_pk() {
          return new FieldNode(
            schema.std_country,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get std_geo_div() {
          return new FieldNode(
            new ArrayNode(schema.std_geo_div, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_div_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_div_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_geo_div_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_geo_div_aggregate() {
          return new FieldNode(
            schema.std_geo_div_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_div_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_div_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_geo_div_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_geo_div_by_pk() {
          return new FieldNode(
            schema.std_geo_div,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get std_geo_place() {
          return new FieldNode(
            new ArrayNode(schema.std_geo_place, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_place_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_place_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_geo_place_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_geo_place_aggregate() {
          return new FieldNode(
            schema.std_geo_place_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_place_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_geo_place_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_geo_place_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_geo_place_by_pk() {
          return new FieldNode(
            schema.std_geo_place,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get std_lu_edu_diploma() {
          return new FieldNode(
            new ArrayNode(schema.std_lu_edu_diploma, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_lu_edu_diploma_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_lu_edu_diploma_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.std_lu_edu_diploma_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get std_lu_edu_diploma_aggregate() {
          return new FieldNode(
            schema.std_lu_edu_diploma_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_lu_edu_diploma_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_lu_edu_diploma_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.std_lu_edu_diploma_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get std_lu_edu_diploma_by_pk() {
          return new FieldNode(
            schema.std_lu_edu_diploma,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get std_sub_geo_div() {
          return new FieldNode(
            new ArrayNode(schema.std_sub_geo_div, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_sub_geo_div_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_sub_geo_div_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.std_sub_geo_div_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get std_sub_geo_div_aggregate() {
          return new FieldNode(
            schema.std_sub_geo_div_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_sub_geo_div_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_sub_geo_div_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.std_sub_geo_div_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get std_sub_geo_div_by_pk() {
          return new FieldNode(
            schema.std_sub_geo_div,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get std_work_unit() {
          return new FieldNode(
            new ArrayNode(schema.std_work_unit, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_work_unit_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_work_unit_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_work_unit_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_work_unit_aggregate() {
          return new FieldNode(
            schema.std_work_unit_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_work_unit_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.std_work_unit_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.std_work_unit_bool_exp, true);
              }
            }),
            false
          );
        },
        get std_work_unit_by_pk() {
          return new FieldNode(
            schema.std_work_unit,
            new Arguments(
              {
                get id_organization() {
                  return new ArgumentsField(schema.String, false);
                },
                get std_id_work_unit() {
                  return new ArgumentsField(schema.String, false);
                }
              },
              true
            ),
            true
          );
        },
        get strapi_administrator() {
          return new FieldNode(
            new ArrayNode(schema.strapi_administrator, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.strapi_administrator_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_administrator_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.strapi_administrator_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get strapi_administrator_aggregate() {
          return new FieldNode(
            schema.strapi_administrator_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.strapi_administrator_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_administrator_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.strapi_administrator_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get strapi_administrator_by_pk() {
          return new FieldNode(
            schema.strapi_administrator,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get strapi_webhooks() {
          return new FieldNode(
            new ArrayNode(schema.strapi_webhooks, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_webhooks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_webhooks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.strapi_webhooks_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get strapi_webhooks_aggregate() {
          return new FieldNode(
            schema.strapi_webhooks_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_webhooks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.strapi_webhooks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.strapi_webhooks_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get strapi_webhooks_by_pk() {
          return new FieldNode(
            schema.strapi_webhooks,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get temario() {
          return new FieldNode(
            new ArrayNode(schema.temario, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.temario_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.temario_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.temario_bool_exp, true);
              }
            }),
            false
          );
        },
        get temario_aggregate() {
          return new FieldNode(
            schema.temario_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.temario_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.temario_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.temario_bool_exp, true);
              }
            }),
            false
          );
        },
        get temario_by_pk() {
          return new FieldNode(
            schema.temario,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get unidad_administrativas() {
          return new FieldNode(
            new ArrayNode(schema.unidad_administrativas, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.unidad_administrativas_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.unidad_administrativas_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.unidad_administrativas_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get unidad_administrativas_aggregate() {
          return new FieldNode(
            schema.unidad_administrativas_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.unidad_administrativas_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.unidad_administrativas_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.unidad_administrativas_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get unidad_administrativas_by_pk() {
          return new FieldNode(
            schema.unidad_administrativas,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get upload_file() {
          return new FieldNode(
            new ArrayNode(schema.upload_file, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.upload_file_bool_exp, true);
              }
            }),
            false
          );
        },
        get upload_file_aggregate() {
          return new FieldNode(
            schema.upload_file_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.upload_file_bool_exp, true);
              }
            }),
            false
          );
        },
        get upload_file_by_pk() {
          return new FieldNode(
            schema.upload_file,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        },
        get upload_file_morph() {
          return new FieldNode(
            new ArrayNode(schema.upload_file_morph, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_morph_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_morph_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.upload_file_morph_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get upload_file_morph_aggregate() {
          return new FieldNode(
            schema.upload_file_morph_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_morph_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_morph_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.upload_file_morph_bool_exp,
                  true
                );
              }
            }),
            false
          );
        },
        get upload_file_morph_by_pk() {
          return new FieldNode(
            schema.upload_file_morph,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                }
              },
              true
            ),
            true
          );
        }
      },
      {
        name: "subscription_root",
        extension: ((extensions as any) || {}).subscription_root
      }
    );
  },
  get temario() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get tema() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      { name: "temario", extension: ((extensions as any) || {}).temario }
    );
  },
  get temario_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.temario_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.temario, false),
            undefined,
            false
          );
        }
      },
      {
        name: "temario_aggregate",
        extension: ((extensions as any) || {}).temario_aggregate
      }
    );
  },
  get temario_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.temario_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.temario_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.temario_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.temario_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.temario_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(
            schema.temario_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.temario_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.temario_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.temario_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.temario_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.temario_variance_fields, undefined, true);
        }
      },
      {
        name: "temario_aggregate_fields",
        extension: ((extensions as any) || {}).temario_aggregate_fields
      }
    );
  },
  get temario_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "temario_avg_fields",
        extension: ((extensions as any) || {}).temario_avg_fields
      }
    );
  },
  get temario_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.temario_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.temario_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.temario_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get tema() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "temario_bool_exp" }
    );
  },
  get temario_constraint() {
    return new EnumNode({ name: "temario_constraint" });
  },
  get temario_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "temario_inc_input" }
    );
  },
  get temario_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get tema() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "temario_insert_input" }
    );
  },
  get temario_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get tema() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "temario_max_fields",
        extension: ((extensions as any) || {}).temario_max_fields
      }
    );
  },
  get temario_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get tema() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "temario_min_fields",
        extension: ((extensions as any) || {}).temario_min_fields
      }
    );
  },
  get temario_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.temario, false),
            undefined,
            false
          );
        }
      },
      {
        name: "temario_mutation_response",
        extension: ((extensions as any) || {}).temario_mutation_response
      }
    );
  },
  get temario_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.temario_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.temario_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.temario_bool_exp, true);
        }
      },
      { name: "temario_on_conflict" }
    );
  },
  get temario_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get tema() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "temario_order_by" }
    );
  },
  get temario_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "temario_pk_columns_input" }
    );
  },
  get temario_select_column() {
    return new EnumNode({ name: "temario_select_column" });
  },
  get temario_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get tema() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "temario_set_input" }
    );
  },
  get temario_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "temario_stddev_fields",
        extension: ((extensions as any) || {}).temario_stddev_fields
      }
    );
  },
  get temario_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "temario_stddev_pop_fields",
        extension: ((extensions as any) || {}).temario_stddev_pop_fields
      }
    );
  },
  get temario_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "temario_stddev_samp_fields",
        extension: ((extensions as any) || {}).temario_stddev_samp_fields
      }
    );
  },
  get temario_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "temario_sum_fields",
        extension: ((extensions as any) || {}).temario_sum_fields
      }
    );
  },
  get temario_update_column() {
    return new EnumNode({ name: "temario_update_column" });
  },
  get temario_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "temario_var_pop_fields",
        extension: ((extensions as any) || {}).temario_var_pop_fields
      }
    );
  },
  get temario_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "temario_var_samp_fields",
        extension: ((extensions as any) || {}).temario_var_samp_fields
      }
    );
  },
  get temario_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "temario_variance_fields",
        extension: ((extensions as any) || {}).temario_variance_fields
      }
    );
  },
  get timestamp() {
    return new ScalarNode({
      name: "timestamp",
      extension: ((extensions as any) || {}).timestamp
    });
  },
  get timestamp_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.timestamp, true);
        },
        get _gt() {
          return new InputNodeField(schema.timestamp, true);
        },
        get _gte() {
          return new InputNodeField(schema.timestamp, true);
        },
        get _in() {
          return new InputNodeField(
            new ArrayNode(schema.timestamp, true),
            true
          );
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.timestamp, true);
        },
        get _lte() {
          return new InputNodeField(schema.timestamp, true);
        },
        get _neq() {
          return new InputNodeField(schema.timestamp, true);
        },
        get _nin() {
          return new InputNodeField(
            new ArrayNode(schema.timestamp, true),
            true
          );
        }
      },
      { name: "timestamp_comparison_exp" }
    );
  },
  get timestamptz() {
    return new ScalarNode({
      name: "timestamptz",
      extension: ((extensions as any) || {}).timestamptz
    });
  },
  get timestamptz_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get _gt() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get _gte() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get _in() {
          return new InputNodeField(
            new ArrayNode(schema.timestamptz, true),
            true
          );
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get _lte() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get _neq() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get _nin() {
          return new InputNodeField(
            new ArrayNode(schema.timestamptz, true),
            true
          );
        }
      },
      { name: "timestamptz_comparison_exp" }
    );
  },
  get unidad_administrativas() {
    return new ObjectNode(
      {
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get dependencia() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get idDependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idUnidadAdministrativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        }
      },
      {
        name: "unidad_administrativas",
        extension: ((extensions as any) || {}).unidad_administrativas
      }
    );
  },
  get unidad_administrativas_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.unidad_administrativas_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.unidad_administrativas, false),
            undefined,
            false
          );
        }
      },
      {
        name: "unidad_administrativas_aggregate",
        extension: ((extensions as any) || {}).unidad_administrativas_aggregate
      }
    );
  },
  get unidad_administrativas_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.unidad_administrativas_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.unidad_administrativas_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.unidad_administrativas_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.unidad_administrativas_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.unidad_administrativas_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.unidad_administrativas_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.unidad_administrativas_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.unidad_administrativas_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.unidad_administrativas_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.unidad_administrativas_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.unidad_administrativas_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "unidad_administrativas_aggregate_fields",
        extension: ((extensions as any) || {})
          .unidad_administrativas_aggregate_fields
      }
    );
  },
  get unidad_administrativas_avg_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "unidad_administrativas_avg_fields",
        extension: ((extensions as any) || {}).unidad_administrativas_avg_fields
      }
    );
  },
  get unidad_administrativas_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.unidad_administrativas_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.unidad_administrativas_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.unidad_administrativas_bool_exp, true),
            true
          );
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        },
        get dependencia() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get idDependencia() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get idUnidadAdministrativa() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get nombre() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        }
      },
      { name: "unidad_administrativas_bool_exp" }
    );
  },
  get unidad_administrativas_constraint() {
    return new EnumNode({ name: "unidad_administrativas_constraint" });
  },
  get unidad_administrativas_inc_input() {
    return new InputNode(
      {
        get dependencia() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "unidad_administrativas_inc_input" }
    );
  },
  get unidad_administrativas_insert_input() {
    return new InputNode(
      {
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get dependencia() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get idDependencia() {
          return new InputNodeField(schema.String, true);
        },
        get idUnidadAdministrativa() {
          return new InputNodeField(schema.String, true);
        },
        get nombre() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz, true);
        }
      },
      { name: "unidad_administrativas_insert_input" }
    );
  },
  get unidad_administrativas_max_fields() {
    return new ObjectNode(
      {
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get dependencia() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idDependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idUnidadAdministrativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        }
      },
      {
        name: "unidad_administrativas_max_fields",
        extension: ((extensions as any) || {}).unidad_administrativas_max_fields
      }
    );
  },
  get unidad_administrativas_min_fields() {
    return new ObjectNode(
      {
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get dependencia() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get idDependencia() {
          return new FieldNode(schema.String, undefined, true);
        },
        get idUnidadAdministrativa() {
          return new FieldNode(schema.String, undefined, true);
        },
        get nombre() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        }
      },
      {
        name: "unidad_administrativas_min_fields",
        extension: ((extensions as any) || {}).unidad_administrativas_min_fields
      }
    );
  },
  get unidad_administrativas_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.unidad_administrativas, false),
            undefined,
            false
          );
        }
      },
      {
        name: "unidad_administrativas_mutation_response",
        extension: ((extensions as any) || {})
          .unidad_administrativas_mutation_response
      }
    );
  },
  get unidad_administrativas_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.unidad_administrativas_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.unidad_administrativas_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.unidad_administrativas_bool_exp,
            true
          );
        }
      },
      { name: "unidad_administrativas_on_conflict" }
    );
  },
  get unidad_administrativas_order_by() {
    return new InputNode(
      {
        get created_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get dependencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get idDependencia() {
          return new InputNodeField(schema.order_by, true);
        },
        get idUnidadAdministrativa() {
          return new InputNodeField(schema.order_by, true);
        },
        get nombre() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "unidad_administrativas_order_by" }
    );
  },
  get unidad_administrativas_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "unidad_administrativas_pk_columns_input" }
    );
  },
  get unidad_administrativas_select_column() {
    return new EnumNode({ name: "unidad_administrativas_select_column" });
  },
  get unidad_administrativas_set_input() {
    return new InputNode(
      {
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get dependencia() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get idDependencia() {
          return new InputNodeField(schema.String, true);
        },
        get idUnidadAdministrativa() {
          return new InputNodeField(schema.String, true);
        },
        get nombre() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz, true);
        }
      },
      { name: "unidad_administrativas_set_input" }
    );
  },
  get unidad_administrativas_stddev_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "unidad_administrativas_stddev_fields",
        extension: ((extensions as any) || {})
          .unidad_administrativas_stddev_fields
      }
    );
  },
  get unidad_administrativas_stddev_pop_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "unidad_administrativas_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .unidad_administrativas_stddev_pop_fields
      }
    );
  },
  get unidad_administrativas_stddev_samp_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "unidad_administrativas_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .unidad_administrativas_stddev_samp_fields
      }
    );
  },
  get unidad_administrativas_sum_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "unidad_administrativas_sum_fields",
        extension: ((extensions as any) || {}).unidad_administrativas_sum_fields
      }
    );
  },
  get unidad_administrativas_update_column() {
    return new EnumNode({ name: "unidad_administrativas_update_column" });
  },
  get unidad_administrativas_var_pop_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "unidad_administrativas_var_pop_fields",
        extension: ((extensions as any) || {})
          .unidad_administrativas_var_pop_fields
      }
    );
  },
  get unidad_administrativas_var_samp_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "unidad_administrativas_var_samp_fields",
        extension: ((extensions as any) || {})
          .unidad_administrativas_var_samp_fields
      }
    );
  },
  get unidad_administrativas_variance_fields() {
    return new ObjectNode(
      {
        get dependencia() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "unidad_administrativas_variance_fields",
        extension: ((extensions as any) || {})
          .unidad_administrativas_variance_fields
      }
    );
  },
  get upload_file() {
    return new ObjectNode(
      {
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get ext() {
          return new FieldNode(schema.String, undefined, true);
        },
        get hash() {
          return new FieldNode(schema.String, undefined, false);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get mime() {
          return new FieldNode(schema.String, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, false);
        },
        get provider() {
          return new FieldNode(schema.String, undefined, false);
        },
        get provider_metadata() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              }
            }),
            true
          );
        },
        get sha256() {
          return new FieldNode(schema.String, undefined, true);
        },
        get size() {
          return new FieldNode(schema.numeric, undefined, false);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, false);
        }
      },
      {
        name: "upload_file",
        extension: ((extensions as any) || {}).upload_file
      }
    );
  },
  get upload_file_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.upload_file_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.upload_file, false),
            undefined,
            false
          );
        }
      },
      {
        name: "upload_file_aggregate",
        extension: ((extensions as any) || {}).upload_file_aggregate
      }
    );
  },
  get upload_file_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.upload_file_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(schema.upload_file_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.upload_file_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.upload_file_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.upload_file_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.upload_file_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.upload_file_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.upload_file_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.upload_file_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.upload_file_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "upload_file_aggregate_fields",
        extension: ((extensions as any) || {}).upload_file_aggregate_fields
      }
    );
  },
  get upload_file_append_input() {
    return new InputNode(
      {
        get provider_metadata() {
          return new InputNodeField(schema.jsonb, true);
        }
      },
      { name: "upload_file_append_input" }
    );
  },
  get upload_file_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get size() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_avg_fields",
        extension: ((extensions as any) || {}).upload_file_avg_fields
      }
    );
  },
  get upload_file_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.upload_file_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.upload_file_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.upload_file_bool_exp, true),
            true
          );
        },
        get created_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        },
        get ext() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hash() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get mime() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get provider() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get provider_metadata() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get sha256() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get size() {
          return new InputNodeField(schema.numeric_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz_comparison_exp, true);
        },
        get url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        }
      },
      { name: "upload_file_bool_exp" }
    );
  },
  get upload_file_constraint() {
    return new EnumNode({ name: "upload_file_constraint" });
  },
  get upload_file_delete_at_path_input() {
    return new InputNode(
      {
        get provider_metadata() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        }
      },
      { name: "upload_file_delete_at_path_input" }
    );
  },
  get upload_file_delete_elem_input() {
    return new InputNode(
      {
        get provider_metadata() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "upload_file_delete_elem_input" }
    );
  },
  get upload_file_delete_key_input() {
    return new InputNode(
      {
        get provider_metadata() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "upload_file_delete_key_input" }
    );
  },
  get upload_file_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get size() {
          return new InputNodeField(schema.numeric, true);
        }
      },
      { name: "upload_file_inc_input" }
    );
  },
  get upload_file_insert_input() {
    return new InputNode(
      {
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get ext() {
          return new InputNodeField(schema.String, true);
        },
        get hash() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get mime() {
          return new InputNodeField(schema.String, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get provider() {
          return new InputNodeField(schema.String, true);
        },
        get provider_metadata() {
          return new InputNodeField(schema.jsonb, true);
        },
        get sha256() {
          return new InputNodeField(schema.String, true);
        },
        get size() {
          return new InputNodeField(schema.numeric, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "upload_file_insert_input" }
    );
  },
  get upload_file_max_fields() {
    return new ObjectNode(
      {
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get ext() {
          return new FieldNode(schema.String, undefined, true);
        },
        get hash() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get mime() {
          return new FieldNode(schema.String, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get provider() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sha256() {
          return new FieldNode(schema.String, undefined, true);
        },
        get size() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "upload_file_max_fields",
        extension: ((extensions as any) || {}).upload_file_max_fields
      }
    );
  },
  get upload_file_min_fields() {
    return new ObjectNode(
      {
        get created_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get ext() {
          return new FieldNode(schema.String, undefined, true);
        },
        get hash() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get mime() {
          return new FieldNode(schema.String, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get provider() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sha256() {
          return new FieldNode(schema.String, undefined, true);
        },
        get size() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamptz, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        }
      },
      {
        name: "upload_file_min_fields",
        extension: ((extensions as any) || {}).upload_file_min_fields
      }
    );
  },
  get upload_file_morph() {
    return new ObjectNode(
      {
        get field() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get related_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get related_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get upload_file_id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "upload_file_morph",
        extension: ((extensions as any) || {}).upload_file_morph
      }
    );
  },
  get upload_file_morph_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.upload_file_morph_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.upload_file_morph, false),
            undefined,
            false
          );
        }
      },
      {
        name: "upload_file_morph_aggregate",
        extension: ((extensions as any) || {}).upload_file_morph_aggregate
      }
    );
  },
  get upload_file_morph_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.upload_file_morph_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.upload_file_morph_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              }
            }),
            false
          );
        },
        get max() {
          return new FieldNode(
            schema.upload_file_morph_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.upload_file_morph_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.upload_file_morph_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.upload_file_morph_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.upload_file_morph_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.upload_file_morph_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.upload_file_morph_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.upload_file_morph_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.upload_file_morph_variance_fields,
            undefined,
            true
          );
        }
      },
      {
        name: "upload_file_morph_aggregate_fields",
        extension: ((extensions as any) || {})
          .upload_file_morph_aggregate_fields
      }
    );
  },
  get upload_file_morph_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get related_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upload_file_id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_morph_avg_fields",
        extension: ((extensions as any) || {}).upload_file_morph_avg_fields
      }
    );
  },
  get upload_file_morph_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.upload_file_morph_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.upload_file_morph_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.upload_file_morph_bool_exp, true),
            true
          );
        },
        get field() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get related_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get related_type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get upload_file_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        }
      },
      { name: "upload_file_morph_bool_exp" }
    );
  },
  get upload_file_morph_constraint() {
    return new EnumNode({ name: "upload_file_morph_constraint" });
  },
  get upload_file_morph_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get related_id() {
          return new InputNodeField(schema.Int, true);
        },
        get upload_file_id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "upload_file_morph_inc_input" }
    );
  },
  get upload_file_morph_insert_input() {
    return new InputNode(
      {
        get field() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get related_id() {
          return new InputNodeField(schema.Int, true);
        },
        get related_type() {
          return new InputNodeField(schema.String, true);
        },
        get upload_file_id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "upload_file_morph_insert_input" }
    );
  },
  get upload_file_morph_max_fields() {
    return new ObjectNode(
      {
        get field() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get related_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get related_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get upload_file_id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "upload_file_morph_max_fields",
        extension: ((extensions as any) || {}).upload_file_morph_max_fields
      }
    );
  },
  get upload_file_morph_min_fields() {
    return new ObjectNode(
      {
        get field() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get related_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get related_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get upload_file_id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "upload_file_morph_min_fields",
        extension: ((extensions as any) || {}).upload_file_morph_min_fields
      }
    );
  },
  get upload_file_morph_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.upload_file_morph, false),
            undefined,
            false
          );
        }
      },
      {
        name: "upload_file_morph_mutation_response",
        extension: ((extensions as any) || {})
          .upload_file_morph_mutation_response
      }
    );
  },
  get upload_file_morph_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.upload_file_morph_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.upload_file_morph_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.upload_file_morph_bool_exp, true);
        }
      },
      { name: "upload_file_morph_on_conflict" }
    );
  },
  get upload_file_morph_order_by() {
    return new InputNode(
      {
        get field() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get related_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get related_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get upload_file_id() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "upload_file_morph_order_by" }
    );
  },
  get upload_file_morph_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "upload_file_morph_pk_columns_input" }
    );
  },
  get upload_file_morph_select_column() {
    return new EnumNode({ name: "upload_file_morph_select_column" });
  },
  get upload_file_morph_set_input() {
    return new InputNode(
      {
        get field() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get related_id() {
          return new InputNodeField(schema.Int, true);
        },
        get related_type() {
          return new InputNodeField(schema.String, true);
        },
        get upload_file_id() {
          return new InputNodeField(schema.Int, true);
        }
      },
      { name: "upload_file_morph_set_input" }
    );
  },
  get upload_file_morph_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get related_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upload_file_id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_morph_stddev_fields",
        extension: ((extensions as any) || {}).upload_file_morph_stddev_fields
      }
    );
  },
  get upload_file_morph_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get related_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upload_file_id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_morph_stddev_pop_fields",
        extension: ((extensions as any) || {})
          .upload_file_morph_stddev_pop_fields
      }
    );
  },
  get upload_file_morph_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get related_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upload_file_id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_morph_stddev_samp_fields",
        extension: ((extensions as any) || {})
          .upload_file_morph_stddev_samp_fields
      }
    );
  },
  get upload_file_morph_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get related_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get upload_file_id() {
          return new FieldNode(schema.Int, undefined, true);
        }
      },
      {
        name: "upload_file_morph_sum_fields",
        extension: ((extensions as any) || {}).upload_file_morph_sum_fields
      }
    );
  },
  get upload_file_morph_update_column() {
    return new EnumNode({ name: "upload_file_morph_update_column" });
  },
  get upload_file_morph_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get related_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upload_file_id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_morph_var_pop_fields",
        extension: ((extensions as any) || {}).upload_file_morph_var_pop_fields
      }
    );
  },
  get upload_file_morph_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get related_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upload_file_id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_morph_var_samp_fields",
        extension: ((extensions as any) || {}).upload_file_morph_var_samp_fields
      }
    );
  },
  get upload_file_morph_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get related_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upload_file_id() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_morph_variance_fields",
        extension: ((extensions as any) || {}).upload_file_morph_variance_fields
      }
    );
  },
  get upload_file_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.upload_file, false),
            undefined,
            false
          );
        }
      },
      {
        name: "upload_file_mutation_response",
        extension: ((extensions as any) || {}).upload_file_mutation_response
      }
    );
  },
  get upload_file_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.upload_file_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.upload_file_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.upload_file_bool_exp, true);
        }
      },
      { name: "upload_file_on_conflict" }
    );
  },
  get upload_file_order_by() {
    return new InputNode(
      {
        get created_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get ext() {
          return new InputNodeField(schema.order_by, true);
        },
        get hash() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get mime() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_metadata() {
          return new InputNodeField(schema.order_by, true);
        },
        get sha256() {
          return new InputNodeField(schema.order_by, true);
        },
        get size() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        }
      },
      { name: "upload_file_order_by" }
    );
  },
  get upload_file_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        }
      },
      { name: "upload_file_pk_columns_input" }
    );
  },
  get upload_file_prepend_input() {
    return new InputNode(
      {
        get provider_metadata() {
          return new InputNodeField(schema.jsonb, true);
        }
      },
      { name: "upload_file_prepend_input" }
    );
  },
  get upload_file_select_column() {
    return new EnumNode({ name: "upload_file_select_column" });
  },
  get upload_file_set_input() {
    return new InputNode(
      {
        get created_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get ext() {
          return new InputNodeField(schema.String, true);
        },
        get hash() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get mime() {
          return new InputNodeField(schema.String, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get provider() {
          return new InputNodeField(schema.String, true);
        },
        get provider_metadata() {
          return new InputNodeField(schema.jsonb, true);
        },
        get sha256() {
          return new InputNodeField(schema.String, true);
        },
        get size() {
          return new InputNodeField(schema.numeric, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamptz, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        }
      },
      { name: "upload_file_set_input" }
    );
  },
  get upload_file_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get size() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_stddev_fields",
        extension: ((extensions as any) || {}).upload_file_stddev_fields
      }
    );
  },
  get upload_file_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get size() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_stddev_pop_fields",
        extension: ((extensions as any) || {}).upload_file_stddev_pop_fields
      }
    );
  },
  get upload_file_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get size() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_stddev_samp_fields",
        extension: ((extensions as any) || {}).upload_file_stddev_samp_fields
      }
    );
  },
  get upload_file_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get size() {
          return new FieldNode(schema.numeric, undefined, true);
        }
      },
      {
        name: "upload_file_sum_fields",
        extension: ((extensions as any) || {}).upload_file_sum_fields
      }
    );
  },
  get upload_file_update_column() {
    return new EnumNode({ name: "upload_file_update_column" });
  },
  get upload_file_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get size() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_var_pop_fields",
        extension: ((extensions as any) || {}).upload_file_var_pop_fields
      }
    );
  },
  get upload_file_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get size() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_var_samp_fields",
        extension: ((extensions as any) || {}).upload_file_var_samp_fields
      }
    );
  },
  get upload_file_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get size() {
          return new FieldNode(schema.Float, undefined, true);
        }
      },
      {
        name: "upload_file_variance_fields",
        extension: ((extensions as any) || {}).upload_file_variance_fields
      }
    );
  }
};

lazyGetters(schema);
